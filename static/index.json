{
  "ci/Intro.html": {
    "href": "ci/Intro.html",
    "title": "Funique 文件指南 For 持續性整合 | Funique Documentation",
    "keywords": "Funique 文件指南 For 持續性整合 Warning 現在還沒有 CI/DI :3"
  },
  "cloud/AWS.html": {
    "href": "cloud/AWS.html",
    "title": "AWS | Funique Documentation",
    "keywords": "AWS 登入"
  },
  "cloud/CHT.html": {
    "href": "cloud/CHT.html",
    "title": "中華 Cloud | Funique Documentation",
    "keywords": "中華 Cloud 登入"
  },
  "cloud/Intro.html": {
    "href": "cloud/Intro.html",
    "title": "Funique 文件指南 For 雲端管理者 | Funique Documentation",
    "keywords": "Funique 文件指南 For 雲端管理者"
  },
  "cloud/WIX.html": {
    "href": "cloud/WIX.html",
    "title": "WIX | Funique Documentation",
    "keywords": "WIX 登入"
  },
  "dev/Backend.html": {
    "href": "dev/Backend.html",
    "title": "後端 | Funique Documentation",
    "keywords": "後端 [!INFO] 雲端相關, 未來補充"
  },
  "dev/backend/Directus.html": {
    "href": "dev/backend/Directus.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "dev/backend/Docker.html": {
    "href": "dev/backend/Docker.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "dev/backend/Gateway.html": {
    "href": "dev/backend/Gateway.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "dev/backend/Portainer.html": {
    "href": "dev/backend/Portainer.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "dev/Contribute.html": {
    "href": "dev/Contribute.html",
    "title": "貢獻者 | Funique Documentation",
    "keywords": "貢獻者"
  },
  "dev/Intro.html": {
    "href": "dev/Intro.html",
    "title": "Funique 文件指南 For 開發者 | Funique Documentation",
    "keywords": "Funique 文件指南 For 開發者 對開發者的文件, 一些貢獻和開發相關的方法."
  },
  "dev/Maintainer.html": {
    "href": "dev/Maintainer.html",
    "title": "維護 | Funique Documentation",
    "keywords": "維護"
  },
  "dev/Style.html": {
    "href": "dev/Style.html",
    "title": "風格指南 | Funique Documentation",
    "keywords": "風格指南 請符合以下的風格, 使得未來檢視或是修改變得簡單許多 微小的 Commit 在每個小的更改都進行 Commit, 豐富的紀錄較容易追朔以及分析 分支命名 分支名稱請符合下方命名方法 v1.0.1 -> Debug 分支 v1.0 -> 合併至 v1.0 主分支 標籤命名 標籤名稱請符合下方命名方法 v1.0-release -> 1.0 最新 debugged 版本 v1.1-release -> 1.1 最新 debugged 版本 C# 專案註釋 (Optional) 下方的程式碼註釋能使其他人在 Review 時快速掌握函式的用途 Visual Studio 注釋指南 /// <summary> /// Extensions: Unclassified <br /> /// ------------------------------------------------ <br /> /// 擴充: 未分類 /// </summary> public static class UtilityExtensions{ } Repository README"
  },
  "dev/Tool.html": {
    "href": "dev/Tool.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "dev/tool/List.html": {
    "href": "dev/tool/List.html",
    "title": "開發好用工具列表 | Funique Documentation",
    "keywords": "開發好用工具列表 VS Code 插件支援文字編輯器，微軟的開源文字編輯器，網頁開發十分方便 Visual Studio Code Github 介面化 簡單介面化 GIT 流程 Github Desktop FTP 工具 FTP 介面話檔案 IO 操作 Filezilla API 工具 用於網頁開發使用，可以送出 Http Request 並且介面話使用 在 Windows 上安裝指令 Powershell choco install httpie choco upgrade httpie Httpie Node Nodejs 框架包含許多方便的工具 Nodejs // 安裝靜態伺服器 npm i -g http-server // 在目標資料夾 CMD 快速架設 http 靜態伺服器 http-server CURL 簡單的 http cli 工具 CURL Hoppscotch GUI Open API 工具, 支援各式各樣的格式 Hoppscotch Demo"
  },
  "index.html": {
    "href": "index.html",
    "title": "Funique Multimedia Framework | Funique Documentation",
    "keywords": "Funique Multimedia Framework Funique 多媒體框架 甚麼是 FMF ? 一列表的工具幫助你快速建置 Funique 專案 本 Wiki 會引導你架設專案、安裝插件、延伸應用 為什麼使用 FMF ? 第一次看到程式庫發現很雜亂，在工作的流程常常複製代碼來回，導致維護版本控制困難。時常代碼本身沒有單元測試，所以卡在結果環境測試階段 解決這個問題需要一個強大的框架，提升維護性。FMF 把組件都分開來做為插件管理。每個插件都有獨立的環境進行單元測試跟 Repo 頁面。 依賴性插件也能解決版本控制問題，每個插件都應該要有明確的依賴需求。 快速開始 串流快速開始 Unity快速開始 開發者快速開始 自動部屬快速開始"
  },
  "README.html": {
    "href": "README.html",
    "title": ".github | Funique Documentation",
    "keywords": ".github"
  },
  "stream/ffmpeg.html": {
    "href": "stream/ffmpeg.html",
    "title": "FFmpeg 指南 | Funique Documentation",
    "keywords": "FFmpeg 指南 FFmpeg 可以處裡影音的編碼, 解碼, 轉碼 根據使用的版本, 功能也會有所不同 ID Name Docuemnt 1. Funique FFmpeg Quick Start 2. Official FFmpeg Quick Start 主要還是以官方的 FFmpeg 為主, 除非有特殊的需求才會以自定義的 FFmpeg Feature Offical FFmpeg Custom Build FFmpeg H.264 Encoder ✔️ ✔️ Hevc Encoder ✔️ ✔️ H.264 RTMP ❌ ✔️ Hevc RTMP ❌ ✔️ HLS ✔️ ❌ 你可以看到 支援上很雜亂. 未來想一套全支援的方法論, 讓版本控制的管理成本降低 環境變數 把 FFmpeg 的資料夾加入至系統 Path 環境變數 使用者就可以在系統的任何一個地方使用此指令"
  },
  "stream/ffmpeg/indepth.html": {
    "href": "stream/ffmpeg/indepth.html",
    "title": "FFmpeg 深度分析 | Funique Documentation",
    "keywords": "FFmpeg 深度分析"
  },
  "stream/ffmpeg/overview.html": {
    "href": "stream/ffmpeg/overview.html",
    "title": "FFmpeg 指南 | Funique Documentation",
    "keywords": "FFmpeg 指南 官方網站 指令自動生成器 常用指令 聲音 刪除聲音 ffmpeg -i \"input.mp4\" -c:v copy -an \"output.mp4” 擷取聲音 ffmpeg -i input.mp4 -vn -acodec copy -preset ultrafast output.aac/m4a/wma 置換聲音 ffmpeg -i video.mp4 -i audio.wav -map 0:v -map 1:a -c:v copy -shortest output.mp4 增加聲音軌道 ffmpeg -i file.mp4 -i audio.wav -codec copy output.mp4 刪除影片 ffmpeg -i \"input.mp4\" -c:affmpeg -i file.mp4 -i audio.wav -codec copy output.mp4 copy -vn \"output.mp3” ffmpeg -ss 19:44 -i $(youtube-dl -f 22 -g URL) -acodec copy -vcodec copy -t 5 Fubuki-Yabe.mp4 ss HH:MM:SS : 起始時間 to HH:MM:SS : 結束時間 t HH:MM:SS : 長度 剪取 結合 擷取 轉檔 Https 把這串加入指令其中 -allowed_extensions ALL -user_agent \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/82.0.4050.0 Safari/537.36”"
  },
  "stream/Intro.html": {
    "href": "stream/Intro.html",
    "title": "Funique 文件指南 For 串流 | Funique Documentation",
    "keywords": "Funique 文件指南 For 串流 這篇會看到串流相關主題的文件 Stream 系統設計部分 Pipeline FFmpeg 開源工具使用, 編碼, 解碼, 轉碼 FFmpeg Tool Nginx 串流伺服器的運用 Nginx Tool"
  },
  "stream/nginx.html": {
    "href": "stream/nginx.html",
    "title": "Nginx 指南 | Funique Documentation",
    "keywords": "Nginx 指南 自定義的 Nginx 串流伺服器 靜態伺服器 接收 RTMP 信號 轉送 RTMP 信號 支援 HLS 轉碼 支援 DASH 轉碼 ID Name Docuemnt 1. RTMP Server Quick Start"
  },
  "stream/nginx/monitor.html": {
    "href": "stream/nginx/monitor.html",
    "title": "RTMP Nginx 伺服器觀測 | Funique Documentation",
    "keywords": "RTMP Nginx 伺服器觀測 輸入以下 Pattern 至瀏覽器中，得知你的串流狀態 http://[domain name]:80/rtmp_stat 你必須重新整理才會得到更新後的訊息"
  },
  "stream/nginx/overview.html": {
    "href": "stream/nginx/overview.html",
    "title": "Nginx 大綱 | Funique Documentation",
    "keywords": "Nginx 大綱 自定義的 RTMP nginx 串流伺服器，也有提供 Docker image 快速部屬 docker run -d --name rtmp -p 80:80 -p 1935:1935 -v /var/www/html/html/res://c/Users/myusername/Desktop/Test e87870823/rtmp:v1.5"
  },
  "stream/nginx/push.html": {
    "href": "stream/nginx/push.html",
    "title": "推影片串流 | Funique Documentation",
    "keywords": "推影片串流 映像檔案連結 URL 跟用途都在 Readme.md 中 使用 OBS 作為範例 在設定面板 (Setting) -> 串流 (Stream) 伺服器 -> 位址 串流鑰匙 -> URL 最後的部分 從上面的敘述，形成完整的 URL 會成為這樣 rtmp://192.168.61.190:1935/push/pushHD push -> 不轉碼, 只存流 live -> 轉所有格式 live_t -> 轉 ts 格式 live_m -> 轉 m4s 格式 live_d -> 轉 dash 格式 輸出的 URL 播放會為以下 http://192.168.61.190:80/hls/pushHD.m3u8 http://192.168.61.190:80/mp4/pushHD.m3u8 http://192.168.61.190:80/dash/pushHD.m3u8 如果你想要手動的轉碼，可以用 res 連結槽 http://192.168.61.190:80/res/custom_stream.m3u8"
  },
  "stream/nginx/setup.html": {
    "href": "stream/nginx/setup.html",
    "title": "架設串流伺服器 | Funique Documentation",
    "keywords": "架設串流伺服器 映像檔案 映像檔使用 Ubuntu 18.04 LTS, 如果你使用 Windows 你可以使用 WSL2 Docker Windows 安裝 啟用 windows WSL Powershell 並且輸入 dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart Docker 環境設定 在第一步驟完成後，你可以開始安裝 Docker 安裝 Docker 完成安裝後 切換版本至 WSL 2 wsl --set-default-version 2 恭喜，你有了 Docker 在 Windows 環境下 安裝串流伺服器服務 指令安裝 docker run -d --name rtmp -p 80:80 -p 1935:1935 -v /var/www/html/html/res://c/Users/myusername/Desktop/Test e87870823/rtmp:v1.5 GUI 安裝 先用指令拉取 Image 再生成 Container docker pull e87870823/rtmp:v1.5 Warning You should enter a exist folder for container path !! Ubuntu 安裝 sudo apt-get update sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg echo \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \"$(. /etc/os-release && echo \"$VERSION_CODENAME\"\" stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"
  },
  "stream/pipeline.html": {
    "href": "stream/pipeline.html",
    "title": "流程指南 | Funique Documentation",
    "keywords": "流程指南 This document is not about a tool or application. It is about how we provide our clients video stream. You will get every single part together. And have deep understand how the streaming service works. [!INFO] 某一天會補齊..."
  },
  "stream/pipeline/client.html": {
    "href": "stream/pipeline/client.html",
    "title": "客戶端 應用程式 | Funique Documentation",
    "keywords": "客戶端 應用程式 通常是指能夠播放串流或是影片網址的播放器 範例 瀏覽器無法直接播放 RTMP 影音串流, 必須轉碼成 HLS / DASH 的格式後播放 m3u8 連結. 部分播放器並不支援 H265 或是即時串流, 或是 m3u8 額外資料. 多聲音軌道無法被轉碼成 HLS 格式. 上方幾點是在設計管線時, 需要被列入考慮的部分. 常用框架支援格式 Avpro Support Format VLC Support Format HLS.js 支援度比較好的播放器: PotPlayer 64bit 用於測試播放方便許多"
  },
  "stream/pipeline/network.html": {
    "href": "stream/pipeline/network.html",
    "title": "網路 | Funique Documentation",
    "keywords": "網路 網路架構 for 串流伺服器 Warning TODO: Update funique current network implementation"
  },
  "stream/pipeline/source.html": {
    "href": "stream/pipeline/source.html",
    "title": "影像來源 | Funique Documentation",
    "keywords": "影像來源 影片來源通常會來自編碼端, 這可能是指串流伺服器 或是 OBS 串流. 影音串流會按照統一格式傳輸, 通常是指資料的保存 Layout, 使客戶端能夠辨識並且解碼. OBS 範例:"
  },
  "stream/pipeline/transcode.html": {
    "href": "stream/pipeline/transcode.html",
    "title": "轉碼 | Funique Documentation",
    "keywords": "轉碼 解碼並且把資料再編碼的動作 通常是使用 FFmpeg for HLS, RTMP, SRT, 檔案轉碼. 轉碼詳細, 請至: here [!NOTICE] This document only provide ffmpeg transcode guide for now"
  },
  "stream/tool.html": {
    "href": "stream/tool.html",
    "title": "工具集 | Funique Documentation",
    "keywords": "工具集"
  },
  "unity/Client/AD/QuickStart.html": {
    "href": "unity/Client/AD/QuickStart.html",
    "title": "廣告快速開始 | Funique Documentation",
    "keywords": "廣告快速開始"
  },
  "unity/Client/Cinema/QuickStart.html": {
    "href": "unity/Client/Cinema/QuickStart.html",
    "title": "劇院快速開始 | Funique Documentation",
    "keywords": "劇院快速開始 快速介紹配置用途, 以及繼承後能改寫什麼 配置 Media Control -> 指向 Funique 主播放器元件 如果你尋主播放器元件下去會找到詳細的 UI 控制 Audio Source -> AvPro 聲音輸出 FLive -> 運算著色器 For 自定義 Stereo VideoBtn -> 介面按鈕實體 Default_Media Player -> 預設 AvPro 播放器 Default_Stereo Mode -> 預設 Stereo mode 如果偵測失敗的時候 Options -> AvPro 媒體播放器列表 Stereo Config -> VR 影片的格式, 對照材質, 元件, 管線配置 Subtitle_Headon -> PC 螢幕字幕 Subtitle_Fixed -> 場景 3D 字幕 Sphere Obj -> 套用影片材質的渲染元件 Stuck Obj -> 過度使用的模型 (過時) Apply To Mesh -> 套用影片材質元件 Six DOF Scale -> 自由角尺寸 Sphere Scale -> 圓尺寸常數 Options Name -> 只是命名 Meta -> 額外資訊 Support_Swap -> 支援滑順 (很吃效能) Target -> AvPro 媒體播放器元件實體 Stereo Config Mode -> 模式 Target 目標配置 Stereo Config Target Apply Mesh Type -> 使用 3D 模型 Media Filter -> 貼圖的 Filter 模式 Wrap Mode -> 貼圖的 Wrap 模式 Hint Packing -> AvPro 播放器配置 Apply To Mesh Packing -> AvPro 元件配置 (正常跟播放器配置會一樣) Apply Sphere Scale -> 套用預設尺寸 Apply FLive Compute Shader -> 使用運算著色器 (建議只在 PC 版本開) Apply Grid -> 套用材質球的 Grid 演算法 High Quality -> 套用 AvPro 內建材質球的高品質設定 (過時) Apply Default Rotation -> 套用預設旋轉 Custom Sphere Scale -> 自定義尺寸 Custom Sphere Rotation -> 自定義旋轉 Is 4 Dof -> 攝影機自由移動 Is Live -> 是否是 Live 在高自定義的場景中, 則是能延伸基礎配置 詳細查看 HD 結尾的場景 多半都是過去用 Enum 的部分ㄝ, 在 HD 的場景下會以字串 ID Map 進行配置處理 繼承元件 // Writing your own manager public class CinemaClient : CinemaManagerClientUtility { } 在 Main 場景元件中, 你能修改或新增屬性 public class Main : MonoBehaviour { // Explose the config to editor level, provide desginer to tweek the value [SerializeField] CinemaManagerClientData data; // Our manager instance CinemaClient cinema; void Start(){ // Create cinema server manager process cinema = new CinemaClient(); cinema.RegisterConfig(data); } void Update(){ cinema.FrameUpdate(); } } 覆蓋 Main public class Main_Second : Main { // Explose the config to editor level, provide desginer to tweek the value [SerializeField] MyData mydata; MyComp _MyComp; public IMyComp CompManager => _MyComp; // You can override the default init manager behaviour protected override void InitManager(){ if (_MyComp != null) _MyComp.RegisterConfig(mydata); base.InitManager(); }"
  },
  "unity/Client/CinemaGuide.html": {
    "href": "unity/Client/CinemaGuide.html",
    "title": "劇院客戶端指南 | Funique Documentation",
    "keywords": "劇院客戶端指南 媒體播放器, AVPro, Audio 360 功能 [x] FLive [X] Stereo [ ] Cross-Domain [x] AvPro [x] Aduio360 [x] Media Control [x] Subtitles [ ] Custom Mesh"
  },
  "unity/Client/Client/QuickStart.html": {
    "href": "unity/Client/Client/QuickStart.html",
    "title": "遊戲客戶端快速開始 | Funique Documentation",
    "keywords": "遊戲客戶端快速開始 配置 XR Lock Head Set Reset -> 關閉軟重置 Video Sphere -> 影片渲染目標 Headset -> 頭盔目標 Eye Texture -> 更改 OpenXR 眼鏡解析度 Len -> 眼睛中心距離 Android Left Hand -> 左手控制器 Right Hand -> 右手控制器 Left Hand Line Rneder -> 左手射線 Right Hand Line Rneder -> 右手射線"
  },
  "unity/Client/ClientGuide.html": {
    "href": "unity/Client/ClientGuide.html",
    "title": "遊戲客戶端指南 | Funique Documentation",
    "keywords": "遊戲客戶端指南 Features"
  },
  "unity/Client/Manager/ImportToMain.html": {
    "href": "unity/Client/Manager/ImportToMain.html",
    "title": "匯入至場景管理員 | Funique Documentation",
    "keywords": "匯入至場景管理員 如果你還對定義的管理員有問題請至 自定義的管理員 置入你的 Main 如果你很滿意現在的 Main Class, 可以直接繼承 public class MyMain : Main{ // 在 Editor 會出現這個配置給你調整 [SerializeField] IConfig MyConfig; // 管理員實體 MyManager _MyManager; // 這個是讓其他元件 Casting 的屬性 // 可以用 Interface 或是 Class // 在這個範例使用的是 Class public virtual MyManager _MyManagerModule => _MyManager; // 接著就是把管理員的初始化加進來 protected override void InitManager() { if (_MyManager != null) _MyManager.RegisterConfig(MyConfig); base.InitManager(); } }"
  },
  "unity/Client/Manager/QuickStart.html": {
    "href": "unity/Client/Manager/QuickStart.html",
    "title": "管理者快速開始 | Funique Documentation",
    "keywords": "管理者快速開始 Note 繼承前言, 我們能在 Demo 場景中找到 Main 元件掛載在 GameManager 頂層遊戲物件上 Note 這主要是各個模組元件的配置結構 會將所有的模組元件列出來, 以下圖為例子. 這個管理員至少掛載了 UI, Verify 的模組 打開 Verify (認證的元件), 就可以修改配置 Tip 你可以在不改變場景結構的狀況下, 影響程式的運作行為. 這種設計上會比較複雜, 但是自由度是非常的高 如, 想要直接跳過 CRM 的認證登入, 直接勾選 Skip Login, 剩下的交由底層邏輯去判斷"
  },
  "unity/Client/Manager/WriteManager.html": {
    "href": "unity/Client/Manager/WriteManager.html",
    "title": "編寫管理員 | Funique Documentation",
    "keywords": "編寫管理員 底層管理員 這一層的管理員只能存取依賴性物件, 但是無法存取整合層的邏輯 主要的用途是底層的邏輯 // IData 為配置的資料結構 // 加上 System.Serializable 是為了能在 Editor 被看到 [System.Serializable] public struct IConfig { [SerializeField] public int MyIntValue; [SerializeField] public string MyStringValue; } // 繼承你的管理員至 IManagerBase public class MyManagerBase : ManagerBase<IConfig> { } 整合層管理員 (選擇性) 這一層的腳本通常會放在 Scripts/Samples/(整合資源名稱) 內 作為最上層的統整資源, 可以存取其他的管理員腳本 // 繼承你的底層管理員 public class MyManager : MyManagerBase { } // 存取方法為 public class myclass { // 之後則可以透過屬性進行存取 MyManager _myManager => EntryBase.Instance.GetModule<MyManager>(); // 建議進行 Cache 優化 // 避免每次都進行搜尋而拖垮效能 MyManager myManager { get { if(_myManager == null) _myManager = EntryBase.Instance.GetModule<MyManager>(); return _myManager; } } MyManager _myManager; }"
  },
  "unity/Client/ManagerGuide.html": {
    "href": "unity/Client/ManagerGuide.html",
    "title": "管理員指南 | Funique Documentation",
    "keywords": "管理員指南"
  },
  "unity/Client/Monitor/QuickStart.html": {
    "href": "unity/Client/Monitor/QuickStart.html",
    "title": "監控快速開始 | Funique Documentation",
    "keywords": "監控快速開始 用於顯示目前播放器狀態的幫助元件 產品輸出時不會包含此元件 配置"
  },
  "unity/Client/MonitorGuide.html": {
    "href": "unity/Client/MonitorGuide.html",
    "title": "Monitor Client Guide | Funique Documentation",
    "keywords": "Monitor Client Guide Features"
  },
  "unity/Client/Network/QuickStart.html": {
    "href": "unity/Client/Network/QuickStart.html",
    "title": "網路快速開始 | Funique Documentation",
    "keywords": "網路快速開始 配置 Use Master Network -> 初始化 UDP 網路管理員 Use Key -> 認證, 不打勾為無條件接受連線 Key Name -> 鑰匙字串"
  },
  "unity/Client/NetworkGuide.html": {
    "href": "unity/Client/NetworkGuide.html",
    "title": "Network Client Guide | Funique Documentation",
    "keywords": "Network Client Guide Features [x] OSC Communication [x] LiteNet Communication [ ] Mirror Communication TODO [ ] Moving LiteNet to Mirror"
  },
  "unity/Client/Setting/QuickStart.html": {
    "href": "unity/Client/Setting/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Client/SettingGuide.html": {
    "href": "unity/Client/SettingGuide.html",
    "title": "Setting Client Guide | Funique Documentation",
    "keywords": "Setting Client Guide Features"
  },
  "unity/Client/UI/QuickStart.html": {
    "href": "unity/Client/UI/QuickStart.html",
    "title": "客戶端介面 快速開始 | Funique Documentation",
    "keywords": "客戶端介面 快速開始 配置 Register Component -> UI 元件集 UI_Method -> 判斷 UI 模式 MasterUI -> Funique 媒體播放器場景元件實體 Patterns -> 介面顯示配置 Right Menu Setting -> 右鍵選單 (PC)"
  },
  "unity/Client/UIGuide.html": {
    "href": "unity/Client/UIGuide.html",
    "title": "客戶端介面 | Funique Documentation",
    "keywords": "客戶端介面 Features"
  },
  "unity/Client/Verify/QuickStart.html": {
    "href": "unity/Client/Verify/QuickStart.html",
    "title": "認證快速開始 | Funique Documentation",
    "keywords": "認證快速開始 配置 Skip Login -> 直接跳過登入 (測試) Xml -> 開啟偵測 XML 功能 File Detection Only -> 只會偵測 XML 檔案 Auto Login -> 自動登入 Auto Play -> 自動播放 Remember -> 記住登入資訊至作業系統機碼 (Windows) Account -> 預設帳號 Password -> 預設密碼 Play Delay -> 播放延遲 Directus -> 新型 CRM 位址 Address -> 舊式 CRM 位址 User -> 舊式 CRM 帳號 UserLimit -> 用戶上限 Countdown -> 登入倒數 MainUI -> CRM UI 視窗"
  },
  "unity/Client/VerifyGuide.html": {
    "href": "unity/Client/VerifyGuide.html",
    "title": "Verify Client Guide | Funique Documentation",
    "keywords": "Verify Client Guide Provide CRM DRM solution Features [x] Software CRM account password lock"
  },
  "unity/Client/Video/QuickStart.html": {
    "href": "unity/Client/Video/QuickStart.html",
    "title": "影片檔案快速開始 | Funique Documentation",
    "keywords": "影片檔案快速開始 配置 Use_Root 使用根目錄 (會忽略 Path) Interal -> 這個配置只有對 Android 輸出有用 Path -> 相對路徑 Video, TBE, SRT 外部路徑為 Movies Images 外部路徑為 DCIM"
  },
  "unity/Client/VideoGuide.html": {
    "href": "unity/Client/VideoGuide.html",
    "title": "Video Client Guide | Funique Documentation",
    "keywords": "Video Client Guide Features"
  },
  "unity/ClientGuide.html": {
    "href": "unity/ClientGuide.html",
    "title": "Funique 客戶端元件 | Funique Documentation",
    "keywords": "Funique 客戶端元件 所有客戶端會使用到的模組 ID Name Docuemnt 1. 劇院 快速開始 2. 遊戲客戶端 快速開始 3. 監控 快速開始 4. 網路 快速開始 5. 偏好設定 快速開始 6. 使用者介面 快速開始 7. 認證 快速開始 8. 媒體庫 快速開始 9. 廣告 快速開始 回到介紹 基本開始 開啟任何 Demo 場景並且在 Hierarchy 上尋找 GameManager (遊戲管理) Note Demo 場景的位置在於 Assets/Scripts/Samples/Demo/Scenes 繼承框架的架構, Demo 整合的物件都會在 Assets/Scripts/Samples/Demo 底下 Note 找到 Main 元件, 這個為 FMF 框架的主管理元件 這個是整個客戶端初始化相關的配置資料集, 透過修改配置來影響之後的執行行為 所有的東西, Demo 場景應該已經設置完畢, 除非有特殊需求, 否則並不用動到場景物件就可以使用 回到介紹"
  },
  "unity/Core/CoroutineHelper.html": {
    "href": "unity/Core/CoroutineHelper.html",
    "title": "協程幫助 | Funique Documentation",
    "keywords": "協程幫助 幫助那些需要用到 MonoBehaviour 協程的類別與函式 使用方法如下 class SampleA { void Use(){ Coroutine coroutine = CoroutineHelper.Instance.Run(Go); } IEnumerator Go(){ yield return new WaitForEndOfFrame(); } }"
  },
  "unity/Core/Counter.html": {
    "href": "unity/Core/Counter.html",
    "title": "計數器 | Funique Documentation",
    "keywords": "計數器 新增實體 Counter counter = new Counter(5f, true); 5f 代表時間長度 後面的布林值代表自動重置並進入下一個迴圈 放入這一段至更新函式 private void Update(){ counter.Update(Time.deltaTime); } 你也可以委派事件 private void Start(){ counter.OnTimeUp += CallMe; } private void CallMe(){ Debug.Log(\"Timer Is Up !!\"); }"
  },
  "unity/Core/EnumCycle.html": {
    "href": "unity/Core/EnumCycle.html",
    "title": "列舉迴圈 | Funique Documentation",
    "keywords": "列舉迴圈 會試著迴圈一般列舉, 不支援不規格 Index 列舉 簡單的範例 enum SomeEnum{ None, First, Second, Thrid } 建立一個迴圈實體 EnumCycle<SomeEnum> sample = new EnumCycle<SomeEnum>(); int current = 0; void Start(){ for(int i = 0; i < 10; i++){ current = sample.Next(current); Debug.Log(current); } // output: 0 // output: 1 // output: 2 // output: 3 // output: 0 // output: 1 // output: 2 // output: 3 // output: 0 // output: 1 }"
  },
  "unity/Core/Extensions.html": {
    "href": "unity/Core/Extensions.html",
    "title": "延伸 | Funique Documentation",
    "keywords": "延伸 延伸可以提供程式的彈性"
  },
  "unity/Core/Logger.html": {
    "href": "unity/Core/Logger.html",
    "title": "Funique 紀錄 | Funique Documentation",
    "keywords": "Funique 紀錄 主要用在 Android 上會很方便, 因為 Android 主要都是用 ADB 產生 Log 在 Console 上 執行完也不會留下任何紀錄, 這種方式的話. 會在 persistentdatapath 上留下 log.txt 的文字檔案 註冊紀錄系統 void Start(){ FuniqueLogger.Init(); FuniqueLogger.Log(\"This will log\", \"Main\"); } 可以選擇紀錄的方法論 void Start(){ // This will only use build unity log, not output the message to file FuniqueLogger.Init(LoggerApply.Unity); FuniqueLogger.Log(\"This will log\", \"Main\"); } 使用紀錄系統 void Start(){ FuniqueLogger.Init(); FuniqueLogger.Log(\"Log\", \"My Manager\"); FuniqueLogger.WarningLog(\"Warning\", \"My Manager\"); FuniqueLogger.ErrorLog(\"Warning\", \"My Manager\"); }"
  },
  "unity/Core/ThirdParty.html": {
    "href": "unity/Core/ThirdParty.html",
    "title": "第三方應用程式 | Funique Documentation",
    "keywords": "第三方應用程式 有時候程式需要存取第三方應用程式, 透過一個代理類別來管理應用程式避免錯誤. 首先, 我們先繼承代理人物件 public class Demo : ThirdPartyApplication { // 在 Debug 上看到的標籤 protected override string => \"WorkerName\"; public Demo() : base() { MainProcess.StartInfo.FileName = \"cmd.exe\"; MainProcess.StartInfo.WorkingDirectory = \"C:/work_directory\"; // For access standard IO MainProcess.StartInfo.RedirectStandardError = true; MainProcess.StartInfo.RedirectStandardInput = true; MainProcess.StartInfo.RedirectStandardOutput = true; MainProcess.StartInfo.CreateNoWindow = true; MainProcess.StartInfo.UseShellExecute = false; } } 然後我們就可以在主要類別上生成此 代理物件 藉此來控制應用程式 public class component : MonoBehaviour{ Demo demo; void Start(){ // Prepare the process start info demo = new Demo(); // Actually start the process demo.Run(); } void OnDestroy(){ // Do not forget the release the resource after we leave // Otherwise this will causing buggy beheviour demo.Dispose(); } }"
  },
  "unity/CoreGuide.html": {
    "href": "unity/CoreGuide.html",
    "title": "Funique 核心 | Funique Documentation",
    "keywords": "Funique 核心 核心庫是大部分的模組依賴的模組 包含了底層列舉, 結構, 類別, 演算法等等 建議在開發前或是使用前直接匯入這個模組 ID Name Docuemnt 1. Naughty Attributes 快速開始 2. Regex Builder 快速開始 2. Faster Gizmo 快速開始 回到介紹"
  },
  "unity/Installation.html": {
    "href": "unity/Installation.html",
    "title": "安裝包 | Funique Documentation",
    "keywords": "安裝包 使用 Git 專案 在 Github 組織 下尋找 project 開頭的 repository Clone 到你的資料夾, 以下為範例 git clone https://github.com/Funique2022/project_funique_player.git --branch v1.0 branch 為現在要選取的版本號 或是使用 Github Desktop 進行拉取動作 在根目錄尋找批次檔案 load 下載所有子模組 remove 刪除所有子模組 update 更新所有子模組 有些專案是需要資源的匯入 才會使其成立 這些資源不會放在 git 的雲上面 主要原因是因為容量的限制 這些會放在 NAS 上的 資源資料夾中 如圖 會根據專案名稱下有各種資源資料夾 把這些資料夾丟到專案資料夾的 Assets 中即可"
  },
  "unity/intro.html": {
    "href": "unity/intro.html",
    "title": "Funique 文件指南 For 使用者 | Funique Documentation",
    "keywords": "Funique 文件指南 For 使用者 在這篇中, 你會看到如何架設 Unity 專案 繼承框架邏輯, 編寫自定義元件\\ 如果找到 bugs 可以找到指定的 repo 並且在 issue 回報問題 寫下你的問題, dev 會嘗試改善 架構 Funique 專案有幾個規則套用 在開始以前, 建議先閱讀 這篇 Note 有些模組是通用型的, 可以被套用在伺服器或客戶端. 專案一覽 工具快速開始 客戶端快速開始 伺服器快速開始"
  },
  "unity/List.html": {
    "href": "unity/List.html",
    "title": "Funique 專案一覽 | Funique Documentation",
    "keywords": "Funique 專案一覽 播放器相關 ID Name 1. 客戶端 2. 控制中心 3D 掃描 ID Name 1. 時尚周 2. TOY3 3. 故宮 4. Floor2 5. Template Night 6. 達文西 7. 董心如 8. 天橋 遊戲開發 ID Name 工具開發 ID Name 1. 立體聲 2. 導播機 3. 芭比 回到介紹"
  },
  "unity/Server/Cinema/QuickStart.html": {
    "href": "unity/Server/Cinema/QuickStart.html",
    "title": "Cinema Server Logic Qucik Start | Funique Documentation",
    "keywords": "Cinema Server Logic Qucik Start Create a class inherit cinema server manager public class CinemaServer : CinemaManagerServerUtility { } public class Main : MonoBehaviour { // Explose the config to editor level, provide desginer to tweek the value [SerializeField] CinemaManagerServerData data; // Our manager instance CinemaServer cinema; void Start(){ // Create cinema server manager process cinema = new CinemaServer(); cinema.RegisterConfig(data); } }"
  },
  "unity/Server/CinemaGuide.html": {
    "href": "unity/Server/CinemaGuide.html",
    "title": "Cinema Server Guide | Funique Documentation",
    "keywords": "Cinema Server Guide Manages all cinema and clients, Sort of like grouping manager, but with cienma data and feature attached to it. Features [x] Cinema view management [x] Cinema data management [x] Cinema client remote control To check the detail implementation: Quick Start"
  },
  "unity/Server/Media/QuickStart.html": {
    "href": "unity/Server/Media/QuickStart.html",
    "title": "Media Server Logic Qucik Start | Funique Documentation",
    "keywords": "Media Server Logic Qucik Start"
  },
  "unity/Server/MediaGuide.html": {
    "href": "unity/Server/MediaGuide.html",
    "title": "Media Server Guide | Funique Documentation",
    "keywords": "Media Server Guide Manage client side media player actions Features [x] Control client side play, pause, stop [x] Control client side stereo [x] Control client side subtitle"
  },
  "unity/Server/Network/QuickStart.html": {
    "href": "unity/Server/Network/QuickStart.html",
    "title": "Server Network Module Quick Start | Funique Documentation",
    "keywords": "Server Network Module Quick Start Create a class inherit network server manager public class NetworkServer : NetworkManagerServerUtility { }"
  },
  "unity/Server/NetworkGuide.html": {
    "href": "unity/Server/NetworkGuide.html",
    "title": "Network Server Guide | Funique Documentation",
    "keywords": "Network Server Guide Handle network signal, sending and receiving. Features [x] UDP Server manage [x] UDP network sender [x] UDP network receiver [x] OSC network sender [x] OSC Server manage"
  },
  "unity/Server/Player/QuickStart.html": {
    "href": "unity/Server/Player/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Server/PlayerGuide.html": {
    "href": "unity/Server/PlayerGuide.html",
    "title": "Player Server Guide | Funique Documentation",
    "keywords": "Player Server Guide Manage clients IP and scene object instance. Features [x] Dictionary map manage player IP, scene object instance"
  },
  "unity/Server/Setting/QuickStart.html": {
    "href": "unity/Server/Setting/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Server/SettingGuide.html": {
    "href": "unity/Server/SettingGuide.html",
    "title": "Setting Server Guide | Funique Documentation",
    "keywords": "Setting Server Guide Manage setting configuration. Features [x] Configuration generate [x] Playlist info record [x] Cinema info record [x] Clients info record [x] Saving [x] Loading"
  },
  "unity/Server/Streaming/QuickStart.html": {
    "href": "unity/Server/Streaming/QuickStart.html",
    "title": "Server Streaming Module Quick Start | Funique Documentation",
    "keywords": "Server Streaming Module Quick Start Create a class inherit streaming server manager public class StreamingServer : StreamingManagerUtility { }"
  },
  "unity/Server/StreamingGuide.html": {
    "href": "unity/Server/StreamingGuide.html",
    "title": "Streaming Server Guide | Funique Documentation",
    "keywords": "Streaming Server Guide Manage streaming casting. Features [x] FFmpeg manage [x] Nginx manage [x] HLS support (DASH, M4S, TS) [x] RTMP support [x] LIVE mode support [x] VOD mode support [ ] Raw ffmpeg command support [ ] Docker nginx server manage"
  },
  "unity/Server/UI/QuickStart.html": {
    "href": "unity/Server/UI/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Server/UIGuide.html": {
    "href": "unity/Server/UIGuide.html",
    "title": "伺服器介面指南 | Funique Documentation",
    "keywords": "伺服器介面指南 Features [x] 工具列管理 [x] 面板管理 [x] 劇院群組管理 [x] 頁面管理 [x] 右鍵選單 [x] 動態右鍵選單註冊"
  },
  "unity/Server/Video/QuickStart.html": {
    "href": "unity/Server/Video/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Server/VideoGuide.html": {
    "href": "unity/Server/VideoGuide.html",
    "title": "Video Server Guide | Funique Documentation",
    "keywords": "Video Server Guide Store video, playlist information Features [x] Video info store [x] Saving video info [x] Loading video info"
  },
  "unity/ServerGuide.html": {
    "href": "unity/ServerGuide.html",
    "title": "Funique 伺服器元件 | Funique Documentation",
    "keywords": "Funique 伺服器元件 所有伺服器會使用到的模組 ID Name Docuemnt 1. 劇院 快速開始 2. 媒體邏輯 快速開始 3. 網路 快速開始 4. 用戶 快速開始 5. 設定 快速開始 6. 串流 快速開始 7. 使用者介面 快速開始 8. 影片庫 快速開始 回到介紹"
  },
  "unity/Setup.html": {
    "href": "unity/Setup.html",
    "title": "架設 | Funique Documentation",
    "keywords": "架設 在這一篇中, 你可以了解專案架構 第三方工具幫助 Git Github Desktop 架構 這是主要的專案架構 統整(Integration) (主要邏輯) 會保存在 /Assets/Scripts 模組(Modules) (通用邏輯) 會保存在 /Assets/FuniquePlugin/[Module Name] 媒體, 巨大檔案(忽略元件) 會保存在 /Assets/FuniqueAssets 這樣可以確保 模組的載入行為批次檔案都會在根目錄 Warning 當專案的依賴性改變之時, 便要手動更改根目錄批次檔案, 否則下一個人將會下載錯誤的依賴模組. 依賴性 每個模組都會有他的依賴性, 這些東西都會寫在模組的 readme.md 上"
  },
  "unity/Tool/Designer/QuickStart.html": {
    "href": "unity/Tool/Designer/QuickStart.html",
    "title": "設計快速開始 | Funique Documentation",
    "keywords": "設計快速開始 一些加速開發人員的 Editor 工具 Bundle 幫助 Unity 開發人員模式 元件序列化剪貼 掃描模型快速製作 Prefab"
  },
  "unity/Tool/DesignerGuide.html": {
    "href": "unity/Tool/DesignerGuide.html",
    "title": "設計指南 | Funique Documentation",
    "keywords": "設計指南 設計指南主要是一堆 Editor 的工具 幫助重複性的行為, 像是 Bundle Package 的打包 Components"
  },
  "unity/ToolGuide.html": {
    "href": "unity/ToolGuide.html",
    "title": "Unity 工具 | Funique Documentation",
    "keywords": "Unity 工具 一些 Unity 編輯器的腳本, 幫助重複性高的流程. 優化設計過程 ID Name Docuemnt 1. 設計師 快速開始 回到介紹"
  }
}