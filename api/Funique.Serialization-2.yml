### YamlMime:ManagedReference
items:
- uid: Funique.Serialization`2
  commentId: T:Funique.Serialization`2
  id: Serialization`2
  parent: Funique
  children:
  - Funique.Serialization`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  - Funique.Serialization`2.OnAfterDeserialize
  - Funique.Serialization`2.OnBeforeSerialize
  - Funique.Serialization`2.ToDictionary
  langs:
  - csharp
  - vb
  name: Serialization<TKey, TValue>
  nameWithType: Serialization<TKey, TValue>
  fullName: Funique.Serialization<TKey, TValue>
  type: Class
  source:
    remote:
      path: Util/Serialization.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: Serialization
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Util/Serialization.cs
    startLine: 39
  assemblies:
  - Funique.Core
  namespace: Funique
  summary: "\nHelping serializating the dictionary varaible <br />\n------------------------------------------------ <br />\n幫助序列化 目錄 的資料型態\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class Serialization<TKey, TValue> : ISerializationCallbackReceiver
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      <Serializable>

      Public Class Serialization(Of TKey, TValue)

          Implements ISerializationCallbackReceiver
  inheritance:
  - System.Object
  implements:
  - UnityEngine.ISerializationCallbackReceiver
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: Serialization(Of TKey, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Funique.Serialization(Of TKey, TValue)
  name.vb: Serialization(Of TKey, TValue)
- uid: Funique.Serialization`2.ToDictionary
  commentId: M:Funique.Serialization`2.ToDictionary
  id: ToDictionary
  parent: Funique.Serialization`2
  langs:
  - csharp
  - vb
  name: ToDictionary()
  nameWithType: Serialization<TKey, TValue>.ToDictionary()
  fullName: Funique.Serialization<TKey, TValue>.ToDictionary()
  type: Method
  source:
    remote:
      path: Util/Serialization.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: ToDictionary
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Util/Serialization.cs
    startLine: 46
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public Dictionary<TKey, TValue> ToDictionary()
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
    content.vb: Public Function ToDictionary As Dictionary(Of TKey, TValue)
  overload: Funique.Serialization`2.ToDictionary*
  nameWithType.vb: Serialization(Of TKey, TValue).ToDictionary()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Funique.Serialization(Of TKey, TValue).ToDictionary()
- uid: Funique.Serialization`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  commentId: M:Funique.Serialization`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.Dictionary{`0,`1})'
  parent: Funique.Serialization`2
  langs:
  - csharp
  - vb
  name: Serialization(Dictionary<TKey, TValue>)
  nameWithType: Serialization<TKey, TValue>.Serialization(Dictionary<TKey, TValue>)
  fullName: Funique.Serialization<TKey, TValue>.Serialization(System.Collections.Generic.Dictionary<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: Util/Serialization.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: .ctor
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Util/Serialization.cs
    startLine: 48
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public Serialization(Dictionary<TKey, TValue> target)
    parameters:
    - id: target
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
    content.vb: Public Sub New(target As Dictionary(Of TKey, TValue))
  overload: Funique.Serialization`2.#ctor*
  nameWithType.vb: Serialization(Of TKey, TValue).Serialization(Dictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Funique.Serialization(Of TKey, TValue).Serialization(System.Collections.Generic.Dictionary(Of TKey, TValue))
  name.vb: Serialization(Dictionary(Of TKey, TValue))
- uid: Funique.Serialization`2.OnBeforeSerialize
  commentId: M:Funique.Serialization`2.OnBeforeSerialize
  id: OnBeforeSerialize
  parent: Funique.Serialization`2
  langs:
  - csharp
  - vb
  name: OnBeforeSerialize()
  nameWithType: Serialization<TKey, TValue>.OnBeforeSerialize()
  fullName: Funique.Serialization<TKey, TValue>.OnBeforeSerialize()
  type: Method
  source:
    remote:
      path: Util/Serialization.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: OnBeforeSerialize
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Util/Serialization.cs
    startLine: 53
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public void OnBeforeSerialize()
    content.vb: Public Sub OnBeforeSerialize
  overload: Funique.Serialization`2.OnBeforeSerialize*
  implements:
  - UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
  nameWithType.vb: Serialization(Of TKey, TValue).OnBeforeSerialize()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Funique.Serialization(Of TKey, TValue).OnBeforeSerialize()
- uid: Funique.Serialization`2.OnAfterDeserialize
  commentId: M:Funique.Serialization`2.OnAfterDeserialize
  id: OnAfterDeserialize
  parent: Funique.Serialization`2
  langs:
  - csharp
  - vb
  name: OnAfterDeserialize()
  nameWithType: Serialization<TKey, TValue>.OnAfterDeserialize()
  fullName: Funique.Serialization<TKey, TValue>.OnAfterDeserialize()
  type: Method
  source:
    remote:
      path: Util/Serialization.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: OnAfterDeserialize
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Util/Serialization.cs
    startLine: 59
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public void OnAfterDeserialize()
    content.vb: Public Sub OnAfterDeserialize
  overload: Funique.Serialization`2.OnAfterDeserialize*
  implements:
  - UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
  nameWithType.vb: Serialization(Of TKey, TValue).OnAfterDeserialize()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Funique.Serialization(Of TKey, TValue).OnAfterDeserialize()
references:
- uid: Funique
  commentId: N:Funique
  name: Funique
  nameWithType: Funique
  fullName: Funique
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: UnityEngine.ISerializationCallbackReceiver
  commentId: T:UnityEngine.ISerializationCallbackReceiver
  parent: UnityEngine
  isExternal: true
  name: ISerializationCallbackReceiver
  nameWithType: ISerializationCallbackReceiver
  fullName: UnityEngine.ISerializationCallbackReceiver
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Funique.Serialization`2.ToDictionary*
  commentId: Overload:Funique.Serialization`2.ToDictionary
  name: ToDictionary
  nameWithType: Serialization<TKey, TValue>.ToDictionary
  fullName: Funique.Serialization<TKey, TValue>.ToDictionary
  nameWithType.vb: Serialization(Of TKey, TValue).ToDictionary
  fullName.vb: Funique.Serialization(Of TKey, TValue).ToDictionary
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Funique.Serialization`2.#ctor*
  commentId: Overload:Funique.Serialization`2.#ctor
  name: Serialization
  nameWithType: Serialization<TKey, TValue>.Serialization
  fullName: Funique.Serialization<TKey, TValue>.Serialization
  nameWithType.vb: Serialization(Of TKey, TValue).Serialization
  fullName.vb: Funique.Serialization(Of TKey, TValue).Serialization
- uid: Funique.Serialization`2.OnBeforeSerialize*
  commentId: Overload:Funique.Serialization`2.OnBeforeSerialize
  name: OnBeforeSerialize
  nameWithType: Serialization<TKey, TValue>.OnBeforeSerialize
  fullName: Funique.Serialization<TKey, TValue>.OnBeforeSerialize
  nameWithType.vb: Serialization(Of TKey, TValue).OnBeforeSerialize
  fullName.vb: Funique.Serialization(Of TKey, TValue).OnBeforeSerialize
- uid: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
  commentId: M:UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
  parent: UnityEngine.ISerializationCallbackReceiver
  isExternal: true
  name: OnBeforeSerialize()
  nameWithType: ISerializationCallbackReceiver.OnBeforeSerialize()
  fullName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
  spec.csharp:
  - uid: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
    name: OnBeforeSerialize
    nameWithType: ISerializationCallbackReceiver.OnBeforeSerialize
    fullName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
    name: OnBeforeSerialize
    nameWithType: ISerializationCallbackReceiver.OnBeforeSerialize
    fullName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Serialization`2.OnAfterDeserialize*
  commentId: Overload:Funique.Serialization`2.OnAfterDeserialize
  name: OnAfterDeserialize
  nameWithType: Serialization<TKey, TValue>.OnAfterDeserialize
  fullName: Funique.Serialization<TKey, TValue>.OnAfterDeserialize
  nameWithType.vb: Serialization(Of TKey, TValue).OnAfterDeserialize
  fullName.vb: Funique.Serialization(Of TKey, TValue).OnAfterDeserialize
- uid: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
  commentId: M:UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
  parent: UnityEngine.ISerializationCallbackReceiver
  isExternal: true
  name: OnAfterDeserialize()
  nameWithType: ISerializationCallbackReceiver.OnAfterDeserialize()
  fullName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
  spec.csharp:
  - uid: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
    name: OnAfterDeserialize
    nameWithType: ISerializationCallbackReceiver.OnAfterDeserialize
    fullName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
    name: OnAfterDeserialize
    nameWithType: ISerializationCallbackReceiver.OnAfterDeserialize
    fullName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
