### YamlMime:ManagedReference
items:
- uid: Funique.PlayerScheme
  commentId: T:Funique.PlayerScheme
  id: PlayerScheme
  parent: Funique
  children:
  - Funique.PlayerScheme.Exhibition
  - Funique.PlayerScheme.StandAlone
  - Funique.PlayerScheme.Theater
  langs:
  - csharp
  - vb
  name: PlayerScheme
  nameWithType: PlayerScheme
  fullName: Funique.PlayerScheme
  type: Enum
  source:
    remote:
      path: Enum/PlayerScheme.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: PlayerScheme
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Enum/PlayerScheme.cs
    startLine: 10
  assemblies:
  - Funique.Core
  namespace: Funique
  summary: "\nClient format <br />\nOrder is important <br />\n------------------------------------------------ <br />\n用戶格式 <br />\n順序重要\n"
  example: []
  syntax:
    content: public enum PlayerScheme
    content.vb: Public Enum PlayerScheme
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: Funique.PlayerScheme.Theater
  commentId: F:Funique.PlayerScheme.Theater
  id: Theater
  parent: Funique.PlayerScheme
  langs:
  - csharp
  - vb
  name: Theater
  nameWithType: PlayerScheme.Theater
  fullName: Funique.PlayerScheme.Theater
  type: Field
  source:
    remote:
      path: Enum/PlayerScheme.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: Theater
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Enum/PlayerScheme.cs
    startLine: 19
  assemblies:
  - Funique.Core
  namespace: Funique
  summary: "\nClient is theater mode <br />\nServer have fully control over the clients <br />\n------------------------------------------------ <br />\n客戶端是劇院模式 <br />\n伺服器有全部的控制\n"
  example: []
  syntax:
    content: Theater = 0
    return:
      type: Funique.PlayerScheme
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Funique.PlayerScheme.StandAlone
  commentId: F:Funique.PlayerScheme.StandAlone
  id: StandAlone
  parent: Funique.PlayerScheme
  langs:
  - csharp
  - vb
  name: StandAlone
  nameWithType: PlayerScheme.StandAlone
  fullName: Funique.PlayerScheme.StandAlone
  type: Field
  source:
    remote:
      path: Enum/PlayerScheme.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: StandAlone
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Enum/PlayerScheme.cs
    startLine: 25
  assemblies:
  - Funique.Core
  namespace: Funique
  summary: "\nClient can play whatever they want <br />\n------------------------------------------------ <br />\n客戶端可以有自主權\n"
  example: []
  syntax:
    content: StandAlone = 1
    return:
      type: Funique.PlayerScheme
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Funique.PlayerScheme.Exhibition
  commentId: F:Funique.PlayerScheme.Exhibition
  id: Exhibition
  parent: Funique.PlayerScheme
  langs:
  - csharp
  - vb
  name: Exhibition
  nameWithType: PlayerScheme.Exhibition
  fullName: Funique.PlayerScheme.Exhibition
  type: Field
  source:
    remote:
      path: Enum/PlayerScheme.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: Exhibition
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Enum/PlayerScheme.cs
    startLine: 32
  assemblies:
  - Funique.Core
  namespace: Funique
  summary: "\nHmmmmm, I have no idea what is this <br />\nMaybe server can control some part of it? <br />\n------------------------------------------------ <br />\n啥\n"
  example: []
  syntax:
    content: Exhibition = 2
    return:
      type: Funique.PlayerScheme
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Funique
  commentId: N:Funique
  name: Funique
  nameWithType: Funique
  fullName: Funique
- uid: Funique.PlayerScheme
  commentId: T:Funique.PlayerScheme
  parent: Funique
  name: PlayerScheme
  nameWithType: PlayerScheme
  fullName: Funique.PlayerScheme
