### YamlMime:ManagedReference
items:
- uid: Funique.Manager.NetworkManagerServerUtility
  commentId: T:Funique.Manager.NetworkManagerServerUtility
  id: NetworkManagerServerUtility
  parent: Funique.Manager
  children:
  - Funique.Manager.NetworkManagerServerUtility._dataWriter
  - Funique.Manager.NetworkManagerServerUtility.AnalysisUpdateInformation(Funique.PlayerInformation,System.String[],System.Int32)
  - Funique.Manager.NetworkManagerServerUtility.CleanPlayer
  - Funique.Manager.NetworkManagerServerUtility.CleanWatchDog
  - Funique.Manager.NetworkManagerServerUtility.CreatePlayerInformation(System.String,System.Int32)
  - Funique.Manager.NetworkManagerServerUtility.CreateWatchDog(System.String,System.String,System.Int32)
  - Funique.Manager.NetworkManagerServerUtility.Dispose
  - Funique.Manager.NetworkManagerServerUtility.FrameUpdate
  - Funique.Manager.NetworkManagerServerUtility.GetUIBinding(System.String)
  - Funique.Manager.NetworkManagerServerUtility.Initialization
  - Funique.Manager.NetworkManagerServerUtility.IsNewAddress(System.String)
  - Funique.Manager.NetworkManagerServerUtility.IsNewPeer(System.String)
  - Funique.Manager.NetworkManagerServerUtility.IsNewWatchdog(System.String)
  - Funique.Manager.NetworkManagerServerUtility.IsPeerVaild(System.String)
  - Funique.Manager.NetworkManagerServerUtility.LiteNetInit
  - Funique.Manager.NetworkManagerServerUtility.ModifyWatchDog(System.String,System.String,System.String)
  - Funique.Manager.NetworkManagerServerUtility.ModifyWatchDog(System.String,System.String,System.String,System.Int32)
  - Funique.Manager.NetworkManagerServerUtility.NetPeerDict
  - Funique.Manager.NetworkManagerServerUtility.OnConnected
  - Funique.Manager.NetworkManagerServerUtility.OnConnectionRequest(LiteNetLib.ConnectionRequest)
  - Funique.Manager.NetworkManagerServerUtility.OnDisconnected
  - Funique.Manager.NetworkManagerServerUtility.OnError
  - Funique.Manager.NetworkManagerServerUtility.OnLatency
  - Funique.Manager.NetworkManagerServerUtility.OnNetworkError(System.Net.IPEndPoint,System.Net.Sockets.SocketError)
  - Funique.Manager.NetworkManagerServerUtility.OnNetworkLatencyUpdate(LiteNetLib.NetPeer,System.Int32)
  - Funique.Manager.NetworkManagerServerUtility.OnNetworkReceive(LiteNetLib.NetPeer,LiteNetLib.NetPacketReader,LiteNetLib.DeliveryMethod)
  - Funique.Manager.NetworkManagerServerUtility.OnNetworkReceiveUnconnected(System.Net.IPEndPoint,LiteNetLib.NetPacketReader,LiteNetLib.UnconnectedMessageType)
  - Funique.Manager.NetworkManagerServerUtility.OnPeerConnected(LiteNetLib.NetPeer)
  - Funique.Manager.NetworkManagerServerUtility.OnPeerDisconnected(LiteNetLib.NetPeer,LiteNetLib.DisconnectInfo)
  - Funique.Manager.NetworkManagerServerUtility.OnReceived
  - Funique.Manager.NetworkManagerServerUtility.OSC
  - Funique.Manager.NetworkManagerServerUtility.OSCDict
  - Funique.Manager.NetworkManagerServerUtility.PlayerInfomationDict
  - Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation(System.String,System.String[])
  - Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation(System.String,System.String[],System.Boolean)
  - Funique.Manager.NetworkManagerServerUtility.RemoveWatchDog(System.String)
  - Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs(System.Collections.Generic.List{System.String},System.String)
  - Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs(System.String[],System.String)
  - Funique.Manager.NetworkManagerServerUtility.SendToAllDogs(System.String)
  - Funique.Manager.NetworkManagerServerUtility.SendWatchDog(System.String,System.String)
  - Funique.Manager.NetworkManagerServerUtility.Server
  - Funique.Manager.NetworkManagerServerUtility.SleepCall(System.String)
  - Funique.Manager.NetworkManagerServerUtility.UIDict
  - Funique.Manager.NetworkManagerServerUtility.UpdateVolume(System.String)
  - Funique.Manager.NetworkManagerServerUtility.WakeupCall(System.String)
  - Funique.Manager.NetworkManagerServerUtility.WatchDogInit
  langs:
  - csharp
  - vb
  name: NetworkManagerServerUtility
  nameWithType: NetworkManagerServerUtility
  fullName: Funique.Manager.NetworkManagerServerUtility
  type: Class
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: NetworkManagerServerUtility
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 21
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  summary: "\nNetwork utility base class <br />\nHandle multiple third-party library including OSC, LiteNetLib, NetCoreSocket <br />\nThe collection of solution for server side utility <br />\n------------------------------------------------ <br />\n網路元件基礎類 <br />\n處理多種第三方程式庫 包括了 OSC, LiteNetLib, NetCoreSocket <br />\n多項網路方案的集合類別\n"
  example: []
  syntax:
    content: 'public class NetworkManagerServerUtility : ManagerBase<NetworkManagerData>, IDisposable, INetEventListener, INetworkServerUtility, INetworkEvent, INetworkOSC'
    content.vb: >-
      Public Class NetworkManagerServerUtility

          Inherits ManagerBase(Of NetworkManagerData)

          Implements IDisposable, INetEventListener, INetworkServerUtility, INetworkEvent, INetworkOSC
  inheritance:
  - System.Object
  - Funique.Manager.ManagerBase
  - Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}
  implements:
  - System.IDisposable
  - LiteNetLib.INetEventListener
  - Funique.Network.INetworkServerUtility
  - Funique.Network.INetworkEvent
  - Funique.Network.INetworkOSC
  inheritedMembers:
  - Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}.config
  - Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}.RegisterConfig(Funique.Network.NetworkManagerData)
  - Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}.Loaded(Funique.Network.NetworkManagerData)
  - Funique.Manager.ManagerBase.Shutdown
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Funique.Manager.NetworkManagerServerUtility._dataWriter
  commentId: F:Funique.Manager.NetworkManagerServerUtility._dataWriter
  id: _dataWriter
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: _dataWriter
  nameWithType: NetworkManagerServerUtility._dataWriter
  fullName: Funique.Manager.NetworkManagerServerUtility._dataWriter
  type: Field
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: _dataWriter
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 30
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  summary: "\nData writer instance <br />\n------------------------------------------------ <br />\n資料寫入實體\n"
  example: []
  syntax:
    content: protected NetDataWriter _dataWriter
    return:
      type: LiteNetLib.Utils.NetDataWriter
    content.vb: Protected _dataWriter As NetDataWriter
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Funique.Manager.NetworkManagerServerUtility.Server
  commentId: P:Funique.Manager.NetworkManagerServerUtility.Server
  id: Server
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: Server
  nameWithType: NetworkManagerServerUtility.Server
  fullName: Funique.Manager.NetworkManagerServerUtility.Server
  type: Property
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: Server
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 36
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public NetManager Server { get; }
    parameters: []
    return:
      type: LiteNetLib.NetManager
    content.vb: Public ReadOnly Property Server As NetManager
  overload: Funique.Manager.NetworkManagerServerUtility.Server*
  implements:
  - Funique.Network.INetworkServerUtility.Server
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Funique.Manager.NetworkManagerServerUtility.NetPeerDict
  commentId: P:Funique.Manager.NetworkManagerServerUtility.NetPeerDict
  id: NetPeerDict
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: NetPeerDict
  nameWithType: NetworkManagerServerUtility.NetPeerDict
  fullName: Funique.Manager.NetworkManagerServerUtility.NetPeerDict
  type: Property
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: NetPeerDict
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 37
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public Dictionary<string, NetPeer> NetPeerDict { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,LiteNetLib.NetPeer}
    content.vb: Public ReadOnly Property NetPeerDict As Dictionary(Of String, NetPeer)
  overload: Funique.Manager.NetworkManagerServerUtility.NetPeerDict*
  implements:
  - Funique.Network.INetworkServerUtility.NetPeerDict
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Funique.Manager.NetworkManagerServerUtility.PlayerInfomationDict
  commentId: P:Funique.Manager.NetworkManagerServerUtility.PlayerInfomationDict
  id: PlayerInfomationDict
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: PlayerInfomationDict
  nameWithType: NetworkManagerServerUtility.PlayerInfomationDict
  fullName: Funique.Manager.NetworkManagerServerUtility.PlayerInfomationDict
  type: Property
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: PlayerInfomationDict
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 38
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public Dictionary<string, PlayerInformation> PlayerInfomationDict { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Funique.PlayerInformation}
    content.vb: Public ReadOnly Property PlayerInfomationDict As Dictionary(Of String, PlayerInformation)
  overload: Funique.Manager.NetworkManagerServerUtility.PlayerInfomationDict*
  implements:
  - Funique.Network.INetworkServerUtility.PlayerInfomationDict
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Funique.Manager.NetworkManagerServerUtility.UIDict
  commentId: P:Funique.Manager.NetworkManagerServerUtility.UIDict
  id: UIDict
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: UIDict
  nameWithType: NetworkManagerServerUtility.UIDict
  fullName: Funique.Manager.NetworkManagerServerUtility.UIDict
  type: Property
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: UIDict
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 39
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public Dictionary<string, GameObject> UIDict { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,UnityEngine.GameObject}
    content.vb: Public ReadOnly Property UIDict As Dictionary(Of String, GameObject)
  overload: Funique.Manager.NetworkManagerServerUtility.UIDict*
  implements:
  - Funique.Network.INetworkServerUtility.UIDict
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Funique.Manager.NetworkManagerServerUtility.OSC
  commentId: P:Funique.Manager.NetworkManagerServerUtility.OSC
  id: OSC
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OSC
  nameWithType: NetworkManagerServerUtility.OSC
  fullName: Funique.Manager.NetworkManagerServerUtility.OSC
  type: Property
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OSC
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 45
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  summary: "\nOSC Instance <br />\n------------------------------------------------ <br />\nUnit OSC 實體\n"
  example: []
  syntax:
    content: protected OSCHandler OSC { get; }
    parameters: []
    return:
      type: OSCHandler
    content.vb: Protected ReadOnly Property OSC As OSCHandler
  overload: Funique.Manager.NetworkManagerServerUtility.OSC*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Funique.Manager.NetworkManagerServerUtility.OSCDict
  commentId: P:Funique.Manager.NetworkManagerServerUtility.OSCDict
  id: OSCDict
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OSCDict
  nameWithType: NetworkManagerServerUtility.OSCDict
  fullName: Funique.Manager.NetworkManagerServerUtility.OSCDict
  type: Property
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OSCDict
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 46
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public Dictionary<string, string> OSCDict { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public ReadOnly Property OSCDict As Dictionary(Of String, String)
  overload: Funique.Manager.NetworkManagerServerUtility.OSCDict*
  implements:
  - Funique.Network.INetworkOSC.OSCDict
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Funique.Manager.NetworkManagerServerUtility.OnConnected
  commentId: E:Funique.Manager.NetworkManagerServerUtility.OnConnected
  id: OnConnected
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OnConnected
  nameWithType: NetworkManagerServerUtility.OnConnected
  fullName: Funique.Manager.NetworkManagerServerUtility.OnConnected
  type: Event
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OnConnected
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 58
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public event EventHandler<PeerEventArgs> OnConnected
    return:
      type: System.EventHandler{Funique.Network.PeerEventArgs}
    content.vb: Public Event OnConnected As EventHandler(Of PeerEventArgs)
  implements:
  - Funique.Network.INetworkEvent.OnConnected
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.OnDisconnected
  commentId: E:Funique.Manager.NetworkManagerServerUtility.OnDisconnected
  id: OnDisconnected
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OnDisconnected
  nameWithType: NetworkManagerServerUtility.OnDisconnected
  fullName: Funique.Manager.NetworkManagerServerUtility.OnDisconnected
  type: Event
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OnDisconnected
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 59
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public event EventHandler<DisconnectEventArgs> OnDisconnected
    return:
      type: System.EventHandler{Funique.Network.DisconnectEventArgs}
    content.vb: Public Event OnDisconnected As EventHandler(Of DisconnectEventArgs)
  implements:
  - Funique.Network.INetworkEvent.OnDisconnected
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.OnLatency
  commentId: E:Funique.Manager.NetworkManagerServerUtility.OnLatency
  id: OnLatency
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OnLatency
  nameWithType: NetworkManagerServerUtility.OnLatency
  fullName: Funique.Manager.NetworkManagerServerUtility.OnLatency
  type: Event
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OnLatency
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 60
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public event EventHandler<LatencyEventArgs> OnLatency
    return:
      type: System.EventHandler{Funique.Network.LatencyEventArgs}
    content.vb: Public Event OnLatency As EventHandler(Of LatencyEventArgs)
  implements:
  - Funique.Network.INetworkEvent.OnLatency
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.OnError
  commentId: E:Funique.Manager.NetworkManagerServerUtility.OnError
  id: OnError
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OnError
  nameWithType: NetworkManagerServerUtility.OnError
  fullName: Funique.Manager.NetworkManagerServerUtility.OnError
  type: Event
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OnError
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 61
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public event EventHandler<ErrorEventArgs> OnError
    return:
      type: System.EventHandler{Funique.Network.ErrorEventArgs}
    content.vb: Public Event OnError As EventHandler(Of ErrorEventArgs)
  implements:
  - Funique.Network.INetworkEvent.OnError
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.OnReceived
  commentId: E:Funique.Manager.NetworkManagerServerUtility.OnReceived
  id: OnReceived
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OnReceived
  nameWithType: NetworkManagerServerUtility.OnReceived
  fullName: Funique.Manager.NetworkManagerServerUtility.OnReceived
  type: Event
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OnReceived
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 62
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public event EventHandler<ReceivedEventArgs> OnReceived
    return:
      type: System.EventHandler{Funique.Network.ReceivedEventArgs}
    content.vb: Public Event OnReceived As EventHandler(Of ReceivedEventArgs)
  implements:
  - Funique.Network.INetworkEvent.OnReceived
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.Initialization
  commentId: M:Funique.Manager.NetworkManagerServerUtility.Initialization
  id: Initialization
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: Initialization()
  nameWithType: NetworkManagerServerUtility.Initialization()
  fullName: Funique.Manager.NetworkManagerServerUtility.Initialization()
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: Initialization
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 68
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public override void Initialization()
    content.vb: Public Overrides Sub Initialization
  overridden: Funique.Manager.ManagerBase.Initialization
  overload: Funique.Manager.NetworkManagerServerUtility.Initialization*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Funique.Manager.NetworkManagerServerUtility.FrameUpdate
  commentId: M:Funique.Manager.NetworkManagerServerUtility.FrameUpdate
  id: FrameUpdate
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: FrameUpdate()
  nameWithType: NetworkManagerServerUtility.FrameUpdate()
  fullName: Funique.Manager.NetworkManagerServerUtility.FrameUpdate()
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: FrameUpdate
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 73
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public override void FrameUpdate()
    content.vb: Public Overrides Sub FrameUpdate
  overridden: Funique.Manager.ManagerBase.FrameUpdate
  overload: Funique.Manager.NetworkManagerServerUtility.FrameUpdate*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Funique.Manager.NetworkManagerServerUtility.Dispose
  commentId: M:Funique.Manager.NetworkManagerServerUtility.Dispose
  id: Dispose
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: NetworkManagerServerUtility.Dispose()
  fullName: Funique.Manager.NetworkManagerServerUtility.Dispose()
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: Dispose
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 77
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public override void Dispose()
    content.vb: Public Overrides Sub Dispose
  overridden: Funique.Manager.ManagerBase.Dispose
  overload: Funique.Manager.NetworkManagerServerUtility.Dispose*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Funique.Manager.NetworkManagerServerUtility.OnPeerConnected(LiteNetLib.NetPeer)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.OnPeerConnected(LiteNetLib.NetPeer)
  id: OnPeerConnected(LiteNetLib.NetPeer)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OnPeerConnected(NetPeer)
  nameWithType: NetworkManagerServerUtility.OnPeerConnected(NetPeer)
  fullName: Funique.Manager.NetworkManagerServerUtility.OnPeerConnected(LiteNetLib.NetPeer)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OnPeerConnected
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 91
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public virtual void OnPeerConnected(NetPeer peer)
    parameters:
    - id: peer
      type: LiteNetLib.NetPeer
    content.vb: Public Overridable Sub OnPeerConnected(peer As NetPeer)
  overload: Funique.Manager.NetworkManagerServerUtility.OnPeerConnected*
  implements:
  - LiteNetLib.INetEventListener.OnPeerConnected(LiteNetLib.NetPeer)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Funique.Manager.NetworkManagerServerUtility.OnPeerDisconnected(LiteNetLib.NetPeer,LiteNetLib.DisconnectInfo)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.OnPeerDisconnected(LiteNetLib.NetPeer,LiteNetLib.DisconnectInfo)
  id: OnPeerDisconnected(LiteNetLib.NetPeer,LiteNetLib.DisconnectInfo)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OnPeerDisconnected(NetPeer, DisconnectInfo)
  nameWithType: NetworkManagerServerUtility.OnPeerDisconnected(NetPeer, DisconnectInfo)
  fullName: Funique.Manager.NetworkManagerServerUtility.OnPeerDisconnected(LiteNetLib.NetPeer, LiteNetLib.DisconnectInfo)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OnPeerDisconnected
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 96
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public virtual void OnPeerDisconnected(NetPeer peer, DisconnectInfo disconnectInfo)
    parameters:
    - id: peer
      type: LiteNetLib.NetPeer
    - id: disconnectInfo
      type: LiteNetLib.DisconnectInfo
    content.vb: Public Overridable Sub OnPeerDisconnected(peer As NetPeer, disconnectInfo As DisconnectInfo)
  overload: Funique.Manager.NetworkManagerServerUtility.OnPeerDisconnected*
  implements:
  - LiteNetLib.INetEventListener.OnPeerDisconnected(LiteNetLib.NetPeer,LiteNetLib.DisconnectInfo)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Funique.Manager.NetworkManagerServerUtility.OnNetworkError(System.Net.IPEndPoint,System.Net.Sockets.SocketError)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.OnNetworkError(System.Net.IPEndPoint,System.Net.Sockets.SocketError)
  id: OnNetworkError(System.Net.IPEndPoint,System.Net.Sockets.SocketError)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OnNetworkError(IPEndPoint, SocketError)
  nameWithType: NetworkManagerServerUtility.OnNetworkError(IPEndPoint, SocketError)
  fullName: Funique.Manager.NetworkManagerServerUtility.OnNetworkError(System.Net.IPEndPoint, System.Net.Sockets.SocketError)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OnNetworkError
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 101
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public virtual void OnNetworkError(IPEndPoint endPoint, SocketError socketError)
    parameters:
    - id: endPoint
      type: System.Net.IPEndPoint
    - id: socketError
      type: System.Net.Sockets.SocketError
    content.vb: Public Overridable Sub OnNetworkError(endPoint As IPEndPoint, socketError As SocketError)
  overload: Funique.Manager.NetworkManagerServerUtility.OnNetworkError*
  implements:
  - LiteNetLib.INetEventListener.OnNetworkError(System.Net.IPEndPoint,System.Net.Sockets.SocketError)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Funique.Manager.NetworkManagerServerUtility.OnNetworkReceive(LiteNetLib.NetPeer,LiteNetLib.NetPacketReader,LiteNetLib.DeliveryMethod)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.OnNetworkReceive(LiteNetLib.NetPeer,LiteNetLib.NetPacketReader,LiteNetLib.DeliveryMethod)
  id: OnNetworkReceive(LiteNetLib.NetPeer,LiteNetLib.NetPacketReader,LiteNetLib.DeliveryMethod)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OnNetworkReceive(NetPeer, NetPacketReader, DeliveryMethod)
  nameWithType: NetworkManagerServerUtility.OnNetworkReceive(NetPeer, NetPacketReader, DeliveryMethod)
  fullName: Funique.Manager.NetworkManagerServerUtility.OnNetworkReceive(LiteNetLib.NetPeer, LiteNetLib.NetPacketReader, LiteNetLib.DeliveryMethod)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OnNetworkReceive
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 106
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public virtual void OnNetworkReceive(NetPeer peer, NetPacketReader reader, DeliveryMethod deliveryMethod)
    parameters:
    - id: peer
      type: LiteNetLib.NetPeer
    - id: reader
      type: LiteNetLib.NetPacketReader
    - id: deliveryMethod
      type: LiteNetLib.DeliveryMethod
    content.vb: Public Overridable Sub OnNetworkReceive(peer As NetPeer, reader As NetPacketReader, deliveryMethod As DeliveryMethod)
  overload: Funique.Manager.NetworkManagerServerUtility.OnNetworkReceive*
  implements:
  - LiteNetLib.INetEventListener.OnNetworkReceive(LiteNetLib.NetPeer,LiteNetLib.NetPacketReader,LiteNetLib.DeliveryMethod)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Funique.Manager.NetworkManagerServerUtility.OnNetworkReceiveUnconnected(System.Net.IPEndPoint,LiteNetLib.NetPacketReader,LiteNetLib.UnconnectedMessageType)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.OnNetworkReceiveUnconnected(System.Net.IPEndPoint,LiteNetLib.NetPacketReader,LiteNetLib.UnconnectedMessageType)
  id: OnNetworkReceiveUnconnected(System.Net.IPEndPoint,LiteNetLib.NetPacketReader,LiteNetLib.UnconnectedMessageType)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OnNetworkReceiveUnconnected(IPEndPoint, NetPacketReader, UnconnectedMessageType)
  nameWithType: NetworkManagerServerUtility.OnNetworkReceiveUnconnected(IPEndPoint, NetPacketReader, UnconnectedMessageType)
  fullName: Funique.Manager.NetworkManagerServerUtility.OnNetworkReceiveUnconnected(System.Net.IPEndPoint, LiteNetLib.NetPacketReader, LiteNetLib.UnconnectedMessageType)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OnNetworkReceiveUnconnected
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 110
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public virtual void OnNetworkReceiveUnconnected(IPEndPoint remoteEndPoint, NetPacketReader reader, UnconnectedMessageType messageType)
    parameters:
    - id: remoteEndPoint
      type: System.Net.IPEndPoint
    - id: reader
      type: LiteNetLib.NetPacketReader
    - id: messageType
      type: LiteNetLib.UnconnectedMessageType
    content.vb: Public Overridable Sub OnNetworkReceiveUnconnected(remoteEndPoint As IPEndPoint, reader As NetPacketReader, messageType As UnconnectedMessageType)
  overload: Funique.Manager.NetworkManagerServerUtility.OnNetworkReceiveUnconnected*
  implements:
  - LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected(System.Net.IPEndPoint,LiteNetLib.NetPacketReader,LiteNetLib.UnconnectedMessageType)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Funique.Manager.NetworkManagerServerUtility.OnNetworkLatencyUpdate(LiteNetLib.NetPeer,System.Int32)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.OnNetworkLatencyUpdate(LiteNetLib.NetPeer,System.Int32)
  id: OnNetworkLatencyUpdate(LiteNetLib.NetPeer,System.Int32)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OnNetworkLatencyUpdate(NetPeer, Int32)
  nameWithType: NetworkManagerServerUtility.OnNetworkLatencyUpdate(NetPeer, Int32)
  fullName: Funique.Manager.NetworkManagerServerUtility.OnNetworkLatencyUpdate(LiteNetLib.NetPeer, System.Int32)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OnNetworkLatencyUpdate
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 114
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public virtual void OnNetworkLatencyUpdate(NetPeer peer, int latency)
    parameters:
    - id: peer
      type: LiteNetLib.NetPeer
    - id: latency
      type: System.Int32
    content.vb: Public Overridable Sub OnNetworkLatencyUpdate(peer As NetPeer, latency As Integer)
  overload: Funique.Manager.NetworkManagerServerUtility.OnNetworkLatencyUpdate*
  implements:
  - LiteNetLib.INetEventListener.OnNetworkLatencyUpdate(LiteNetLib.NetPeer,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Funique.Manager.NetworkManagerServerUtility.OnConnectionRequest(LiteNetLib.ConnectionRequest)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.OnConnectionRequest(LiteNetLib.ConnectionRequest)
  id: OnConnectionRequest(LiteNetLib.ConnectionRequest)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: OnConnectionRequest(ConnectionRequest)
  nameWithType: NetworkManagerServerUtility.OnConnectionRequest(ConnectionRequest)
  fullName: Funique.Manager.NetworkManagerServerUtility.OnConnectionRequest(LiteNetLib.ConnectionRequest)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: OnConnectionRequest
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 118
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public virtual void OnConnectionRequest(ConnectionRequest request)
    parameters:
    - id: request
      type: LiteNetLib.ConnectionRequest
    content.vb: Public Overridable Sub OnConnectionRequest(request As ConnectionRequest)
  overload: Funique.Manager.NetworkManagerServerUtility.OnConnectionRequest*
  implements:
  - LiteNetLib.INetEventListener.OnConnectionRequest(LiteNetLib.ConnectionRequest)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Funique.Manager.NetworkManagerServerUtility.LiteNetInit
  commentId: M:Funique.Manager.NetworkManagerServerUtility.LiteNetInit
  id: LiteNetInit
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: LiteNetInit()
  nameWithType: NetworkManagerServerUtility.LiteNetInit()
  fullName: Funique.Manager.NetworkManagerServerUtility.LiteNetInit()
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: LiteNetInit
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 133
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  summary: "\nNetwork instance intialization <br />\n------------------------------------------------ <br />\n初始化伺服器\n"
  example: []
  syntax:
    content: protected void LiteNetInit()
    content.vb: Protected Sub LiteNetInit
  overload: Funique.Manager.NetworkManagerServerUtility.LiteNetInit*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Funique.Manager.NetworkManagerServerUtility.CreatePlayerInformation(System.String,System.Int32)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.CreatePlayerInformation(System.String,System.Int32)
  id: CreatePlayerInformation(System.String,System.Int32)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: CreatePlayerInformation(String, Int32)
  nameWithType: NetworkManagerServerUtility.CreatePlayerInformation(String, Int32)
  fullName: Funique.Manager.NetworkManagerServerUtility.CreatePlayerInformation(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: CreatePlayerInformation
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 143
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public PlayerInformation CreatePlayerInformation(string address, int port)
    parameters:
    - id: address
      type: System.String
    - id: port
      type: System.Int32
    return:
      type: Funique.PlayerInformation
    content.vb: Public Function CreatePlayerInformation(address As String, port As Integer) As PlayerInformation
  overload: Funique.Manager.NetworkManagerServerUtility.CreatePlayerInformation*
  implements:
  - Funique.Network.INetworkServerUtility.CreatePlayerInformation(System.String,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.WakeupCall(System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.WakeupCall(System.String)
  id: WakeupCall(System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: WakeupCall(String)
  nameWithType: NetworkManagerServerUtility.WakeupCall(String)
  fullName: Funique.Manager.NetworkManagerServerUtility.WakeupCall(System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: WakeupCall
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 152
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public void WakeupCall(string address)
    parameters:
    - id: address
      type: System.String
    content.vb: Public Sub WakeupCall(address As String)
  overload: Funique.Manager.NetworkManagerServerUtility.WakeupCall*
  implements:
  - Funique.Network.INetworkServerUtility.WakeupCall(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.SleepCall(System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.SleepCall(System.String)
  id: SleepCall(System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: SleepCall(String)
  nameWithType: NetworkManagerServerUtility.SleepCall(String)
  fullName: Funique.Manager.NetworkManagerServerUtility.SleepCall(System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: SleepCall
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 158
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public void SleepCall(string address)
    parameters:
    - id: address
      type: System.String
    content.vb: Public Sub SleepCall(address As String)
  overload: Funique.Manager.NetworkManagerServerUtility.SleepCall*
  implements:
  - Funique.Network.INetworkServerUtility.SleepCall(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation(System.String,System.String[])
  commentId: M:Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation(System.String,System.String[])
  id: ReceivedUpdateInformation(System.String,System.String[])
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: ReceivedUpdateInformation(String, String[])
  nameWithType: NetworkManagerServerUtility.ReceivedUpdateInformation(String, String[])
  fullName: Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation(System.String, System.String[])
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: ReceivedUpdateInformation
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 170
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public void ReceivedUpdateInformation(string address, string[] context)
    parameters:
    - id: address
      type: System.String
    - id: context
      type: System.String[]
    content.vb: Public Sub ReceivedUpdateInformation(address As String, context As String())
  overload: Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation*
  implements:
  - Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String,System.String[])
  nameWithType.vb: NetworkManagerServerUtility.ReceivedUpdateInformation(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation(System.String, System.String())
  name.vb: ReceivedUpdateInformation(String, String())
- uid: Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation(System.String,System.String[],System.Boolean)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation(System.String,System.String[],System.Boolean)
  id: ReceivedUpdateInformation(System.String,System.String[],System.Boolean)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: ReceivedUpdateInformation(String, String[], Boolean)
  nameWithType: NetworkManagerServerUtility.ReceivedUpdateInformation(String, String[], Boolean)
  fullName: Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation(System.String, System.String[], System.Boolean)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: ReceivedUpdateInformation
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 174
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public void ReceivedUpdateInformation(string address, string[] context, bool infoonly)
    parameters:
    - id: address
      type: System.String
    - id: context
      type: System.String[]
    - id: infoonly
      type: System.Boolean
    content.vb: Public Sub ReceivedUpdateInformation(address As String, context As String(), infoonly As Boolean)
  overload: Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation*
  implements:
  - Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String,System.String[],System.Boolean)
  nameWithType.vb: NetworkManagerServerUtility.ReceivedUpdateInformation(String, String(), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation(System.String, System.String(), System.Boolean)
  name.vb: ReceivedUpdateInformation(String, String(), Boolean)
- uid: Funique.Manager.NetworkManagerServerUtility.AnalysisUpdateInformation(Funique.PlayerInformation,System.String[],System.Int32)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.AnalysisUpdateInformation(Funique.PlayerInformation,System.String[],System.Int32)
  id: AnalysisUpdateInformation(Funique.PlayerInformation,System.String[],System.Int32)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: AnalysisUpdateInformation(PlayerInformation, String[], Int32)
  nameWithType: NetworkManagerServerUtility.AnalysisUpdateInformation(PlayerInformation, String[], Int32)
  fullName: Funique.Manager.NetworkManagerServerUtility.AnalysisUpdateInformation(Funique.PlayerInformation, System.String[], System.Int32)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: AnalysisUpdateInformation
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 182
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public virtual PlayerInformation AnalysisUpdateInformation(PlayerInformation info, string[] context, int i)
    parameters:
    - id: info
      type: Funique.PlayerInformation
    - id: context
      type: System.String[]
    - id: i
      type: System.Int32
    return:
      type: Funique.PlayerInformation
    content.vb: Public Overridable Function AnalysisUpdateInformation(info As PlayerInformation, context As String(), i As Integer) As PlayerInformation
  overload: Funique.Manager.NetworkManagerServerUtility.AnalysisUpdateInformation*
  nameWithType.vb: NetworkManagerServerUtility.AnalysisUpdateInformation(PlayerInformation, String(), Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Funique.Manager.NetworkManagerServerUtility.AnalysisUpdateInformation(Funique.PlayerInformation, System.String(), System.Int32)
  name.vb: AnalysisUpdateInformation(PlayerInformation, String(), Int32)
- uid: Funique.Manager.NetworkManagerServerUtility.CleanPlayer
  commentId: M:Funique.Manager.NetworkManagerServerUtility.CleanPlayer
  id: CleanPlayer
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: CleanPlayer()
  nameWithType: NetworkManagerServerUtility.CleanPlayer()
  fullName: Funique.Manager.NetworkManagerServerUtility.CleanPlayer()
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: CleanPlayer
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 183
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public void CleanPlayer()
    content.vb: Public Sub CleanPlayer
  overload: Funique.Manager.NetworkManagerServerUtility.CleanPlayer*
  implements:
  - Funique.Network.INetworkServerUtility.CleanPlayer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.IsNewWatchdog(System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.IsNewWatchdog(System.String)
  id: IsNewWatchdog(System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: IsNewWatchdog(String)
  nameWithType: NetworkManagerServerUtility.IsNewWatchdog(String)
  fullName: Funique.Manager.NetworkManagerServerUtility.IsNewWatchdog(System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: IsNewWatchdog
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 209
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public bool IsNewWatchdog(string address)
    parameters:
    - id: address
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function IsNewWatchdog(address As String) As Boolean
  overload: Funique.Manager.NetworkManagerServerUtility.IsNewWatchdog*
  implements:
  - Funique.Network.INetworkServerUtility.IsNewWatchdog(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.IsNewAddress(System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.IsNewAddress(System.String)
  id: IsNewAddress(System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: IsNewAddress(String)
  nameWithType: NetworkManagerServerUtility.IsNewAddress(String)
  fullName: Funique.Manager.NetworkManagerServerUtility.IsNewAddress(System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: IsNewAddress
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 210
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public bool IsNewAddress(string address)
    parameters:
    - id: address
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function IsNewAddress(address As String) As Boolean
  overload: Funique.Manager.NetworkManagerServerUtility.IsNewAddress*
  implements:
  - Funique.Network.INetworkServerUtility.IsNewAddress(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.IsNewPeer(System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.IsNewPeer(System.String)
  id: IsNewPeer(System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: IsNewPeer(String)
  nameWithType: NetworkManagerServerUtility.IsNewPeer(String)
  fullName: Funique.Manager.NetworkManagerServerUtility.IsNewPeer(System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: IsNewPeer
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 211
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public bool IsNewPeer(string address)
    parameters:
    - id: address
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function IsNewPeer(address As String) As Boolean
  overload: Funique.Manager.NetworkManagerServerUtility.IsNewPeer*
  implements:
  - Funique.Network.INetworkServerUtility.IsNewPeer(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.IsPeerVaild(System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.IsPeerVaild(System.String)
  id: IsPeerVaild(System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: IsPeerVaild(String)
  nameWithType: NetworkManagerServerUtility.IsPeerVaild(String)
  fullName: Funique.Manager.NetworkManagerServerUtility.IsPeerVaild(System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: IsPeerVaild
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 212
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public bool IsPeerVaild(string address)
    parameters:
    - id: address
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function IsPeerVaild(address As String) As Boolean
  overload: Funique.Manager.NetworkManagerServerUtility.IsPeerVaild*
  implements:
  - Funique.Network.INetworkServerUtility.IsPeerVaild(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.GetUIBinding(System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.GetUIBinding(System.String)
  id: GetUIBinding(System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: GetUIBinding(String)
  nameWithType: NetworkManagerServerUtility.GetUIBinding(String)
  fullName: Funique.Manager.NetworkManagerServerUtility.GetUIBinding(System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: GetUIBinding
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 213
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public GameObject GetUIBinding(string address)
    parameters:
    - id: address
      type: System.String
    return:
      type: UnityEngine.GameObject
    content.vb: Public Function GetUIBinding(address As String) As GameObject
  overload: Funique.Manager.NetworkManagerServerUtility.GetUIBinding*
  implements:
  - Funique.Network.INetworkServerUtility.GetUIBinding(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.UpdateVolume(System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.UpdateVolume(System.String)
  id: UpdateVolume(System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: UpdateVolume(String)
  nameWithType: NetworkManagerServerUtility.UpdateVolume(String)
  fullName: Funique.Manager.NetworkManagerServerUtility.UpdateVolume(System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: UpdateVolume
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 214
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public virtual void UpdateVolume(string address)
    parameters:
    - id: address
      type: System.String
    content.vb: Public Overridable Sub UpdateVolume(address As String)
  overload: Funique.Manager.NetworkManagerServerUtility.UpdateVolume*
  implements:
  - Funique.Network.INetworkServerUtility.UpdateVolume(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Funique.Manager.NetworkManagerServerUtility.WatchDogInit
  commentId: M:Funique.Manager.NetworkManagerServerUtility.WatchDogInit
  id: WatchDogInit
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: WatchDogInit()
  nameWithType: NetworkManagerServerUtility.WatchDogInit()
  fullName: Funique.Manager.NetworkManagerServerUtility.WatchDogInit()
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: WatchDogInit
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 227
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public void WatchDogInit()
    content.vb: Public Sub WatchDogInit
  overload: Funique.Manager.NetworkManagerServerUtility.WatchDogInit*
  implements:
  - Funique.Network.INetworkOSC.WatchDogInit
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.CreateWatchDog(System.String,System.String,System.Int32)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.CreateWatchDog(System.String,System.String,System.Int32)
  id: CreateWatchDog(System.String,System.String,System.Int32)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: CreateWatchDog(String, String, Int32)
  nameWithType: NetworkManagerServerUtility.CreateWatchDog(String, String, Int32)
  fullName: Funique.Manager.NetworkManagerServerUtility.CreateWatchDog(System.String, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: CreateWatchDog
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 232
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public void CreateWatchDog(string name, string ip, int port = 6500)
    parameters:
    - id: name
      type: System.String
    - id: ip
      type: System.String
    - id: port
      type: System.Int32
    content.vb: Public Sub CreateWatchDog(name As String, ip As String, port As Integer = 6500)
  overload: Funique.Manager.NetworkManagerServerUtility.CreateWatchDog*
  implements:
  - Funique.Network.INetworkOSC.CreateWatchDog(System.String,System.String,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.ModifyWatchDog(System.String,System.String,System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.ModifyWatchDog(System.String,System.String,System.String)
  id: ModifyWatchDog(System.String,System.String,System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: ModifyWatchDog(String, String, String)
  nameWithType: NetworkManagerServerUtility.ModifyWatchDog(String, String, String)
  fullName: Funique.Manager.NetworkManagerServerUtility.ModifyWatchDog(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: ModifyWatchDog
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 240
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public bool ModifyWatchDog(string name, string old_ip, string new_ip)
    parameters:
    - id: name
      type: System.String
    - id: old_ip
      type: System.String
    - id: new_ip
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function ModifyWatchDog(name As String, old_ip As String, new_ip As String) As Boolean
  overload: Funique.Manager.NetworkManagerServerUtility.ModifyWatchDog*
  implements:
  - Funique.Network.INetworkOSC.ModifyWatchDog(System.String,System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.ModifyWatchDog(System.String,System.String,System.String,System.Int32)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.ModifyWatchDog(System.String,System.String,System.String,System.Int32)
  id: ModifyWatchDog(System.String,System.String,System.String,System.Int32)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: ModifyWatchDog(String, String, String, Int32)
  nameWithType: NetworkManagerServerUtility.ModifyWatchDog(String, String, String, Int32)
  fullName: Funique.Manager.NetworkManagerServerUtility.ModifyWatchDog(System.String, System.String, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: ModifyWatchDog
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 252
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public bool ModifyWatchDog(string name, string old_ip, string new_ip, int new_port)
    parameters:
    - id: name
      type: System.String
    - id: old_ip
      type: System.String
    - id: new_ip
      type: System.String
    - id: new_port
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function ModifyWatchDog(name As String, old_ip As String, new_ip As String, new_port As Integer) As Boolean
  overload: Funique.Manager.NetworkManagerServerUtility.ModifyWatchDog*
  implements:
  - Funique.Network.INetworkOSC.ModifyWatchDog(System.String,System.String,System.String,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.RemoveWatchDog(System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.RemoveWatchDog(System.String)
  id: RemoveWatchDog(System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: RemoveWatchDog(String)
  nameWithType: NetworkManagerServerUtility.RemoveWatchDog(String)
  fullName: Funique.Manager.NetworkManagerServerUtility.RemoveWatchDog(System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: RemoveWatchDog
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 261
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public bool RemoveWatchDog(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function RemoveWatchDog(name As String) As Boolean
  overload: Funique.Manager.NetworkManagerServerUtility.RemoveWatchDog*
  implements:
  - Funique.Network.INetworkOSC.RemoveWatchDog(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.CleanWatchDog
  commentId: M:Funique.Manager.NetworkManagerServerUtility.CleanWatchDog
  id: CleanWatchDog
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: CleanWatchDog()
  nameWithType: NetworkManagerServerUtility.CleanWatchDog()
  fullName: Funique.Manager.NetworkManagerServerUtility.CleanWatchDog()
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: CleanWatchDog
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 271
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public void CleanWatchDog()
    content.vb: Public Sub CleanWatchDog
  overload: Funique.Manager.NetworkManagerServerUtility.CleanWatchDog*
  implements:
  - Funique.Network.INetworkOSC.CleanWatchDog
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs(System.String[],System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs(System.String[],System.String)
  id: SendMsgToPlayerDogs(System.String[],System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: SendMsgToPlayerDogs(String[], String)
  nameWithType: NetworkManagerServerUtility.SendMsgToPlayerDogs(String[], String)
  fullName: Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs(System.String[], System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: SendMsgToPlayerDogs
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 272
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public void SendMsgToPlayerDogs(string[] playerIPList, string context)
    parameters:
    - id: playerIPList
      type: System.String[]
    - id: context
      type: System.String
    content.vb: Public Sub SendMsgToPlayerDogs(playerIPList As String(), context As String)
  overload: Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs*
  implements:
  - Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.String[],System.String)
  nameWithType.vb: NetworkManagerServerUtility.SendMsgToPlayerDogs(String(), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs(System.String(), System.String)
  name.vb: SendMsgToPlayerDogs(String(), String)
- uid: Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs(System.Collections.Generic.List{System.String},System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs(System.Collections.Generic.List{System.String},System.String)
  id: SendMsgToPlayerDogs(System.Collections.Generic.List{System.String},System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: SendMsgToPlayerDogs(List<String>, String)
  nameWithType: NetworkManagerServerUtility.SendMsgToPlayerDogs(List<String>, String)
  fullName: Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs(System.Collections.Generic.List<System.String>, System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: SendMsgToPlayerDogs
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 277
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public void SendMsgToPlayerDogs(List<string> playerIPList, string context)
    parameters:
    - id: playerIPList
      type: System.Collections.Generic.List{System.String}
    - id: context
      type: System.String
    content.vb: Public Sub SendMsgToPlayerDogs(playerIPList As List(Of String), context As String)
  overload: Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs*
  implements:
  - Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.Collections.Generic.List{System.String},System.String)
  nameWithType.vb: NetworkManagerServerUtility.SendMsgToPlayerDogs(List(Of String), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs(System.Collections.Generic.List(Of System.String), System.String)
  name.vb: SendMsgToPlayerDogs(List(Of String), String)
- uid: Funique.Manager.NetworkManagerServerUtility.SendWatchDog(System.String,System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.SendWatchDog(System.String,System.String)
  id: SendWatchDog(System.String,System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: SendWatchDog(String, String)
  nameWithType: NetworkManagerServerUtility.SendWatchDog(String, String)
  fullName: Funique.Manager.NetworkManagerServerUtility.SendWatchDog(System.String, System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: SendWatchDog
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 281
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public void SendWatchDog(string ip, string context)
    parameters:
    - id: ip
      type: System.String
    - id: context
      type: System.String
    content.vb: Public Sub SendWatchDog(ip As String, context As String)
  overload: Funique.Manager.NetworkManagerServerUtility.SendWatchDog*
  implements:
  - Funique.Network.INetworkOSC.SendWatchDog(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Funique.Manager.NetworkManagerServerUtility.SendToAllDogs(System.String)
  commentId: M:Funique.Manager.NetworkManagerServerUtility.SendToAllDogs(System.String)
  id: SendToAllDogs(System.String)
  parent: Funique.Manager.NetworkManagerServerUtility
  langs:
  - csharp
  - vb
  name: SendToAllDogs(String)
  nameWithType: NetworkManagerServerUtility.SendToAllDogs(String)
  fullName: Funique.Manager.NetworkManagerServerUtility.SendToAllDogs(System.String)
  type: Method
  source:
    remote:
      path: NetworkManagerServerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_network.git
    id: SendToAllDogs
    path: ../../../project_unity_development/Assets/FuniquePlugin/Network/NetworkManagerServerUtility.cs
    startLine: 285
  assemblies:
  - Funique.Network
  namespace: Funique.Manager
  syntax:
    content: public void SendToAllDogs(string context)
    parameters:
    - id: context
      type: System.String
    content.vb: Public Sub SendToAllDogs(context As String)
  overload: Funique.Manager.NetworkManagerServerUtility.SendToAllDogs*
  implements:
  - Funique.Network.INetworkOSC.SendToAllDogs(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Funique.Manager
  commentId: N:Funique.Manager
  name: Funique.Manager
  nameWithType: Funique.Manager
  fullName: Funique.Manager
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Funique.Manager.ManagerBase
  commentId: T:Funique.Manager.ManagerBase
  parent: Funique.Manager
  name: ManagerBase
  nameWithType: ManagerBase
  fullName: Funique.Manager.ManagerBase
- uid: Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}
  commentId: T:Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}
  parent: Funique.Manager
  definition: Funique.Manager.ManagerBase`1
  name: ManagerBase<NetworkManagerData>
  nameWithType: ManagerBase<NetworkManagerData>
  fullName: Funique.Manager.ManagerBase<Funique.Network.NetworkManagerData>
  nameWithType.vb: ManagerBase(Of NetworkManagerData)
  fullName.vb: Funique.Manager.ManagerBase(Of Funique.Network.NetworkManagerData)
  name.vb: ManagerBase(Of NetworkManagerData)
  spec.csharp:
  - uid: Funique.Manager.ManagerBase`1
    name: ManagerBase
    nameWithType: ManagerBase
    fullName: Funique.Manager.ManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: Funique.Network.NetworkManagerData
    name: NetworkManagerData
    nameWithType: NetworkManagerData
    fullName: Funique.Network.NetworkManagerData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Funique.Manager.ManagerBase`1
    name: ManagerBase
    nameWithType: ManagerBase
    fullName: Funique.Manager.ManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Funique.Network.NetworkManagerData
    name: NetworkManagerData
    nameWithType: NetworkManagerData
    fullName: Funique.Network.NetworkManagerData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: LiteNetLib.INetEventListener
  commentId: T:LiteNetLib.INetEventListener
  parent: LiteNetLib
  isExternal: true
  name: INetEventListener
  nameWithType: INetEventListener
  fullName: LiteNetLib.INetEventListener
- uid: Funique.Network.INetworkServerUtility
  commentId: T:Funique.Network.INetworkServerUtility
  parent: Funique.Network
  name: INetworkServerUtility
  nameWithType: INetworkServerUtility
  fullName: Funique.Network.INetworkServerUtility
- uid: Funique.Network.INetworkEvent
  commentId: T:Funique.Network.INetworkEvent
  parent: Funique.Network
  name: INetworkEvent
  nameWithType: INetworkEvent
  fullName: Funique.Network.INetworkEvent
- uid: Funique.Network.INetworkOSC
  commentId: T:Funique.Network.INetworkOSC
  parent: Funique.Network
  name: INetworkOSC
  nameWithType: INetworkOSC
  fullName: Funique.Network.INetworkOSC
- uid: Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}.config
  commentId: P:Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}.config
  parent: Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}
  definition: Funique.Manager.ManagerBase`1.config
  name: config
  nameWithType: ManagerBase<NetworkManagerData>.config
  fullName: Funique.Manager.ManagerBase<Funique.Network.NetworkManagerData>.config
  nameWithType.vb: ManagerBase(Of NetworkManagerData).config
  fullName.vb: Funique.Manager.ManagerBase(Of Funique.Network.NetworkManagerData).config
- uid: Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}.RegisterConfig(Funique.Network.NetworkManagerData)
  commentId: M:Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}.RegisterConfig(Funique.Network.NetworkManagerData)
  parent: Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}
  definition: Funique.Manager.ManagerBase`1.RegisterConfig(`0)
  name: RegisterConfig(NetworkManagerData)
  nameWithType: ManagerBase<NetworkManagerData>.RegisterConfig(NetworkManagerData)
  fullName: Funique.Manager.ManagerBase<Funique.Network.NetworkManagerData>.RegisterConfig(Funique.Network.NetworkManagerData)
  nameWithType.vb: ManagerBase(Of NetworkManagerData).RegisterConfig(NetworkManagerData)
  fullName.vb: Funique.Manager.ManagerBase(Of Funique.Network.NetworkManagerData).RegisterConfig(Funique.Network.NetworkManagerData)
  spec.csharp:
  - uid: Funique.Manager.ManagerBase`1.RegisterConfig(`0)
    name: RegisterConfig
    nameWithType: ManagerBase<NetworkManagerData>.RegisterConfig
    fullName: Funique.Manager.ManagerBase<Funique.Network.NetworkManagerData>.RegisterConfig
  - name: (
    nameWithType: (
    fullName: (
  - uid: Funique.Network.NetworkManagerData
    name: NetworkManagerData
    nameWithType: NetworkManagerData
    fullName: Funique.Network.NetworkManagerData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase`1.RegisterConfig(`0)
    name: RegisterConfig
    nameWithType: ManagerBase(Of NetworkManagerData).RegisterConfig
    fullName: Funique.Manager.ManagerBase(Of Funique.Network.NetworkManagerData).RegisterConfig
  - name: (
    nameWithType: (
    fullName: (
  - uid: Funique.Network.NetworkManagerData
    name: NetworkManagerData
    nameWithType: NetworkManagerData
    fullName: Funique.Network.NetworkManagerData
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}.Loaded(Funique.Network.NetworkManagerData)
  commentId: M:Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}.Loaded(Funique.Network.NetworkManagerData)
  parent: Funique.Manager.ManagerBase{Funique.Network.NetworkManagerData}
  definition: Funique.Manager.ManagerBase`1.Loaded(`0)
  name: Loaded(NetworkManagerData)
  nameWithType: ManagerBase<NetworkManagerData>.Loaded(NetworkManagerData)
  fullName: Funique.Manager.ManagerBase<Funique.Network.NetworkManagerData>.Loaded(Funique.Network.NetworkManagerData)
  nameWithType.vb: ManagerBase(Of NetworkManagerData).Loaded(NetworkManagerData)
  fullName.vb: Funique.Manager.ManagerBase(Of Funique.Network.NetworkManagerData).Loaded(Funique.Network.NetworkManagerData)
  spec.csharp:
  - uid: Funique.Manager.ManagerBase`1.Loaded(`0)
    name: Loaded
    nameWithType: ManagerBase<NetworkManagerData>.Loaded
    fullName: Funique.Manager.ManagerBase<Funique.Network.NetworkManagerData>.Loaded
  - name: (
    nameWithType: (
    fullName: (
  - uid: Funique.Network.NetworkManagerData
    name: NetworkManagerData
    nameWithType: NetworkManagerData
    fullName: Funique.Network.NetworkManagerData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase`1.Loaded(`0)
    name: Loaded
    nameWithType: ManagerBase(Of NetworkManagerData).Loaded
    fullName: Funique.Manager.ManagerBase(Of Funique.Network.NetworkManagerData).Loaded
  - name: (
    nameWithType: (
    fullName: (
  - uid: Funique.Network.NetworkManagerData
    name: NetworkManagerData
    nameWithType: NetworkManagerData
    fullName: Funique.Network.NetworkManagerData
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.ManagerBase.Shutdown
  commentId: M:Funique.Manager.ManagerBase.Shutdown
  parent: Funique.Manager.ManagerBase
  name: Shutdown()
  nameWithType: ManagerBase.Shutdown()
  fullName: Funique.Manager.ManagerBase.Shutdown()
  spec.csharp:
  - uid: Funique.Manager.ManagerBase.Shutdown
    name: Shutdown
    nameWithType: ManagerBase.Shutdown
    fullName: Funique.Manager.ManagerBase.Shutdown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase.Shutdown
    name: Shutdown
    nameWithType: ManagerBase.Shutdown
    fullName: Funique.Manager.ManagerBase.Shutdown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Funique.Manager.ManagerBase`1
  commentId: T:Funique.Manager.ManagerBase`1
  name: ManagerBase<T>
  nameWithType: ManagerBase<T>
  fullName: Funique.Manager.ManagerBase<T>
  nameWithType.vb: ManagerBase(Of T)
  fullName.vb: Funique.Manager.ManagerBase(Of T)
  name.vb: ManagerBase(Of T)
  spec.csharp:
  - uid: Funique.Manager.ManagerBase`1
    name: ManagerBase
    nameWithType: ManagerBase
    fullName: Funique.Manager.ManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Funique.Manager.ManagerBase`1
    name: ManagerBase
    nameWithType: ManagerBase
    fullName: Funique.Manager.ManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: LiteNetLib
  commentId: N:LiteNetLib
  isExternal: true
  name: LiteNetLib
  nameWithType: LiteNetLib
  fullName: LiteNetLib
- uid: Funique.Network
  commentId: N:Funique.Network
  name: Funique.Network
  nameWithType: Funique.Network
  fullName: Funique.Network
- uid: Funique.Manager.ManagerBase`1.config
  commentId: P:Funique.Manager.ManagerBase`1.config
  name: config
  nameWithType: ManagerBase<T>.config
  fullName: Funique.Manager.ManagerBase<T>.config
  nameWithType.vb: ManagerBase(Of T).config
  fullName.vb: Funique.Manager.ManagerBase(Of T).config
- uid: Funique.Manager.ManagerBase`1.RegisterConfig(`0)
  commentId: M:Funique.Manager.ManagerBase`1.RegisterConfig(`0)
  name: RegisterConfig(T)
  nameWithType: ManagerBase<T>.RegisterConfig(T)
  fullName: Funique.Manager.ManagerBase<T>.RegisterConfig(T)
  nameWithType.vb: ManagerBase(Of T).RegisterConfig(T)
  fullName.vb: Funique.Manager.ManagerBase(Of T).RegisterConfig(T)
  spec.csharp:
  - uid: Funique.Manager.ManagerBase`1.RegisterConfig(`0)
    name: RegisterConfig
    nameWithType: ManagerBase<T>.RegisterConfig
    fullName: Funique.Manager.ManagerBase<T>.RegisterConfig
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase`1.RegisterConfig(`0)
    name: RegisterConfig
    nameWithType: ManagerBase(Of T).RegisterConfig
    fullName: Funique.Manager.ManagerBase(Of T).RegisterConfig
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.ManagerBase`1.Loaded(`0)
  commentId: M:Funique.Manager.ManagerBase`1.Loaded(`0)
  name: Loaded(T)
  nameWithType: ManagerBase<T>.Loaded(T)
  fullName: Funique.Manager.ManagerBase<T>.Loaded(T)
  nameWithType.vb: ManagerBase(Of T).Loaded(T)
  fullName.vb: Funique.Manager.ManagerBase(Of T).Loaded(T)
  spec.csharp:
  - uid: Funique.Manager.ManagerBase`1.Loaded(`0)
    name: Loaded
    nameWithType: ManagerBase<T>.Loaded
    fullName: Funique.Manager.ManagerBase<T>.Loaded
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase`1.Loaded(`0)
    name: Loaded
    nameWithType: ManagerBase(Of T).Loaded
    fullName: Funique.Manager.ManagerBase(Of T).Loaded
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: LiteNetLib.Utils.NetDataWriter
  commentId: T:LiteNetLib.Utils.NetDataWriter
  parent: LiteNetLib.Utils
  isExternal: true
  name: NetDataWriter
  nameWithType: NetDataWriter
  fullName: LiteNetLib.Utils.NetDataWriter
- uid: LiteNetLib.Utils
  commentId: N:LiteNetLib.Utils
  isExternal: true
  name: LiteNetLib.Utils
  nameWithType: LiteNetLib.Utils
  fullName: LiteNetLib.Utils
- uid: Funique.Manager.NetworkManagerServerUtility.Server*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.Server
  name: Server
  nameWithType: NetworkManagerServerUtility.Server
  fullName: Funique.Manager.NetworkManagerServerUtility.Server
- uid: Funique.Network.INetworkServerUtility.Server
  commentId: P:Funique.Network.INetworkServerUtility.Server
  parent: Funique.Network.INetworkServerUtility
  name: Server
  nameWithType: INetworkServerUtility.Server
  fullName: Funique.Network.INetworkServerUtility.Server
- uid: LiteNetLib.NetManager
  commentId: T:LiteNetLib.NetManager
  parent: LiteNetLib
  isExternal: true
  name: NetManager
  nameWithType: NetManager
  fullName: LiteNetLib.NetManager
- uid: Funique.Manager.NetworkManagerServerUtility.NetPeerDict*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.NetPeerDict
  name: NetPeerDict
  nameWithType: NetworkManagerServerUtility.NetPeerDict
  fullName: Funique.Manager.NetworkManagerServerUtility.NetPeerDict
- uid: Funique.Network.INetworkServerUtility.NetPeerDict
  commentId: P:Funique.Network.INetworkServerUtility.NetPeerDict
  parent: Funique.Network.INetworkServerUtility
  name: NetPeerDict
  nameWithType: INetworkServerUtility.NetPeerDict
  fullName: Funique.Network.INetworkServerUtility.NetPeerDict
- uid: System.Collections.Generic.Dictionary{System.String,LiteNetLib.NetPeer}
  commentId: T:System.Collections.Generic.Dictionary{System.String,LiteNetLib.NetPeer}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, NetPeer>
  nameWithType: Dictionary<String, NetPeer>
  fullName: System.Collections.Generic.Dictionary<System.String, LiteNetLib.NetPeer>
  nameWithType.vb: Dictionary(Of String, NetPeer)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, LiteNetLib.NetPeer)
  name.vb: Dictionary(Of String, NetPeer)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LiteNetLib.NetPeer
    name: NetPeer
    nameWithType: NetPeer
    fullName: LiteNetLib.NetPeer
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LiteNetLib.NetPeer
    name: NetPeer
    nameWithType: NetPeer
    fullName: LiteNetLib.NetPeer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Funique.Manager.NetworkManagerServerUtility.PlayerInfomationDict*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.PlayerInfomationDict
  name: PlayerInfomationDict
  nameWithType: NetworkManagerServerUtility.PlayerInfomationDict
  fullName: Funique.Manager.NetworkManagerServerUtility.PlayerInfomationDict
- uid: Funique.Network.INetworkServerUtility.PlayerInfomationDict
  commentId: P:Funique.Network.INetworkServerUtility.PlayerInfomationDict
  parent: Funique.Network.INetworkServerUtility
  name: PlayerInfomationDict
  nameWithType: INetworkServerUtility.PlayerInfomationDict
  fullName: Funique.Network.INetworkServerUtility.PlayerInfomationDict
- uid: System.Collections.Generic.Dictionary{System.String,Funique.PlayerInformation}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Funique.PlayerInformation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, PlayerInformation>
  nameWithType: Dictionary<String, PlayerInformation>
  fullName: System.Collections.Generic.Dictionary<System.String, Funique.PlayerInformation>
  nameWithType.vb: Dictionary(Of String, PlayerInformation)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Funique.PlayerInformation)
  name.vb: Dictionary(Of String, PlayerInformation)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Funique.PlayerInformation
    name: PlayerInformation
    nameWithType: PlayerInformation
    fullName: Funique.PlayerInformation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Funique.PlayerInformation
    name: PlayerInformation
    nameWithType: PlayerInformation
    fullName: Funique.PlayerInformation
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.UIDict*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.UIDict
  name: UIDict
  nameWithType: NetworkManagerServerUtility.UIDict
  fullName: Funique.Manager.NetworkManagerServerUtility.UIDict
- uid: Funique.Network.INetworkServerUtility.UIDict
  commentId: P:Funique.Network.INetworkServerUtility.UIDict
  parent: Funique.Network.INetworkServerUtility
  name: UIDict
  nameWithType: INetworkServerUtility.UIDict
  fullName: Funique.Network.INetworkServerUtility.UIDict
- uid: System.Collections.Generic.Dictionary{System.String,UnityEngine.GameObject}
  commentId: T:System.Collections.Generic.Dictionary{System.String,UnityEngine.GameObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, GameObject>
  nameWithType: Dictionary<String, GameObject>
  fullName: System.Collections.Generic.Dictionary<System.String, UnityEngine.GameObject>
  nameWithType.vb: Dictionary(Of String, GameObject)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, UnityEngine.GameObject)
  name.vb: Dictionary(Of String, GameObject)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UnityEngine.GameObject
    name: GameObject
    nameWithType: GameObject
    fullName: UnityEngine.GameObject
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UnityEngine.GameObject
    name: GameObject
    nameWithType: GameObject
    fullName: UnityEngine.GameObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.OSC*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.OSC
  name: OSC
  nameWithType: NetworkManagerServerUtility.OSC
  fullName: Funique.Manager.NetworkManagerServerUtility.OSC
- uid: OSCHandler
  commentId: T:OSCHandler
  name: OSCHandler
  nameWithType: OSCHandler
  fullName: OSCHandler
- uid: Funique.Manager.NetworkManagerServerUtility.OSCDict*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.OSCDict
  name: OSCDict
  nameWithType: NetworkManagerServerUtility.OSCDict
  fullName: Funique.Manager.NetworkManagerServerUtility.OSCDict
- uid: Funique.Network.INetworkOSC.OSCDict
  commentId: P:Funique.Network.INetworkOSC.OSCDict
  parent: Funique.Network.INetworkOSC
  name: OSCDict
  nameWithType: INetworkOSC.OSCDict
  fullName: Funique.Network.INetworkOSC.OSCDict
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Network.INetworkEvent.OnConnected
  commentId: E:Funique.Network.INetworkEvent.OnConnected
  parent: Funique.Network.INetworkEvent
  name: OnConnected
  nameWithType: INetworkEvent.OnConnected
  fullName: Funique.Network.INetworkEvent.OnConnected
- uid: System.EventHandler{Funique.Network.PeerEventArgs}
  commentId: T:System.EventHandler{Funique.Network.PeerEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<PeerEventArgs>
  nameWithType: EventHandler<PeerEventArgs>
  fullName: System.EventHandler<Funique.Network.PeerEventArgs>
  nameWithType.vb: EventHandler(Of PeerEventArgs)
  fullName.vb: System.EventHandler(Of Funique.Network.PeerEventArgs)
  name.vb: EventHandler(Of PeerEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Funique.Network.PeerEventArgs
    name: PeerEventArgs
    nameWithType: PeerEventArgs
    fullName: Funique.Network.PeerEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Funique.Network.PeerEventArgs
    name: PeerEventArgs
    nameWithType: PeerEventArgs
    fullName: Funique.Network.PeerEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Network.INetworkEvent.OnDisconnected
  commentId: E:Funique.Network.INetworkEvent.OnDisconnected
  parent: Funique.Network.INetworkEvent
  name: OnDisconnected
  nameWithType: INetworkEvent.OnDisconnected
  fullName: Funique.Network.INetworkEvent.OnDisconnected
- uid: System.EventHandler{Funique.Network.DisconnectEventArgs}
  commentId: T:System.EventHandler{Funique.Network.DisconnectEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<DisconnectEventArgs>
  nameWithType: EventHandler<DisconnectEventArgs>
  fullName: System.EventHandler<Funique.Network.DisconnectEventArgs>
  nameWithType.vb: EventHandler(Of DisconnectEventArgs)
  fullName.vb: System.EventHandler(Of Funique.Network.DisconnectEventArgs)
  name.vb: EventHandler(Of DisconnectEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Funique.Network.DisconnectEventArgs
    name: DisconnectEventArgs
    nameWithType: DisconnectEventArgs
    fullName: Funique.Network.DisconnectEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Funique.Network.DisconnectEventArgs
    name: DisconnectEventArgs
    nameWithType: DisconnectEventArgs
    fullName: Funique.Network.DisconnectEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Network.INetworkEvent.OnLatency
  commentId: E:Funique.Network.INetworkEvent.OnLatency
  parent: Funique.Network.INetworkEvent
  name: OnLatency
  nameWithType: INetworkEvent.OnLatency
  fullName: Funique.Network.INetworkEvent.OnLatency
- uid: System.EventHandler{Funique.Network.LatencyEventArgs}
  commentId: T:System.EventHandler{Funique.Network.LatencyEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<LatencyEventArgs>
  nameWithType: EventHandler<LatencyEventArgs>
  fullName: System.EventHandler<Funique.Network.LatencyEventArgs>
  nameWithType.vb: EventHandler(Of LatencyEventArgs)
  fullName.vb: System.EventHandler(Of Funique.Network.LatencyEventArgs)
  name.vb: EventHandler(Of LatencyEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Funique.Network.LatencyEventArgs
    name: LatencyEventArgs
    nameWithType: LatencyEventArgs
    fullName: Funique.Network.LatencyEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Funique.Network.LatencyEventArgs
    name: LatencyEventArgs
    nameWithType: LatencyEventArgs
    fullName: Funique.Network.LatencyEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Network.INetworkEvent.OnError
  commentId: E:Funique.Network.INetworkEvent.OnError
  parent: Funique.Network.INetworkEvent
  name: OnError
  nameWithType: INetworkEvent.OnError
  fullName: Funique.Network.INetworkEvent.OnError
- uid: System.EventHandler{Funique.Network.ErrorEventArgs}
  commentId: T:System.EventHandler{Funique.Network.ErrorEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ErrorEventArgs>
  nameWithType: EventHandler<ErrorEventArgs>
  fullName: System.EventHandler<Funique.Network.ErrorEventArgs>
  nameWithType.vb: EventHandler(Of ErrorEventArgs)
  fullName.vb: System.EventHandler(Of Funique.Network.ErrorEventArgs)
  name.vb: EventHandler(Of ErrorEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Funique.Network.ErrorEventArgs
    name: ErrorEventArgs
    nameWithType: ErrorEventArgs
    fullName: Funique.Network.ErrorEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Funique.Network.ErrorEventArgs
    name: ErrorEventArgs
    nameWithType: ErrorEventArgs
    fullName: Funique.Network.ErrorEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Network.INetworkEvent.OnReceived
  commentId: E:Funique.Network.INetworkEvent.OnReceived
  parent: Funique.Network.INetworkEvent
  name: OnReceived
  nameWithType: INetworkEvent.OnReceived
  fullName: Funique.Network.INetworkEvent.OnReceived
- uid: System.EventHandler{Funique.Network.ReceivedEventArgs}
  commentId: T:System.EventHandler{Funique.Network.ReceivedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ReceivedEventArgs>
  nameWithType: EventHandler<ReceivedEventArgs>
  fullName: System.EventHandler<Funique.Network.ReceivedEventArgs>
  nameWithType.vb: EventHandler(Of ReceivedEventArgs)
  fullName.vb: System.EventHandler(Of Funique.Network.ReceivedEventArgs)
  name.vb: EventHandler(Of ReceivedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Funique.Network.ReceivedEventArgs
    name: ReceivedEventArgs
    nameWithType: ReceivedEventArgs
    fullName: Funique.Network.ReceivedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Funique.Network.ReceivedEventArgs
    name: ReceivedEventArgs
    nameWithType: ReceivedEventArgs
    fullName: Funique.Network.ReceivedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.ManagerBase.Initialization
  commentId: M:Funique.Manager.ManagerBase.Initialization
  parent: Funique.Manager.ManagerBase
  name: Initialization()
  nameWithType: ManagerBase.Initialization()
  fullName: Funique.Manager.ManagerBase.Initialization()
  spec.csharp:
  - uid: Funique.Manager.ManagerBase.Initialization
    name: Initialization
    nameWithType: ManagerBase.Initialization
    fullName: Funique.Manager.ManagerBase.Initialization
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase.Initialization
    name: Initialization
    nameWithType: ManagerBase.Initialization
    fullName: Funique.Manager.ManagerBase.Initialization
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.Initialization*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.Initialization
  name: Initialization
  nameWithType: NetworkManagerServerUtility.Initialization
  fullName: Funique.Manager.NetworkManagerServerUtility.Initialization
- uid: Funique.Manager.ManagerBase.FrameUpdate
  commentId: M:Funique.Manager.ManagerBase.FrameUpdate
  parent: Funique.Manager.ManagerBase
  name: FrameUpdate()
  nameWithType: ManagerBase.FrameUpdate()
  fullName: Funique.Manager.ManagerBase.FrameUpdate()
  spec.csharp:
  - uid: Funique.Manager.ManagerBase.FrameUpdate
    name: FrameUpdate
    nameWithType: ManagerBase.FrameUpdate
    fullName: Funique.Manager.ManagerBase.FrameUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase.FrameUpdate
    name: FrameUpdate
    nameWithType: ManagerBase.FrameUpdate
    fullName: Funique.Manager.ManagerBase.FrameUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.FrameUpdate*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.FrameUpdate
  name: FrameUpdate
  nameWithType: NetworkManagerServerUtility.FrameUpdate
  fullName: Funique.Manager.NetworkManagerServerUtility.FrameUpdate
- uid: Funique.Manager.ManagerBase.Dispose
  commentId: M:Funique.Manager.ManagerBase.Dispose
  parent: Funique.Manager.ManagerBase
  name: Dispose()
  nameWithType: ManagerBase.Dispose()
  fullName: Funique.Manager.ManagerBase.Dispose()
  spec.csharp:
  - uid: Funique.Manager.ManagerBase.Dispose
    name: Dispose
    nameWithType: ManagerBase.Dispose
    fullName: Funique.Manager.ManagerBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase.Dispose
    name: Dispose
    nameWithType: ManagerBase.Dispose
    fullName: Funique.Manager.ManagerBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.Dispose*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.Dispose
  name: Dispose
  nameWithType: NetworkManagerServerUtility.Dispose
  fullName: Funique.Manager.NetworkManagerServerUtility.Dispose
- uid: Funique.Manager.NetworkManagerServerUtility.OnPeerConnected*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.OnPeerConnected
  name: OnPeerConnected
  nameWithType: NetworkManagerServerUtility.OnPeerConnected
  fullName: Funique.Manager.NetworkManagerServerUtility.OnPeerConnected
- uid: LiteNetLib.INetEventListener.OnPeerConnected(LiteNetLib.NetPeer)
  commentId: M:LiteNetLib.INetEventListener.OnPeerConnected(LiteNetLib.NetPeer)
  parent: LiteNetLib.INetEventListener
  isExternal: true
  name: OnPeerConnected(NetPeer)
  nameWithType: INetEventListener.OnPeerConnected(NetPeer)
  fullName: LiteNetLib.INetEventListener.OnPeerConnected(LiteNetLib.NetPeer)
  spec.csharp:
  - uid: LiteNetLib.INetEventListener.OnPeerConnected(LiteNetLib.NetPeer)
    name: OnPeerConnected
    nameWithType: INetEventListener.OnPeerConnected
    fullName: LiteNetLib.INetEventListener.OnPeerConnected
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LiteNetLib.NetPeer
    name: NetPeer
    nameWithType: NetPeer
    fullName: LiteNetLib.NetPeer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: LiteNetLib.INetEventListener.OnPeerConnected(LiteNetLib.NetPeer)
    name: OnPeerConnected
    nameWithType: INetEventListener.OnPeerConnected
    fullName: LiteNetLib.INetEventListener.OnPeerConnected
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LiteNetLib.NetPeer
    name: NetPeer
    nameWithType: NetPeer
    fullName: LiteNetLib.NetPeer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: LiteNetLib.NetPeer
  commentId: T:LiteNetLib.NetPeer
  parent: LiteNetLib
  isExternal: true
  name: NetPeer
  nameWithType: NetPeer
  fullName: LiteNetLib.NetPeer
- uid: Funique.Manager.NetworkManagerServerUtility.OnPeerDisconnected*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.OnPeerDisconnected
  name: OnPeerDisconnected
  nameWithType: NetworkManagerServerUtility.OnPeerDisconnected
  fullName: Funique.Manager.NetworkManagerServerUtility.OnPeerDisconnected
- uid: LiteNetLib.INetEventListener.OnPeerDisconnected(LiteNetLib.NetPeer,LiteNetLib.DisconnectInfo)
  commentId: M:LiteNetLib.INetEventListener.OnPeerDisconnected(LiteNetLib.NetPeer,LiteNetLib.DisconnectInfo)
  parent: LiteNetLib.INetEventListener
  isExternal: true
  name: OnPeerDisconnected(NetPeer, DisconnectInfo)
  nameWithType: INetEventListener.OnPeerDisconnected(NetPeer, DisconnectInfo)
  fullName: LiteNetLib.INetEventListener.OnPeerDisconnected(LiteNetLib.NetPeer, LiteNetLib.DisconnectInfo)
  spec.csharp:
  - uid: LiteNetLib.INetEventListener.OnPeerDisconnected(LiteNetLib.NetPeer,LiteNetLib.DisconnectInfo)
    name: OnPeerDisconnected
    nameWithType: INetEventListener.OnPeerDisconnected
    fullName: LiteNetLib.INetEventListener.OnPeerDisconnected
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LiteNetLib.NetPeer
    name: NetPeer
    nameWithType: NetPeer
    fullName: LiteNetLib.NetPeer
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LiteNetLib.DisconnectInfo
    name: DisconnectInfo
    nameWithType: DisconnectInfo
    fullName: LiteNetLib.DisconnectInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: LiteNetLib.INetEventListener.OnPeerDisconnected(LiteNetLib.NetPeer,LiteNetLib.DisconnectInfo)
    name: OnPeerDisconnected
    nameWithType: INetEventListener.OnPeerDisconnected
    fullName: LiteNetLib.INetEventListener.OnPeerDisconnected
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LiteNetLib.NetPeer
    name: NetPeer
    nameWithType: NetPeer
    fullName: LiteNetLib.NetPeer
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LiteNetLib.DisconnectInfo
    name: DisconnectInfo
    nameWithType: DisconnectInfo
    fullName: LiteNetLib.DisconnectInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: LiteNetLib.DisconnectInfo
  commentId: T:LiteNetLib.DisconnectInfo
  parent: LiteNetLib
  isExternal: true
  name: DisconnectInfo
  nameWithType: DisconnectInfo
  fullName: LiteNetLib.DisconnectInfo
- uid: Funique.Manager.NetworkManagerServerUtility.OnNetworkError*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.OnNetworkError
  name: OnNetworkError
  nameWithType: NetworkManagerServerUtility.OnNetworkError
  fullName: Funique.Manager.NetworkManagerServerUtility.OnNetworkError
- uid: LiteNetLib.INetEventListener.OnNetworkError(System.Net.IPEndPoint,System.Net.Sockets.SocketError)
  commentId: M:LiteNetLib.INetEventListener.OnNetworkError(System.Net.IPEndPoint,System.Net.Sockets.SocketError)
  parent: LiteNetLib.INetEventListener
  isExternal: true
  name: OnNetworkError(IPEndPoint, SocketError)
  nameWithType: INetEventListener.OnNetworkError(IPEndPoint, SocketError)
  fullName: LiteNetLib.INetEventListener.OnNetworkError(System.Net.IPEndPoint, System.Net.Sockets.SocketError)
  spec.csharp:
  - uid: LiteNetLib.INetEventListener.OnNetworkError(System.Net.IPEndPoint,System.Net.Sockets.SocketError)
    name: OnNetworkError
    nameWithType: INetEventListener.OnNetworkError
    fullName: LiteNetLib.INetEventListener.OnNetworkError
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.IPEndPoint
    name: IPEndPoint
    nameWithType: IPEndPoint
    fullName: System.Net.IPEndPoint
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: System.Net.Sockets.SocketError
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: LiteNetLib.INetEventListener.OnNetworkError(System.Net.IPEndPoint,System.Net.Sockets.SocketError)
    name: OnNetworkError
    nameWithType: INetEventListener.OnNetworkError
    fullName: LiteNetLib.INetEventListener.OnNetworkError
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.IPEndPoint
    name: IPEndPoint
    nameWithType: IPEndPoint
    fullName: System.Net.IPEndPoint
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketError
    name: SocketError
    nameWithType: SocketError
    fullName: System.Net.Sockets.SocketError
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.IPEndPoint
  commentId: T:System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.SocketError
  commentId: T:System.Net.Sockets.SocketError
  parent: System.Net.Sockets
  isExternal: true
  name: SocketError
  nameWithType: SocketError
  fullName: System.Net.Sockets.SocketError
- uid: System.Net
  commentId: N:System.Net
  isExternal: true
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: System.Net.Sockets
  commentId: N:System.Net.Sockets
  isExternal: true
  name: System.Net.Sockets
  nameWithType: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: Funique.Manager.NetworkManagerServerUtility.OnNetworkReceive*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.OnNetworkReceive
  name: OnNetworkReceive
  nameWithType: NetworkManagerServerUtility.OnNetworkReceive
  fullName: Funique.Manager.NetworkManagerServerUtility.OnNetworkReceive
- uid: LiteNetLib.INetEventListener.OnNetworkReceive(LiteNetLib.NetPeer,LiteNetLib.NetPacketReader,LiteNetLib.DeliveryMethod)
  commentId: M:LiteNetLib.INetEventListener.OnNetworkReceive(LiteNetLib.NetPeer,LiteNetLib.NetPacketReader,LiteNetLib.DeliveryMethod)
  parent: LiteNetLib.INetEventListener
  isExternal: true
  name: OnNetworkReceive(NetPeer, NetPacketReader, DeliveryMethod)
  nameWithType: INetEventListener.OnNetworkReceive(NetPeer, NetPacketReader, DeliveryMethod)
  fullName: LiteNetLib.INetEventListener.OnNetworkReceive(LiteNetLib.NetPeer, LiteNetLib.NetPacketReader, LiteNetLib.DeliveryMethod)
  spec.csharp:
  - uid: LiteNetLib.INetEventListener.OnNetworkReceive(LiteNetLib.NetPeer,LiteNetLib.NetPacketReader,LiteNetLib.DeliveryMethod)
    name: OnNetworkReceive
    nameWithType: INetEventListener.OnNetworkReceive
    fullName: LiteNetLib.INetEventListener.OnNetworkReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LiteNetLib.NetPeer
    name: NetPeer
    nameWithType: NetPeer
    fullName: LiteNetLib.NetPeer
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LiteNetLib.NetPacketReader
    name: NetPacketReader
    nameWithType: NetPacketReader
    fullName: LiteNetLib.NetPacketReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LiteNetLib.DeliveryMethod
    name: DeliveryMethod
    nameWithType: DeliveryMethod
    fullName: LiteNetLib.DeliveryMethod
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: LiteNetLib.INetEventListener.OnNetworkReceive(LiteNetLib.NetPeer,LiteNetLib.NetPacketReader,LiteNetLib.DeliveryMethod)
    name: OnNetworkReceive
    nameWithType: INetEventListener.OnNetworkReceive
    fullName: LiteNetLib.INetEventListener.OnNetworkReceive
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LiteNetLib.NetPeer
    name: NetPeer
    nameWithType: NetPeer
    fullName: LiteNetLib.NetPeer
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LiteNetLib.NetPacketReader
    name: NetPacketReader
    nameWithType: NetPacketReader
    fullName: LiteNetLib.NetPacketReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LiteNetLib.DeliveryMethod
    name: DeliveryMethod
    nameWithType: DeliveryMethod
    fullName: LiteNetLib.DeliveryMethod
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: LiteNetLib.NetPacketReader
  commentId: T:LiteNetLib.NetPacketReader
  parent: LiteNetLib
  isExternal: true
  name: NetPacketReader
  nameWithType: NetPacketReader
  fullName: LiteNetLib.NetPacketReader
- uid: LiteNetLib.DeliveryMethod
  commentId: T:LiteNetLib.DeliveryMethod
  parent: LiteNetLib
  isExternal: true
  name: DeliveryMethod
  nameWithType: DeliveryMethod
  fullName: LiteNetLib.DeliveryMethod
- uid: Funique.Manager.NetworkManagerServerUtility.OnNetworkReceiveUnconnected*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.OnNetworkReceiveUnconnected
  name: OnNetworkReceiveUnconnected
  nameWithType: NetworkManagerServerUtility.OnNetworkReceiveUnconnected
  fullName: Funique.Manager.NetworkManagerServerUtility.OnNetworkReceiveUnconnected
- uid: LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected(System.Net.IPEndPoint,LiteNetLib.NetPacketReader,LiteNetLib.UnconnectedMessageType)
  commentId: M:LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected(System.Net.IPEndPoint,LiteNetLib.NetPacketReader,LiteNetLib.UnconnectedMessageType)
  parent: LiteNetLib.INetEventListener
  isExternal: true
  name: OnNetworkReceiveUnconnected(IPEndPoint, NetPacketReader, UnconnectedMessageType)
  nameWithType: INetEventListener.OnNetworkReceiveUnconnected(IPEndPoint, NetPacketReader, UnconnectedMessageType)
  fullName: LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected(System.Net.IPEndPoint, LiteNetLib.NetPacketReader, LiteNetLib.UnconnectedMessageType)
  spec.csharp:
  - uid: LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected(System.Net.IPEndPoint,LiteNetLib.NetPacketReader,LiteNetLib.UnconnectedMessageType)
    name: OnNetworkReceiveUnconnected
    nameWithType: INetEventListener.OnNetworkReceiveUnconnected
    fullName: LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.IPEndPoint
    name: IPEndPoint
    nameWithType: IPEndPoint
    fullName: System.Net.IPEndPoint
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LiteNetLib.NetPacketReader
    name: NetPacketReader
    nameWithType: NetPacketReader
    fullName: LiteNetLib.NetPacketReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LiteNetLib.UnconnectedMessageType
    name: UnconnectedMessageType
    nameWithType: UnconnectedMessageType
    fullName: LiteNetLib.UnconnectedMessageType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected(System.Net.IPEndPoint,LiteNetLib.NetPacketReader,LiteNetLib.UnconnectedMessageType)
    name: OnNetworkReceiveUnconnected
    nameWithType: INetEventListener.OnNetworkReceiveUnconnected
    fullName: LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.IPEndPoint
    name: IPEndPoint
    nameWithType: IPEndPoint
    fullName: System.Net.IPEndPoint
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LiteNetLib.NetPacketReader
    name: NetPacketReader
    nameWithType: NetPacketReader
    fullName: LiteNetLib.NetPacketReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LiteNetLib.UnconnectedMessageType
    name: UnconnectedMessageType
    nameWithType: UnconnectedMessageType
    fullName: LiteNetLib.UnconnectedMessageType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: LiteNetLib.UnconnectedMessageType
  commentId: T:LiteNetLib.UnconnectedMessageType
  parent: LiteNetLib
  isExternal: true
  name: UnconnectedMessageType
  nameWithType: UnconnectedMessageType
  fullName: LiteNetLib.UnconnectedMessageType
- uid: Funique.Manager.NetworkManagerServerUtility.OnNetworkLatencyUpdate*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.OnNetworkLatencyUpdate
  name: OnNetworkLatencyUpdate
  nameWithType: NetworkManagerServerUtility.OnNetworkLatencyUpdate
  fullName: Funique.Manager.NetworkManagerServerUtility.OnNetworkLatencyUpdate
- uid: LiteNetLib.INetEventListener.OnNetworkLatencyUpdate(LiteNetLib.NetPeer,System.Int32)
  commentId: M:LiteNetLib.INetEventListener.OnNetworkLatencyUpdate(LiteNetLib.NetPeer,System.Int32)
  parent: LiteNetLib.INetEventListener
  isExternal: true
  name: OnNetworkLatencyUpdate(NetPeer, Int32)
  nameWithType: INetEventListener.OnNetworkLatencyUpdate(NetPeer, Int32)
  fullName: LiteNetLib.INetEventListener.OnNetworkLatencyUpdate(LiteNetLib.NetPeer, System.Int32)
  spec.csharp:
  - uid: LiteNetLib.INetEventListener.OnNetworkLatencyUpdate(LiteNetLib.NetPeer,System.Int32)
    name: OnNetworkLatencyUpdate
    nameWithType: INetEventListener.OnNetworkLatencyUpdate
    fullName: LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LiteNetLib.NetPeer
    name: NetPeer
    nameWithType: NetPeer
    fullName: LiteNetLib.NetPeer
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: LiteNetLib.INetEventListener.OnNetworkLatencyUpdate(LiteNetLib.NetPeer,System.Int32)
    name: OnNetworkLatencyUpdate
    nameWithType: INetEventListener.OnNetworkLatencyUpdate
    fullName: LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LiteNetLib.NetPeer
    name: NetPeer
    nameWithType: NetPeer
    fullName: LiteNetLib.NetPeer
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Funique.Manager.NetworkManagerServerUtility.OnConnectionRequest*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.OnConnectionRequest
  name: OnConnectionRequest
  nameWithType: NetworkManagerServerUtility.OnConnectionRequest
  fullName: Funique.Manager.NetworkManagerServerUtility.OnConnectionRequest
- uid: LiteNetLib.INetEventListener.OnConnectionRequest(LiteNetLib.ConnectionRequest)
  commentId: M:LiteNetLib.INetEventListener.OnConnectionRequest(LiteNetLib.ConnectionRequest)
  parent: LiteNetLib.INetEventListener
  isExternal: true
  name: OnConnectionRequest(ConnectionRequest)
  nameWithType: INetEventListener.OnConnectionRequest(ConnectionRequest)
  fullName: LiteNetLib.INetEventListener.OnConnectionRequest(LiteNetLib.ConnectionRequest)
  spec.csharp:
  - uid: LiteNetLib.INetEventListener.OnConnectionRequest(LiteNetLib.ConnectionRequest)
    name: OnConnectionRequest
    nameWithType: INetEventListener.OnConnectionRequest
    fullName: LiteNetLib.INetEventListener.OnConnectionRequest
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LiteNetLib.ConnectionRequest
    name: ConnectionRequest
    nameWithType: ConnectionRequest
    fullName: LiteNetLib.ConnectionRequest
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: LiteNetLib.INetEventListener.OnConnectionRequest(LiteNetLib.ConnectionRequest)
    name: OnConnectionRequest
    nameWithType: INetEventListener.OnConnectionRequest
    fullName: LiteNetLib.INetEventListener.OnConnectionRequest
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: LiteNetLib.ConnectionRequest
    name: ConnectionRequest
    nameWithType: ConnectionRequest
    fullName: LiteNetLib.ConnectionRequest
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: LiteNetLib.ConnectionRequest
  commentId: T:LiteNetLib.ConnectionRequest
  parent: LiteNetLib
  isExternal: true
  name: ConnectionRequest
  nameWithType: ConnectionRequest
  fullName: LiteNetLib.ConnectionRequest
- uid: Funique.Manager.NetworkManagerServerUtility.LiteNetInit*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.LiteNetInit
  name: LiteNetInit
  nameWithType: NetworkManagerServerUtility.LiteNetInit
  fullName: Funique.Manager.NetworkManagerServerUtility.LiteNetInit
- uid: Funique.Manager.NetworkManagerServerUtility.CreatePlayerInformation*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.CreatePlayerInformation
  name: CreatePlayerInformation
  nameWithType: NetworkManagerServerUtility.CreatePlayerInformation
  fullName: Funique.Manager.NetworkManagerServerUtility.CreatePlayerInformation
- uid: Funique.Network.INetworkServerUtility.CreatePlayerInformation(System.String,System.Int32)
  commentId: M:Funique.Network.INetworkServerUtility.CreatePlayerInformation(System.String,System.Int32)
  parent: Funique.Network.INetworkServerUtility
  isExternal: true
  name: CreatePlayerInformation(String, Int32)
  nameWithType: INetworkServerUtility.CreatePlayerInformation(String, Int32)
  fullName: Funique.Network.INetworkServerUtility.CreatePlayerInformation(System.String, System.Int32)
  spec.csharp:
  - uid: Funique.Network.INetworkServerUtility.CreatePlayerInformation(System.String,System.Int32)
    name: CreatePlayerInformation
    nameWithType: INetworkServerUtility.CreatePlayerInformation
    fullName: Funique.Network.INetworkServerUtility.CreatePlayerInformation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkServerUtility.CreatePlayerInformation(System.String,System.Int32)
    name: CreatePlayerInformation
    nameWithType: INetworkServerUtility.CreatePlayerInformation
    fullName: Funique.Network.INetworkServerUtility.CreatePlayerInformation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Funique.PlayerInformation
  commentId: T:Funique.PlayerInformation
  parent: Funique
  name: PlayerInformation
  nameWithType: PlayerInformation
  fullName: Funique.PlayerInformation
- uid: Funique
  commentId: N:Funique
  name: Funique
  nameWithType: Funique
  fullName: Funique
- uid: Funique.Manager.NetworkManagerServerUtility.WakeupCall*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.WakeupCall
  name: WakeupCall
  nameWithType: NetworkManagerServerUtility.WakeupCall
  fullName: Funique.Manager.NetworkManagerServerUtility.WakeupCall
- uid: Funique.Network.INetworkServerUtility.WakeupCall(System.String)
  commentId: M:Funique.Network.INetworkServerUtility.WakeupCall(System.String)
  parent: Funique.Network.INetworkServerUtility
  isExternal: true
  name: WakeupCall(String)
  nameWithType: INetworkServerUtility.WakeupCall(String)
  fullName: Funique.Network.INetworkServerUtility.WakeupCall(System.String)
  spec.csharp:
  - uid: Funique.Network.INetworkServerUtility.WakeupCall(System.String)
    name: WakeupCall
    nameWithType: INetworkServerUtility.WakeupCall
    fullName: Funique.Network.INetworkServerUtility.WakeupCall
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkServerUtility.WakeupCall(System.String)
    name: WakeupCall
    nameWithType: INetworkServerUtility.WakeupCall
    fullName: Funique.Network.INetworkServerUtility.WakeupCall
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.SleepCall*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.SleepCall
  name: SleepCall
  nameWithType: NetworkManagerServerUtility.SleepCall
  fullName: Funique.Manager.NetworkManagerServerUtility.SleepCall
- uid: Funique.Network.INetworkServerUtility.SleepCall(System.String)
  commentId: M:Funique.Network.INetworkServerUtility.SleepCall(System.String)
  parent: Funique.Network.INetworkServerUtility
  isExternal: true
  name: SleepCall(String)
  nameWithType: INetworkServerUtility.SleepCall(String)
  fullName: Funique.Network.INetworkServerUtility.SleepCall(System.String)
  spec.csharp:
  - uid: Funique.Network.INetworkServerUtility.SleepCall(System.String)
    name: SleepCall
    nameWithType: INetworkServerUtility.SleepCall
    fullName: Funique.Network.INetworkServerUtility.SleepCall
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkServerUtility.SleepCall(System.String)
    name: SleepCall
    nameWithType: INetworkServerUtility.SleepCall
    fullName: Funique.Network.INetworkServerUtility.SleepCall
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation
  name: ReceivedUpdateInformation
  nameWithType: NetworkManagerServerUtility.ReceivedUpdateInformation
  fullName: Funique.Manager.NetworkManagerServerUtility.ReceivedUpdateInformation
- uid: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String,System.String[])
  commentId: M:Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String,System.String[])
  parent: Funique.Network.INetworkServerUtility
  isExternal: true
  name: ReceivedUpdateInformation(String, String[])
  nameWithType: INetworkServerUtility.ReceivedUpdateInformation(String, String[])
  fullName: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String, System.String[])
  nameWithType.vb: INetworkServerUtility.ReceivedUpdateInformation(String, String())
  fullName.vb: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String, System.String())
  name.vb: ReceivedUpdateInformation(String, String())
  spec.csharp:
  - uid: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String,System.String[])
    name: ReceivedUpdateInformation
    nameWithType: INetworkServerUtility.ReceivedUpdateInformation
    fullName: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String,System.String[])
    name: ReceivedUpdateInformation
    nameWithType: INetworkServerUtility.ReceivedUpdateInformation
    fullName: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String,System.String[],System.Boolean)
  commentId: M:Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String,System.String[],System.Boolean)
  parent: Funique.Network.INetworkServerUtility
  isExternal: true
  name: ReceivedUpdateInformation(String, String[], Boolean)
  nameWithType: INetworkServerUtility.ReceivedUpdateInformation(String, String[], Boolean)
  fullName: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String, System.String[], System.Boolean)
  nameWithType.vb: INetworkServerUtility.ReceivedUpdateInformation(String, String(), Boolean)
  fullName.vb: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String, System.String(), System.Boolean)
  name.vb: ReceivedUpdateInformation(String, String(), Boolean)
  spec.csharp:
  - uid: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String,System.String[],System.Boolean)
    name: ReceivedUpdateInformation
    nameWithType: INetworkServerUtility.ReceivedUpdateInformation
    fullName: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation(System.String,System.String[],System.Boolean)
    name: ReceivedUpdateInformation
    nameWithType: INetworkServerUtility.ReceivedUpdateInformation
    fullName: Funique.Network.INetworkServerUtility.ReceivedUpdateInformation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Funique.Manager.NetworkManagerServerUtility.AnalysisUpdateInformation*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.AnalysisUpdateInformation
  name: AnalysisUpdateInformation
  nameWithType: NetworkManagerServerUtility.AnalysisUpdateInformation
  fullName: Funique.Manager.NetworkManagerServerUtility.AnalysisUpdateInformation
- uid: Funique.Manager.NetworkManagerServerUtility.CleanPlayer*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.CleanPlayer
  name: CleanPlayer
  nameWithType: NetworkManagerServerUtility.CleanPlayer
  fullName: Funique.Manager.NetworkManagerServerUtility.CleanPlayer
- uid: Funique.Network.INetworkServerUtility.CleanPlayer
  commentId: M:Funique.Network.INetworkServerUtility.CleanPlayer
  parent: Funique.Network.INetworkServerUtility
  name: CleanPlayer()
  nameWithType: INetworkServerUtility.CleanPlayer()
  fullName: Funique.Network.INetworkServerUtility.CleanPlayer()
  spec.csharp:
  - uid: Funique.Network.INetworkServerUtility.CleanPlayer
    name: CleanPlayer
    nameWithType: INetworkServerUtility.CleanPlayer
    fullName: Funique.Network.INetworkServerUtility.CleanPlayer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkServerUtility.CleanPlayer
    name: CleanPlayer
    nameWithType: INetworkServerUtility.CleanPlayer
    fullName: Funique.Network.INetworkServerUtility.CleanPlayer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.IsNewWatchdog*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.IsNewWatchdog
  name: IsNewWatchdog
  nameWithType: NetworkManagerServerUtility.IsNewWatchdog
  fullName: Funique.Manager.NetworkManagerServerUtility.IsNewWatchdog
- uid: Funique.Network.INetworkServerUtility.IsNewWatchdog(System.String)
  commentId: M:Funique.Network.INetworkServerUtility.IsNewWatchdog(System.String)
  parent: Funique.Network.INetworkServerUtility
  isExternal: true
  name: IsNewWatchdog(String)
  nameWithType: INetworkServerUtility.IsNewWatchdog(String)
  fullName: Funique.Network.INetworkServerUtility.IsNewWatchdog(System.String)
  spec.csharp:
  - uid: Funique.Network.INetworkServerUtility.IsNewWatchdog(System.String)
    name: IsNewWatchdog
    nameWithType: INetworkServerUtility.IsNewWatchdog
    fullName: Funique.Network.INetworkServerUtility.IsNewWatchdog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkServerUtility.IsNewWatchdog(System.String)
    name: IsNewWatchdog
    nameWithType: INetworkServerUtility.IsNewWatchdog
    fullName: Funique.Network.INetworkServerUtility.IsNewWatchdog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.IsNewAddress*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.IsNewAddress
  name: IsNewAddress
  nameWithType: NetworkManagerServerUtility.IsNewAddress
  fullName: Funique.Manager.NetworkManagerServerUtility.IsNewAddress
- uid: Funique.Network.INetworkServerUtility.IsNewAddress(System.String)
  commentId: M:Funique.Network.INetworkServerUtility.IsNewAddress(System.String)
  parent: Funique.Network.INetworkServerUtility
  isExternal: true
  name: IsNewAddress(String)
  nameWithType: INetworkServerUtility.IsNewAddress(String)
  fullName: Funique.Network.INetworkServerUtility.IsNewAddress(System.String)
  spec.csharp:
  - uid: Funique.Network.INetworkServerUtility.IsNewAddress(System.String)
    name: IsNewAddress
    nameWithType: INetworkServerUtility.IsNewAddress
    fullName: Funique.Network.INetworkServerUtility.IsNewAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkServerUtility.IsNewAddress(System.String)
    name: IsNewAddress
    nameWithType: INetworkServerUtility.IsNewAddress
    fullName: Funique.Network.INetworkServerUtility.IsNewAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.IsNewPeer*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.IsNewPeer
  name: IsNewPeer
  nameWithType: NetworkManagerServerUtility.IsNewPeer
  fullName: Funique.Manager.NetworkManagerServerUtility.IsNewPeer
- uid: Funique.Network.INetworkServerUtility.IsNewPeer(System.String)
  commentId: M:Funique.Network.INetworkServerUtility.IsNewPeer(System.String)
  parent: Funique.Network.INetworkServerUtility
  isExternal: true
  name: IsNewPeer(String)
  nameWithType: INetworkServerUtility.IsNewPeer(String)
  fullName: Funique.Network.INetworkServerUtility.IsNewPeer(System.String)
  spec.csharp:
  - uid: Funique.Network.INetworkServerUtility.IsNewPeer(System.String)
    name: IsNewPeer
    nameWithType: INetworkServerUtility.IsNewPeer
    fullName: Funique.Network.INetworkServerUtility.IsNewPeer
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkServerUtility.IsNewPeer(System.String)
    name: IsNewPeer
    nameWithType: INetworkServerUtility.IsNewPeer
    fullName: Funique.Network.INetworkServerUtility.IsNewPeer
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.IsPeerVaild*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.IsPeerVaild
  name: IsPeerVaild
  nameWithType: NetworkManagerServerUtility.IsPeerVaild
  fullName: Funique.Manager.NetworkManagerServerUtility.IsPeerVaild
- uid: Funique.Network.INetworkServerUtility.IsPeerVaild(System.String)
  commentId: M:Funique.Network.INetworkServerUtility.IsPeerVaild(System.String)
  parent: Funique.Network.INetworkServerUtility
  isExternal: true
  name: IsPeerVaild(String)
  nameWithType: INetworkServerUtility.IsPeerVaild(String)
  fullName: Funique.Network.INetworkServerUtility.IsPeerVaild(System.String)
  spec.csharp:
  - uid: Funique.Network.INetworkServerUtility.IsPeerVaild(System.String)
    name: IsPeerVaild
    nameWithType: INetworkServerUtility.IsPeerVaild
    fullName: Funique.Network.INetworkServerUtility.IsPeerVaild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkServerUtility.IsPeerVaild(System.String)
    name: IsPeerVaild
    nameWithType: INetworkServerUtility.IsPeerVaild
    fullName: Funique.Network.INetworkServerUtility.IsPeerVaild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.GetUIBinding*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.GetUIBinding
  name: GetUIBinding
  nameWithType: NetworkManagerServerUtility.GetUIBinding
  fullName: Funique.Manager.NetworkManagerServerUtility.GetUIBinding
- uid: Funique.Network.INetworkServerUtility.GetUIBinding(System.String)
  commentId: M:Funique.Network.INetworkServerUtility.GetUIBinding(System.String)
  parent: Funique.Network.INetworkServerUtility
  isExternal: true
  name: GetUIBinding(String)
  nameWithType: INetworkServerUtility.GetUIBinding(String)
  fullName: Funique.Network.INetworkServerUtility.GetUIBinding(System.String)
  spec.csharp:
  - uid: Funique.Network.INetworkServerUtility.GetUIBinding(System.String)
    name: GetUIBinding
    nameWithType: INetworkServerUtility.GetUIBinding
    fullName: Funique.Network.INetworkServerUtility.GetUIBinding
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkServerUtility.GetUIBinding(System.String)
    name: GetUIBinding
    nameWithType: INetworkServerUtility.GetUIBinding
    fullName: Funique.Network.INetworkServerUtility.GetUIBinding
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEngine.GameObject
  commentId: T:UnityEngine.GameObject
  parent: UnityEngine
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: UnityEngine.GameObject
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Funique.Manager.NetworkManagerServerUtility.UpdateVolume*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.UpdateVolume
  name: UpdateVolume
  nameWithType: NetworkManagerServerUtility.UpdateVolume
  fullName: Funique.Manager.NetworkManagerServerUtility.UpdateVolume
- uid: Funique.Network.INetworkServerUtility.UpdateVolume(System.String)
  commentId: M:Funique.Network.INetworkServerUtility.UpdateVolume(System.String)
  parent: Funique.Network.INetworkServerUtility
  isExternal: true
  name: UpdateVolume(String)
  nameWithType: INetworkServerUtility.UpdateVolume(String)
  fullName: Funique.Network.INetworkServerUtility.UpdateVolume(System.String)
  spec.csharp:
  - uid: Funique.Network.INetworkServerUtility.UpdateVolume(System.String)
    name: UpdateVolume
    nameWithType: INetworkServerUtility.UpdateVolume
    fullName: Funique.Network.INetworkServerUtility.UpdateVolume
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkServerUtility.UpdateVolume(System.String)
    name: UpdateVolume
    nameWithType: INetworkServerUtility.UpdateVolume
    fullName: Funique.Network.INetworkServerUtility.UpdateVolume
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.WatchDogInit*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.WatchDogInit
  name: WatchDogInit
  nameWithType: NetworkManagerServerUtility.WatchDogInit
  fullName: Funique.Manager.NetworkManagerServerUtility.WatchDogInit
- uid: Funique.Network.INetworkOSC.WatchDogInit
  commentId: M:Funique.Network.INetworkOSC.WatchDogInit
  parent: Funique.Network.INetworkOSC
  name: WatchDogInit()
  nameWithType: INetworkOSC.WatchDogInit()
  fullName: Funique.Network.INetworkOSC.WatchDogInit()
  spec.csharp:
  - uid: Funique.Network.INetworkOSC.WatchDogInit
    name: WatchDogInit
    nameWithType: INetworkOSC.WatchDogInit
    fullName: Funique.Network.INetworkOSC.WatchDogInit
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkOSC.WatchDogInit
    name: WatchDogInit
    nameWithType: INetworkOSC.WatchDogInit
    fullName: Funique.Network.INetworkOSC.WatchDogInit
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.CreateWatchDog*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.CreateWatchDog
  name: CreateWatchDog
  nameWithType: NetworkManagerServerUtility.CreateWatchDog
  fullName: Funique.Manager.NetworkManagerServerUtility.CreateWatchDog
- uid: Funique.Network.INetworkOSC.CreateWatchDog(System.String,System.String,System.Int32)
  commentId: M:Funique.Network.INetworkOSC.CreateWatchDog(System.String,System.String,System.Int32)
  parent: Funique.Network.INetworkOSC
  isExternal: true
  name: CreateWatchDog(String, String, Int32)
  nameWithType: INetworkOSC.CreateWatchDog(String, String, Int32)
  fullName: Funique.Network.INetworkOSC.CreateWatchDog(System.String, System.String, System.Int32)
  spec.csharp:
  - uid: Funique.Network.INetworkOSC.CreateWatchDog(System.String,System.String,System.Int32)
    name: CreateWatchDog
    nameWithType: INetworkOSC.CreateWatchDog
    fullName: Funique.Network.INetworkOSC.CreateWatchDog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkOSC.CreateWatchDog(System.String,System.String,System.Int32)
    name: CreateWatchDog
    nameWithType: INetworkOSC.CreateWatchDog
    fullName: Funique.Network.INetworkOSC.CreateWatchDog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.ModifyWatchDog*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.ModifyWatchDog
  name: ModifyWatchDog
  nameWithType: NetworkManagerServerUtility.ModifyWatchDog
  fullName: Funique.Manager.NetworkManagerServerUtility.ModifyWatchDog
- uid: Funique.Network.INetworkOSC.ModifyWatchDog(System.String,System.String,System.String)
  commentId: M:Funique.Network.INetworkOSC.ModifyWatchDog(System.String,System.String,System.String)
  parent: Funique.Network.INetworkOSC
  isExternal: true
  name: ModifyWatchDog(String, String, String)
  nameWithType: INetworkOSC.ModifyWatchDog(String, String, String)
  fullName: Funique.Network.INetworkOSC.ModifyWatchDog(System.String, System.String, System.String)
  spec.csharp:
  - uid: Funique.Network.INetworkOSC.ModifyWatchDog(System.String,System.String,System.String)
    name: ModifyWatchDog
    nameWithType: INetworkOSC.ModifyWatchDog
    fullName: Funique.Network.INetworkOSC.ModifyWatchDog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkOSC.ModifyWatchDog(System.String,System.String,System.String)
    name: ModifyWatchDog
    nameWithType: INetworkOSC.ModifyWatchDog
    fullName: Funique.Network.INetworkOSC.ModifyWatchDog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Network.INetworkOSC.ModifyWatchDog(System.String,System.String,System.String,System.Int32)
  commentId: M:Funique.Network.INetworkOSC.ModifyWatchDog(System.String,System.String,System.String,System.Int32)
  parent: Funique.Network.INetworkOSC
  isExternal: true
  name: ModifyWatchDog(String, String, String, Int32)
  nameWithType: INetworkOSC.ModifyWatchDog(String, String, String, Int32)
  fullName: Funique.Network.INetworkOSC.ModifyWatchDog(System.String, System.String, System.String, System.Int32)
  spec.csharp:
  - uid: Funique.Network.INetworkOSC.ModifyWatchDog(System.String,System.String,System.String,System.Int32)
    name: ModifyWatchDog
    nameWithType: INetworkOSC.ModifyWatchDog
    fullName: Funique.Network.INetworkOSC.ModifyWatchDog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkOSC.ModifyWatchDog(System.String,System.String,System.String,System.Int32)
    name: ModifyWatchDog
    nameWithType: INetworkOSC.ModifyWatchDog
    fullName: Funique.Network.INetworkOSC.ModifyWatchDog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.RemoveWatchDog*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.RemoveWatchDog
  name: RemoveWatchDog
  nameWithType: NetworkManagerServerUtility.RemoveWatchDog
  fullName: Funique.Manager.NetworkManagerServerUtility.RemoveWatchDog
- uid: Funique.Network.INetworkOSC.RemoveWatchDog(System.String)
  commentId: M:Funique.Network.INetworkOSC.RemoveWatchDog(System.String)
  parent: Funique.Network.INetworkOSC
  isExternal: true
  name: RemoveWatchDog(String)
  nameWithType: INetworkOSC.RemoveWatchDog(String)
  fullName: Funique.Network.INetworkOSC.RemoveWatchDog(System.String)
  spec.csharp:
  - uid: Funique.Network.INetworkOSC.RemoveWatchDog(System.String)
    name: RemoveWatchDog
    nameWithType: INetworkOSC.RemoveWatchDog
    fullName: Funique.Network.INetworkOSC.RemoveWatchDog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkOSC.RemoveWatchDog(System.String)
    name: RemoveWatchDog
    nameWithType: INetworkOSC.RemoveWatchDog
    fullName: Funique.Network.INetworkOSC.RemoveWatchDog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.CleanWatchDog*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.CleanWatchDog
  name: CleanWatchDog
  nameWithType: NetworkManagerServerUtility.CleanWatchDog
  fullName: Funique.Manager.NetworkManagerServerUtility.CleanWatchDog
- uid: Funique.Network.INetworkOSC.CleanWatchDog
  commentId: M:Funique.Network.INetworkOSC.CleanWatchDog
  parent: Funique.Network.INetworkOSC
  name: CleanWatchDog()
  nameWithType: INetworkOSC.CleanWatchDog()
  fullName: Funique.Network.INetworkOSC.CleanWatchDog()
  spec.csharp:
  - uid: Funique.Network.INetworkOSC.CleanWatchDog
    name: CleanWatchDog
    nameWithType: INetworkOSC.CleanWatchDog
    fullName: Funique.Network.INetworkOSC.CleanWatchDog
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkOSC.CleanWatchDog
    name: CleanWatchDog
    nameWithType: INetworkOSC.CleanWatchDog
    fullName: Funique.Network.INetworkOSC.CleanWatchDog
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs
  name: SendMsgToPlayerDogs
  nameWithType: NetworkManagerServerUtility.SendMsgToPlayerDogs
  fullName: Funique.Manager.NetworkManagerServerUtility.SendMsgToPlayerDogs
- uid: Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.String[],System.String)
  commentId: M:Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.String[],System.String)
  parent: Funique.Network.INetworkOSC
  isExternal: true
  name: SendMsgToPlayerDogs(String[], String)
  nameWithType: INetworkOSC.SendMsgToPlayerDogs(String[], String)
  fullName: Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.String[], System.String)
  nameWithType.vb: INetworkOSC.SendMsgToPlayerDogs(String(), String)
  fullName.vb: Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.String(), System.String)
  name.vb: SendMsgToPlayerDogs(String(), String)
  spec.csharp:
  - uid: Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.String[],System.String)
    name: SendMsgToPlayerDogs
    nameWithType: INetworkOSC.SendMsgToPlayerDogs
    fullName: Funique.Network.INetworkOSC.SendMsgToPlayerDogs
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.String[],System.String)
    name: SendMsgToPlayerDogs
    nameWithType: INetworkOSC.SendMsgToPlayerDogs
    fullName: Funique.Network.INetworkOSC.SendMsgToPlayerDogs
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.Collections.Generic.List{System.String},System.String)
  commentId: M:Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.Collections.Generic.List{System.String},System.String)
  parent: Funique.Network.INetworkOSC
  isExternal: true
  name: SendMsgToPlayerDogs(List<String>, String)
  nameWithType: INetworkOSC.SendMsgToPlayerDogs(List<String>, String)
  fullName: Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.Collections.Generic.List<System.String>, System.String)
  nameWithType.vb: INetworkOSC.SendMsgToPlayerDogs(List(Of String), String)
  fullName.vb: Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.Collections.Generic.List(Of System.String), System.String)
  name.vb: SendMsgToPlayerDogs(List(Of String), String)
  spec.csharp:
  - uid: Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.Collections.Generic.List{System.String},System.String)
    name: SendMsgToPlayerDogs
    nameWithType: INetworkOSC.SendMsgToPlayerDogs
    fullName: Funique.Network.INetworkOSC.SendMsgToPlayerDogs
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkOSC.SendMsgToPlayerDogs(System.Collections.Generic.List{System.String},System.String)
    name: SendMsgToPlayerDogs
    nameWithType: INetworkOSC.SendMsgToPlayerDogs
    fullName: Funique.Network.INetworkOSC.SendMsgToPlayerDogs
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.SendWatchDog*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.SendWatchDog
  name: SendWatchDog
  nameWithType: NetworkManagerServerUtility.SendWatchDog
  fullName: Funique.Manager.NetworkManagerServerUtility.SendWatchDog
- uid: Funique.Network.INetworkOSC.SendWatchDog(System.String,System.String)
  commentId: M:Funique.Network.INetworkOSC.SendWatchDog(System.String,System.String)
  parent: Funique.Network.INetworkOSC
  isExternal: true
  name: SendWatchDog(String, String)
  nameWithType: INetworkOSC.SendWatchDog(String, String)
  fullName: Funique.Network.INetworkOSC.SendWatchDog(System.String, System.String)
  spec.csharp:
  - uid: Funique.Network.INetworkOSC.SendWatchDog(System.String,System.String)
    name: SendWatchDog
    nameWithType: INetworkOSC.SendWatchDog
    fullName: Funique.Network.INetworkOSC.SendWatchDog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkOSC.SendWatchDog(System.String,System.String)
    name: SendWatchDog
    nameWithType: INetworkOSC.SendWatchDog
    fullName: Funique.Network.INetworkOSC.SendWatchDog
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.NetworkManagerServerUtility.SendToAllDogs*
  commentId: Overload:Funique.Manager.NetworkManagerServerUtility.SendToAllDogs
  name: SendToAllDogs
  nameWithType: NetworkManagerServerUtility.SendToAllDogs
  fullName: Funique.Manager.NetworkManagerServerUtility.SendToAllDogs
- uid: Funique.Network.INetworkOSC.SendToAllDogs(System.String)
  commentId: M:Funique.Network.INetworkOSC.SendToAllDogs(System.String)
  parent: Funique.Network.INetworkOSC
  isExternal: true
  name: SendToAllDogs(String)
  nameWithType: INetworkOSC.SendToAllDogs(String)
  fullName: Funique.Network.INetworkOSC.SendToAllDogs(System.String)
  spec.csharp:
  - uid: Funique.Network.INetworkOSC.SendToAllDogs(System.String)
    name: SendToAllDogs
    nameWithType: INetworkOSC.SendToAllDogs
    fullName: Funique.Network.INetworkOSC.SendToAllDogs
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Network.INetworkOSC.SendToAllDogs(System.String)
    name: SendToAllDogs
    nameWithType: INetworkOSC.SendToAllDogs
    fullName: Funique.Network.INetworkOSC.SendToAllDogs
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
