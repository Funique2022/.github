### YamlMime:ManagedReference
items:
- uid: NaughtyAttributes.DropdownList`1
  commentId: T:NaughtyAttributes.DropdownList`1
  id: DropdownList`1
  parent: NaughtyAttributes
  children:
  - NaughtyAttributes.DropdownList`1.#ctor
  - NaughtyAttributes.DropdownList`1.Add(System.String,`0)
  - NaughtyAttributes.DropdownList`1.GetEnumerator
  - NaughtyAttributes.DropdownList`1.op_Explicit(NaughtyAttributes.DropdownList{`0})~NaughtyAttributes.DropdownList{System.Object}
  - NaughtyAttributes.DropdownList`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: DropdownList<T>
  nameWithType: DropdownList<T>
  fullName: NaughtyAttributes.DropdownList<T>
  type: Class
  source:
    remote:
      path: Attribute/DrawerAttributes/DropdownAttribute.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: DropdownList
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Attribute/DrawerAttributes/DropdownAttribute.cs
    startLine: 21
  assemblies:
  - Funique.Core
  namespace: NaughtyAttributes
  syntax:
    content: 'public class DropdownList<T> : IDropdownList, IEnumerable<KeyValuePair<string, object>>, IEnumerable'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class DropdownList(Of T)

          Implements IDropdownList, IEnumerable(Of KeyValuePair(Of String, Object)), IEnumerable
  inheritance:
  - System.Object
  implements:
  - NaughtyAttributes.IDropdownList
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  - System.Collections.IEnumerable
  nameWithType.vb: DropdownList(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NaughtyAttributes.DropdownList(Of T)
  name.vb: DropdownList(Of T)
- uid: NaughtyAttributes.DropdownList`1.#ctor
  commentId: M:NaughtyAttributes.DropdownList`1.#ctor
  id: '#ctor'
  parent: NaughtyAttributes.DropdownList`1
  langs:
  - csharp
  - vb
  name: DropdownList()
  nameWithType: DropdownList<T>.DropdownList()
  fullName: NaughtyAttributes.DropdownList<T>.DropdownList()
  type: Constructor
  source:
    remote:
      path: Attribute/DrawerAttributes/DropdownAttribute.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: .ctor
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Attribute/DrawerAttributes/DropdownAttribute.cs
    startLine: 25
  assemblies:
  - Funique.Core
  namespace: NaughtyAttributes
  syntax:
    content: public DropdownList()
    content.vb: Public Sub New
  overload: NaughtyAttributes.DropdownList`1.#ctor*
  nameWithType.vb: DropdownList(Of T).DropdownList()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NaughtyAttributes.DropdownList(Of T).DropdownList()
- uid: NaughtyAttributes.DropdownList`1.Add(System.String,`0)
  commentId: M:NaughtyAttributes.DropdownList`1.Add(System.String,`0)
  id: Add(System.String,`0)
  parent: NaughtyAttributes.DropdownList`1
  langs:
  - csharp
  - vb
  name: Add(String, T)
  nameWithType: DropdownList<T>.Add(String, T)
  fullName: NaughtyAttributes.DropdownList<T>.Add(System.String, T)
  type: Method
  source:
    remote:
      path: Attribute/DrawerAttributes/DropdownAttribute.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: Add
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Attribute/DrawerAttributes/DropdownAttribute.cs
    startLine: 30
  assemblies:
  - Funique.Core
  namespace: NaughtyAttributes
  syntax:
    content: public void Add(string displayName, T value)
    parameters:
    - id: displayName
      type: System.String
    - id: value
      type: '{T}'
    content.vb: Public Sub Add(displayName As String, value As T)
  overload: NaughtyAttributes.DropdownList`1.Add*
  nameWithType.vb: DropdownList(Of T).Add(String, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NaughtyAttributes.DropdownList(Of T).Add(System.String, T)
- uid: NaughtyAttributes.DropdownList`1.GetEnumerator
  commentId: M:NaughtyAttributes.DropdownList`1.GetEnumerator
  id: GetEnumerator
  parent: NaughtyAttributes.DropdownList`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: DropdownList<T>.GetEnumerator()
  fullName: NaughtyAttributes.DropdownList<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Attribute/DrawerAttributes/DropdownAttribute.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: GetEnumerator
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Attribute/DrawerAttributes/DropdownAttribute.cs
    startLine: 35
  assemblies:
  - Funique.Core
  namespace: NaughtyAttributes
  syntax:
    content: public IEnumerator<KeyValuePair<string, object>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of String, Object))
  overload: NaughtyAttributes.DropdownList`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  nameWithType.vb: DropdownList(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NaughtyAttributes.DropdownList(Of T).GetEnumerator()
- uid: NaughtyAttributes.DropdownList`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NaughtyAttributes.DropdownList`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: NaughtyAttributes.DropdownList`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: DropdownList<T>.IEnumerable.GetEnumerator()
  fullName: NaughtyAttributes.DropdownList<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Attribute/DrawerAttributes/DropdownAttribute.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Attribute/DrawerAttributes/DropdownAttribute.cs
    startLine: 40
  assemblies:
  - Funique.Core
  namespace: NaughtyAttributes
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: NaughtyAttributes.DropdownList`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DropdownList(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: NaughtyAttributes.DropdownList(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: NaughtyAttributes.DropdownList`1.op_Explicit(NaughtyAttributes.DropdownList{`0})~NaughtyAttributes.DropdownList{System.Object}
  commentId: M:NaughtyAttributes.DropdownList`1.op_Explicit(NaughtyAttributes.DropdownList{`0})~NaughtyAttributes.DropdownList{System.Object}
  id: op_Explicit(NaughtyAttributes.DropdownList{`0})~NaughtyAttributes.DropdownList{System.Object}
  parent: NaughtyAttributes.DropdownList`1
  langs:
  - csharp
  - vb
  name: Explicit(DropdownList<T> to DropdownList<Object>)
  nameWithType: DropdownList<T>.Explicit(DropdownList<T> to DropdownList<Object>)
  fullName: NaughtyAttributes.DropdownList<T>.Explicit(NaughtyAttributes.DropdownList<T> to NaughtyAttributes.DropdownList<System.Object>)
  type: Operator
  source:
    remote:
      path: Attribute/DrawerAttributes/DropdownAttribute.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: op_Explicit
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Attribute/DrawerAttributes/DropdownAttribute.cs
    startLine: 45
  assemblies:
  - Funique.Core
  namespace: NaughtyAttributes
  syntax:
    content: public static explicit operator DropdownList<object>(DropdownList<T> target)
    parameters:
    - id: target
      type: NaughtyAttributes.DropdownList`1
    return:
      type: NaughtyAttributes.DropdownList{System.Object}
    content.vb: Public Shared Narrowing Operator CType(target As DropdownList(Of T)) As DropdownList(Of Object)
  overload: NaughtyAttributes.DropdownList`1.op_Explicit*
  nameWithType.vb: DropdownList(Of T).Narrowing(DropdownList(Of T) to DropdownList(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NaughtyAttributes.DropdownList(Of T).Narrowing(NaughtyAttributes.DropdownList(Of T) to NaughtyAttributes.DropdownList(Of System.Object))
  name.vb: Narrowing(DropdownList(Of T) to DropdownList(Of Object))
references:
- uid: NaughtyAttributes
  commentId: N:NaughtyAttributes
  name: NaughtyAttributes
  nameWithType: NaughtyAttributes
  fullName: NaughtyAttributes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NaughtyAttributes.IDropdownList
  commentId: T:NaughtyAttributes.IDropdownList
  parent: NaughtyAttributes
  name: IDropdownList
  nameWithType: IDropdownList
  fullName: NaughtyAttributes.IDropdownList
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, Object>>
  nameWithType: IEnumerable<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NaughtyAttributes.DropdownList`1.#ctor*
  commentId: Overload:NaughtyAttributes.DropdownList`1.#ctor
  name: DropdownList
  nameWithType: DropdownList<T>.DropdownList
  fullName: NaughtyAttributes.DropdownList<T>.DropdownList
  nameWithType.vb: DropdownList(Of T).DropdownList
  fullName.vb: NaughtyAttributes.DropdownList(Of T).DropdownList
- uid: NaughtyAttributes.DropdownList`1.Add*
  commentId: Overload:NaughtyAttributes.DropdownList`1.Add
  name: Add
  nameWithType: DropdownList<T>.Add
  fullName: NaughtyAttributes.DropdownList<T>.Add
  nameWithType.vb: DropdownList(Of T).Add
  fullName.vb: NaughtyAttributes.DropdownList(Of T).Add
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NaughtyAttributes.DropdownList`1.GetEnumerator*
  commentId: Overload:NaughtyAttributes.DropdownList`1.GetEnumerator
  name: GetEnumerator
  nameWithType: DropdownList<T>.GetEnumerator
  fullName: NaughtyAttributes.DropdownList<T>.GetEnumerator
  nameWithType.vb: DropdownList(Of T).GetEnumerator
  fullName.vb: NaughtyAttributes.DropdownList(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<String, Object>>
  nameWithType: IEnumerator<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerator(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NaughtyAttributes.DropdownList`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:NaughtyAttributes.DropdownList`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: DropdownList<T>.IEnumerable.GetEnumerator
  fullName: NaughtyAttributes.DropdownList<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DropdownList(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: NaughtyAttributes.DropdownList(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: NaughtyAttributes.DropdownList`1.op_Explicit*
  commentId: Overload:NaughtyAttributes.DropdownList`1.op_Explicit
  name: Explicit
  nameWithType: DropdownList<T>.Explicit
  fullName: NaughtyAttributes.DropdownList<T>.Explicit
  nameWithType.vb: DropdownList(Of T).Narrowing
  fullName.vb: NaughtyAttributes.DropdownList(Of T).Narrowing
  name.vb: Narrowing
- uid: NaughtyAttributes.DropdownList`1
  commentId: T:NaughtyAttributes.DropdownList`1
  parent: NaughtyAttributes
  name: DropdownList<T>
  nameWithType: DropdownList<T>
  fullName: NaughtyAttributes.DropdownList<T>
  nameWithType.vb: DropdownList(Of T)
  fullName.vb: NaughtyAttributes.DropdownList(Of T)
  name.vb: DropdownList(Of T)
  spec.csharp:
  - uid: NaughtyAttributes.DropdownList`1
    name: DropdownList
    nameWithType: DropdownList
    fullName: NaughtyAttributes.DropdownList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NaughtyAttributes.DropdownList`1
    name: DropdownList
    nameWithType: DropdownList
    fullName: NaughtyAttributes.DropdownList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NaughtyAttributes.DropdownList{System.Object}
  commentId: T:NaughtyAttributes.DropdownList{System.Object}
  parent: NaughtyAttributes
  definition: NaughtyAttributes.DropdownList`1
  name: DropdownList<Object>
  nameWithType: DropdownList<Object>
  fullName: NaughtyAttributes.DropdownList<System.Object>
  nameWithType.vb: DropdownList(Of Object)
  fullName.vb: NaughtyAttributes.DropdownList(Of System.Object)
  name.vb: DropdownList(Of Object)
  spec.csharp:
  - uid: NaughtyAttributes.DropdownList`1
    name: DropdownList
    nameWithType: DropdownList
    fullName: NaughtyAttributes.DropdownList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NaughtyAttributes.DropdownList`1
    name: DropdownList
    nameWithType: DropdownList
    fullName: NaughtyAttributes.DropdownList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
