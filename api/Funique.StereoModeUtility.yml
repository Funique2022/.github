### YamlMime:ManagedReference
items:
- uid: Funique.StereoModeUtility
  commentId: T:Funique.StereoModeUtility
  id: StereoModeUtility
  parent: Funique
  children:
  - Funique.StereoModeUtility.AllStereoType
  - Funique.StereoModeUtility.CheckinType(System.String)
  - Funique.StereoModeUtility.ReverseSearch(System.String)
  - Funique.StereoModeUtility.ReverseSearchPair(System.String)
  - Funique.StereoModeUtility.StereoModeDict
  langs:
  - csharp
  - vb
  name: StereoModeUtility
  nameWithType: StereoModeUtility
  fullName: Funique.StereoModeUtility
  type: Class
  source:
    remote:
      path: Enum/StereoMode.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: StereoModeUtility
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Enum/StereoMode.cs
    startLine: 22
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public static class StereoModeUtility
    content.vb: Public Module StereoModeUtility
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Funique.StereoModeUtility.StereoModeDict
  commentId: F:Funique.StereoModeUtility.StereoModeDict
  id: StereoModeDict
  parent: Funique.StereoModeUtility
  langs:
  - csharp
  - vb
  name: StereoModeDict
  nameWithType: StereoModeUtility.StereoModeDict
  fullName: Funique.StereoModeUtility.StereoModeDict
  type: Field
  source:
    remote:
      path: Enum/StereoMode.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: StereoModeDict
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Enum/StereoMode.cs
    startLine: 24
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public static Dictionary<StereoMode, string> StereoModeDict
    return:
      type: System.Collections.Generic.Dictionary{Funique.StereoMode,System.String}
    content.vb: Public Shared StereoModeDict As Dictionary(Of StereoMode, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Funique.StereoModeUtility.AllStereoType
  commentId: P:Funique.StereoModeUtility.AllStereoType
  id: AllStereoType
  parent: Funique.StereoModeUtility
  langs:
  - csharp
  - vb
  name: AllStereoType
  nameWithType: StereoModeUtility.AllStereoType
  fullName: Funique.StereoModeUtility.AllStereoType
  type: Property
  source:
    remote:
      path: Enum/StereoMode.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: AllStereoType
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Enum/StereoMode.cs
    startLine: 41
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public static string[] AllStereoType { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Shared ReadOnly Property AllStereoType As String()
  overload: Funique.StereoModeUtility.AllStereoType*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Funique.StereoModeUtility.CheckinType(System.String)
  commentId: M:Funique.StereoModeUtility.CheckinType(System.String)
  id: CheckinType(System.String)
  parent: Funique.StereoModeUtility
  langs:
  - csharp
  - vb
  name: CheckinType(String)
  nameWithType: StereoModeUtility.CheckinType(String)
  fullName: Funique.StereoModeUtility.CheckinType(System.String)
  type: Method
  source:
    remote:
      path: Enum/StereoMode.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: CheckinType
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Enum/StereoMode.cs
    startLine: 42
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public static bool CheckinType(string mode)
    parameters:
    - id: mode
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function CheckinType(mode As String) As Boolean
  overload: Funique.StereoModeUtility.CheckinType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Funique.StereoModeUtility.ReverseSearch(System.String)
  commentId: M:Funique.StereoModeUtility.ReverseSearch(System.String)
  id: ReverseSearch(System.String)
  parent: Funique.StereoModeUtility
  langs:
  - csharp
  - vb
  name: ReverseSearch(String)
  nameWithType: StereoModeUtility.ReverseSearch(String)
  fullName: Funique.StereoModeUtility.ReverseSearch(System.String)
  type: Method
  source:
    remote:
      path: Enum/StereoMode.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: ReverseSearch
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Enum/StereoMode.cs
    startLine: 43
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public static StereoMode ReverseSearch(string mode)
    parameters:
    - id: mode
      type: System.String
    return:
      type: Funique.StereoMode
    content.vb: Public Shared Function ReverseSearch(mode As String) As StereoMode
  overload: Funique.StereoModeUtility.ReverseSearch*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Funique.StereoModeUtility.ReverseSearchPair(System.String)
  commentId: M:Funique.StereoModeUtility.ReverseSearchPair(System.String)
  id: ReverseSearchPair(System.String)
  parent: Funique.StereoModeUtility
  langs:
  - csharp
  - vb
  name: ReverseSearchPair(String)
  nameWithType: StereoModeUtility.ReverseSearchPair(String)
  fullName: Funique.StereoModeUtility.ReverseSearchPair(System.String)
  type: Method
  source:
    remote:
      path: Enum/StereoMode.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: ReverseSearchPair
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Enum/StereoMode.cs
    startLine: 55
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public static KeyValuePair<StereoMode, string> ReverseSearchPair(string mode)
    parameters:
    - id: mode
      type: System.String
    return:
      type: System.Collections.Generic.KeyValuePair{Funique.StereoMode,System.String}
    content.vb: Public Shared Function ReverseSearchPair(mode As String) As KeyValuePair(Of StereoMode, String)
  overload: Funique.StereoModeUtility.ReverseSearchPair*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Funique
  commentId: N:Funique
  name: Funique
  nameWithType: Funique
  fullName: Funique
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary{Funique.StereoMode,System.String}
  commentId: T:System.Collections.Generic.Dictionary{Funique.StereoMode,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<StereoMode, String>
  nameWithType: Dictionary<StereoMode, String>
  fullName: System.Collections.Generic.Dictionary<Funique.StereoMode, System.String>
  nameWithType.vb: Dictionary(Of StereoMode, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of Funique.StereoMode, System.String)
  name.vb: Dictionary(Of StereoMode, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Funique.StereoMode
    name: StereoMode
    nameWithType: StereoMode
    fullName: Funique.StereoMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Funique.StereoMode
    name: StereoMode
    nameWithType: StereoMode
    fullName: Funique.StereoMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Funique.StereoModeUtility.AllStereoType*
  commentId: Overload:Funique.StereoModeUtility.AllStereoType
  name: AllStereoType
  nameWithType: StereoModeUtility.AllStereoType
  fullName: Funique.StereoModeUtility.AllStereoType
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Funique.StereoModeUtility.CheckinType*
  commentId: Overload:Funique.StereoModeUtility.CheckinType
  name: CheckinType
  nameWithType: StereoModeUtility.CheckinType
  fullName: Funique.StereoModeUtility.CheckinType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Funique.StereoModeUtility.ReverseSearch*
  commentId: Overload:Funique.StereoModeUtility.ReverseSearch
  name: ReverseSearch
  nameWithType: StereoModeUtility.ReverseSearch
  fullName: Funique.StereoModeUtility.ReverseSearch
- uid: Funique.StereoMode
  commentId: T:Funique.StereoMode
  parent: Funique
  name: StereoMode
  nameWithType: StereoMode
  fullName: Funique.StereoMode
- uid: Funique.StereoModeUtility.ReverseSearchPair*
  commentId: Overload:Funique.StereoModeUtility.ReverseSearchPair
  name: ReverseSearchPair
  nameWithType: StereoModeUtility.ReverseSearchPair
  fullName: Funique.StereoModeUtility.ReverseSearchPair
- uid: System.Collections.Generic.KeyValuePair{Funique.StereoMode,System.String}
  commentId: T:System.Collections.Generic.KeyValuePair{Funique.StereoMode,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<StereoMode, String>
  nameWithType: KeyValuePair<StereoMode, String>
  fullName: System.Collections.Generic.KeyValuePair<Funique.StereoMode, System.String>
  nameWithType.vb: KeyValuePair(Of StereoMode, String)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of Funique.StereoMode, System.String)
  name.vb: KeyValuePair(Of StereoMode, String)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Funique.StereoMode
    name: StereoMode
    nameWithType: StereoMode
    fullName: Funique.StereoMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Funique.StereoMode
    name: StereoMode
    nameWithType: StereoMode
    fullName: Funique.StereoMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
