### YamlMime:ManagedReference
items:
- uid: Funique.Serialization`1
  commentId: T:Funique.Serialization`1
  id: Serialization`1
  parent: Funique
  children:
  - Funique.Serialization`1.#ctor(`0[])
  - Funique.Serialization`1.#ctor(System.Collections.Generic.List{`0})
  - Funique.Serialization`1.ToArray
  - Funique.Serialization`1.ToList
  langs:
  - csharp
  - vb
  name: Serialization<T>
  nameWithType: Serialization<T>
  fullName: Funique.Serialization<T>
  type: Class
  source:
    remote:
      path: Util/Serialization.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: Serialization
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Util/Serialization.cs
    startLine: 15
  assemblies:
  - Funique.Core
  namespace: Funique
  summary: "\nHelping serializating the array or list varaible <br />\n------------------------------------------------ <br />\n幫助序列化 陣列或列表 的資料型態\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class Serialization<T>
    typeParameters:
    - id: T
      description: Data type
    content.vb: >-
      <Serializable>

      Public Class Serialization(Of T)
  inheritance:
  - System.Object
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: Serialization(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Funique.Serialization(Of T)
  name.vb: Serialization(Of T)
- uid: Funique.Serialization`1.ToList
  commentId: M:Funique.Serialization`1.ToList
  id: ToList
  parent: Funique.Serialization`1
  langs:
  - csharp
  - vb
  name: ToList()
  nameWithType: Serialization<T>.ToList()
  fullName: Funique.Serialization<T>.ToList()
  type: Method
  source:
    remote:
      path: Util/Serialization.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: ToList
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Util/Serialization.cs
    startLine: 19
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public List<T> ToList()
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Function ToList As List(Of T)
  overload: Funique.Serialization`1.ToList*
  nameWithType.vb: Serialization(Of T).ToList()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Funique.Serialization(Of T).ToList()
- uid: Funique.Serialization`1.ToArray
  commentId: M:Funique.Serialization`1.ToArray
  id: ToArray
  parent: Funique.Serialization`1
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: Serialization<T>.ToArray()
  fullName: Funique.Serialization<T>.ToArray()
  type: Method
  source:
    remote:
      path: Util/Serialization.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: ToArray
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Util/Serialization.cs
    startLine: 20
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public T[] ToArray()
    return:
      type: '{T}[]'
    content.vb: Public Function ToArray As T()
  overload: Funique.Serialization`1.ToArray*
  nameWithType.vb: Serialization(Of T).ToArray()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Funique.Serialization(Of T).ToArray()
- uid: Funique.Serialization`1.#ctor(System.Collections.Generic.List{`0})
  commentId: M:Funique.Serialization`1.#ctor(System.Collections.Generic.List{`0})
  id: '#ctor(System.Collections.Generic.List{`0})'
  parent: Funique.Serialization`1
  langs:
  - csharp
  - vb
  name: Serialization(List<T>)
  nameWithType: Serialization<T>.Serialization(List<T>)
  fullName: Funique.Serialization<T>.Serialization(System.Collections.Generic.List<T>)
  type: Constructor
  source:
    remote:
      path: Util/Serialization.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: .ctor
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Util/Serialization.cs
    startLine: 22
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public Serialization(List<T> target)
    parameters:
    - id: target
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Sub New(target As List(Of T))
  overload: Funique.Serialization`1.#ctor*
  nameWithType.vb: Serialization(Of T).Serialization(List(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Funique.Serialization(Of T).Serialization(System.Collections.Generic.List(Of T))
  name.vb: Serialization(List(Of T))
- uid: Funique.Serialization`1.#ctor(`0[])
  commentId: M:Funique.Serialization`1.#ctor(`0[])
  id: '#ctor(`0[])'
  parent: Funique.Serialization`1
  langs:
  - csharp
  - vb
  name: Serialization(T[])
  nameWithType: Serialization<T>.Serialization(T[])
  fullName: Funique.Serialization<T>.Serialization(T[])
  type: Constructor
  source:
    remote:
      path: Util/Serialization.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_core.git
    id: .ctor
    path: ../../../project_unity_development/Assets/FuniquePlugin/Core/Util/Serialization.cs
    startLine: 27
  assemblies:
  - Funique.Core
  namespace: Funique
  syntax:
    content: public Serialization(T[] target)
    parameters:
    - id: target
      type: '{T}[]'
    content.vb: Public Sub New(target As T())
  overload: Funique.Serialization`1.#ctor*
  nameWithType.vb: Serialization(Of T).Serialization(T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Funique.Serialization(Of T).Serialization(T())
  name.vb: Serialization(T())
references:
- uid: Funique
  commentId: N:Funique
  name: Funique
  nameWithType: Funique
  fullName: Funique
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Funique.Serialization`1.ToList*
  commentId: Overload:Funique.Serialization`1.ToList
  name: ToList
  nameWithType: Serialization<T>.ToList
  fullName: Funique.Serialization<T>.ToList
  nameWithType.vb: Serialization(Of T).ToList
  fullName.vb: Funique.Serialization(Of T).ToList
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Funique.Serialization`1.ToArray*
  commentId: Overload:Funique.Serialization`1.ToArray
  name: ToArray
  nameWithType: Serialization<T>.ToArray
  fullName: Funique.Serialization<T>.ToArray
  nameWithType.vb: Serialization(Of T).ToArray
  fullName.vb: Funique.Serialization(Of T).ToArray
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Funique.Serialization`1.#ctor*
  commentId: Overload:Funique.Serialization`1.#ctor
  name: Serialization
  nameWithType: Serialization<T>.Serialization
  fullName: Funique.Serialization<T>.Serialization
  nameWithType.vb: Serialization(Of T).Serialization
  fullName.vb: Funique.Serialization(Of T).Serialization
