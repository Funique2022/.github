{
  "ci/Intro.html": {
    "href": "ci/Intro.html",
    "title": "Funique Documentation For Continuous Integration | Funique Documentation",
    "keywords": "Funique Documentation For Continuous Integration Warning Oh well, We didn't have CI/DI yet. :3"
  },
  "dev/Backend.html": {
    "href": "dev/Backend.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "dev/backend/Directus.html": {
    "href": "dev/backend/Directus.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "dev/backend/Docker.html": {
    "href": "dev/backend/Docker.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "dev/backend/Gateway.html": {
    "href": "dev/backend/Gateway.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "dev/backend/Portainer.html": {
    "href": "dev/backend/Portainer.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "dev/Contribute.html": {
    "href": "dev/Contribute.html",
    "title": "List of contributer | Funique Documentation",
    "keywords": "List of contributer ZhuElly Mainly maintain the git Repositories, RTMP nginx server, Funique unity plugin."
  },
  "dev/Intro.html": {
    "href": "dev/Intro.html",
    "title": "Funique Documentation For Developer | Funique Documentation",
    "keywords": "Funique Documentation For Developer For developer, the pipeline will complete different compare to user. Anyway, This documentation will guide you to setup the project."
  },
  "dev/Maintainer.html": {
    "href": "dev/Maintainer.html",
    "title": "Maintainer | Funique Documentation",
    "keywords": "Maintainer All the unity modules and integration package are using NPM to host it, We use unity package manager to get funique package. The code under Github organization repository is for alpha, beta development. After we finihs debugging and testing, Maintainer should push the latest version to NPM. The issue is, Unity package manager does not support NPM organization scope for search package, So if we want to add a new maintainer, we have to manually add to package one by one. More Package Manager Detail Install Node.js Download Node.js will install the necessary tool for you to publish npm package Login NPM Sign up an account in npm NPM Website And enter command in the terminal npm login Writing package.json Here is a example package.json Create a file in the root of your root folder { \"name\": \"tw.funique.demo\", \"displayName\": \"Demo Module\", \"description\": \"This is a great mode project\", \"version\": \"1.0.0\", \"repository\": \"<Link to your github repository>\", \"unity\": \"2021.3\", \"documentationUrl\": \"<Link your documentation website>\", \"license\": \"MIT\", \"author\": \"<Enter your name>\", \"keywords\":[ \"demo\", \"funique\", \"xr\", \"vr\" ], \"dependencies\": { \"com.unity.xr.interaction.toolkit\": \"2.2.0\", \"com.unity.xr.management\": \"4.3.3\", \"tw.funique.core\": \"1.0.3\", \"tw.funique.client\": \"1.0.1\" }, \"samples\": [ { \"displayName\": \"Fashion Scene\", \"description\": \"A scene with beautiful skybox and particle\", \"path\": \"Samples/FashionWeek\" }, { \"displayName\": \"Dark Scene\", \"description\": \"A scene with nothing in it\", \"path\": \"Samples/DarkScene\" } ] } Publish Open a ternimal in your root workspace folder Make sure you have already login npm Enter command in your ternimal npm publish If you see last line below, This mean you have successfully publish the package, you can go back unity package manager window to refresh"
  },
  "dev/Style.html": {
    "href": "dev/Style.html",
    "title": "風格指南 | Funique Documentation",
    "keywords": "風格指南 Whether you're trying to contribute the code or applies the custom modify version to your own project. Please follows the rules below, in order to make review easier. 微小的 Commit We recommend that make each commit as small as possible, it'll be easier review the code change this way. and descript what change, what feature do you add, what kind of bug did you fixed. 分支命名 The branch naming should follow below v1.0.1 -> The alpha, debuging v1.1 -> The merge version of 1.1 We should use tag to mark the beta version of the branch 標籤命名 The Tag naming should follow below v1.0-release -> 1.0 latest debugged version v1.1-release -> 1.1 latest debugged version C# 專案註釋 The below example will make it much more clear what this class, function, struct is doing. And it also make visual studio tooltip much more readable More Style /// <summary> /// Extensions: Unclassified <br /> /// ------------------------------------------------ <br /> /// 擴充: 未分類 /// </summary> public static class UtilityExtensions{ } Repository README"
  },
  "dev/tool/List.html": {
    "href": "dev/tool/List.html",
    "title": "開發好用工具列表 | Funique Documentation",
    "keywords": "開發好用工具列表 VS Code 插件支援文字編輯器，微軟的開源文字編輯器，網頁開發十分方便 Visual Studio Code Github 介面化 簡單介面化 GIT 流程 Github Desktop FTP 工具 FTP 介面話檔案 IO 操作 Filezilla API 工具 用於網頁開發使用，可以送出 Http Request 並且介面話使用 在 Windows 上安裝指令 Powershell choco install httpie choco upgrade httpie Httpie"
  },
  "index.html": {
    "href": "index.html",
    "title": "Funique Multimedia Framework | Funique Documentation",
    "keywords": "Funique Multimedia Framework Funique 多媒體框架 甚麼是 FMF ? 一列表的工具幫助你快速建置 Funique 專案 本 Wiki 會引導你架設專案、安裝插件、延伸應用 為什麼使用 FMF ? 第一次看到程式庫發現很雜亂，在工作的流程常常複製代碼來回，導致維護版本控制困難。時常代碼本身沒有單元測試，所以卡在結果環境測試階段 解決這個問題需要一個強大的框架，提升維護性。FMF 把組件都分開來做為插件管理。每個插件都有獨立的環境進行單元測試跟 Repo 頁面。 依賴性插件也能解決版本控制問題，每個插件都應該要有明確的依賴需求。 快速開始 串流快速開始 Unity快速開始 開發者快速開始 自動部屬快速開始"
  },
  "README.html": {
    "href": "README.html",
    "title": ".github | Funique Documentation",
    "keywords": ".github"
  },
  "stream/ffmpeg.html": {
    "href": "stream/ffmpeg.html",
    "title": "FFmpeg 指南 | Funique Documentation",
    "keywords": "FFmpeg 指南 FFmpeg 可以處裡影音的編碼, 解碼, 轉碼 根據使用的版本, 功能也會有所不同 ID Name Docuemnt 1. Funique FFmpeg Quick Start 2. Official FFmpeg Quick Start 主要還是以官方的 FFmpeg 為主, 除非有特殊的需求才會以自定義的 FFmpeg Feature Offical FFmpeg Custom Build FFmpeg H.264 Encoder ✔️ ✔️ Hevc Encoder ✔️ ✔️ H.264 RTMP ❌ ✔️ Hevc RTMP ❌ ✔️ HLS ✔️ ❌ 你可以看到 支援上很雜亂. 未來想一套全支援的方法論, 讓版本控制的管理成本降低 環境變數 把 FFmpeg 的資料夾加入至系統 Path 環境變數 使用者就可以在系統的任何一個地方使用此指令"
  },
  "stream/ffmpeg/indepth.html": {
    "href": "stream/ffmpeg/indepth.html",
    "title": "FFmpeg 深度分析 | Funique Documentation",
    "keywords": "FFmpeg 深度分析"
  },
  "stream/ffmpeg/overview.html": {
    "href": "stream/ffmpeg/overview.html",
    "title": "FFmpeg 指南 | Funique Documentation",
    "keywords": "FFmpeg 指南 官方網站 常用指令 聲音 刪除聲音 ffmpeg -i \"input.mp4\" -c:v copy -an \"output.mp4” 擷取聲音 ffmpeg -i input.mp4 -vn -acodec copy -preset ultrafast output.aac/m4a/wma 置換聲音 ffmpeg -i video.mp4 -i audio.wav -map 0:v -map 1:a -c:v copy -shortest output.mp4 增加聲音軌道 ffmpeg -i file.mp4 -i audio.wav -codec copy output.mp4 刪除影片 ffmpeg -i \"input.mp4\" -c:affmpeg -i file.mp4 -i audio.wav -codec copy output.mp4 copy -vn \"output.mp3” ffmpeg -ss 19:44 -i $(youtube-dl -f 22 -g URL) -acodec copy -vcodec copy -t 5 Fubuki-Yabe.mp4 ss HH:MM:SS : 起始時間 to HH:MM:SS : 結束時間 t HH:MM:SS : 長度 剪取 結合 擷取 轉檔 Https 把這串加入指令其中 -allowed_extensions ALL -user_agent \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/82.0.4050.0 Safari/537.36”"
  },
  "stream/Intro.html": {
    "href": "stream/Intro.html",
    "title": "Funique 文件指南 For 串流 | Funique Documentation",
    "keywords": "Funique 文件指南 For 串流 這篇會看到串流相關主題的文件 Stream 系統設計部分 Pipeline FFmpeg 開源工具使用, 編碼, 解碼, 轉碼 FFmpeg Tool Nginx 串流伺服器的運用 Nginx Tool"
  },
  "stream/nginx.html": {
    "href": "stream/nginx.html",
    "title": "Nginx 指南 | Funique Documentation",
    "keywords": "Nginx 指南 自定義的 Nginx 串流伺服器 靜態伺服器 接收 RTMP 信號 轉送 RTMP 信號 支援 HLS 轉碼 支援 DASH 轉碼 ID Name Docuemnt 1. RTMP Server Quick Start"
  },
  "stream/nginx/monitor.html": {
    "href": "stream/nginx/monitor.html",
    "title": "RTMP Nginx 伺服器觀測 | Funique Documentation",
    "keywords": "RTMP Nginx 伺服器觀測 輸入以下 Pattern 至瀏覽器中，得知你的串流狀態 http://[domain name]:80/rtmp_stat 你必須重新整理才會得到更新後的訊息"
  },
  "stream/nginx/overview.html": {
    "href": "stream/nginx/overview.html",
    "title": "Nginx 大綱 | Funique Documentation",
    "keywords": "Nginx 大綱 自定義的 RTMP nginx 串流伺服器，也有提供 Docker image 快速部屬 docker run -d --name rtmp -p 80:80 -p 1935:1935 -v /var/www/html/html/res://c/Users/myusername/Desktop/Test e87870823/rtmp:v1.5"
  },
  "stream/nginx/push.html": {
    "href": "stream/nginx/push.html",
    "title": "推影片串流 | Funique Documentation",
    "keywords": "推影片串流 映像檔案連結 URL 跟用途都在 Readme.md 中 使用 OBS 作為範例 在設定面板 (Setting) -> 串流 (Stream) 伺服器 -> 位址 串流鑰匙 -> URL 最後的部分 從上面的敘述，形成完整的 URL 會成為這樣 rtmp://192.168.61.190:1935/push/pushHD push -> 不轉碼, 只存流 live -> 轉所有格式 live_t -> 轉 ts 格式 live_m -> 轉 m4s 格式 live_d -> 轉 dash 格式 輸出的 URL 播放會為以下 http://192.168.61.190:80/hls/pushHD.m3u8 http://192.168.61.190:80/mp4/pushHD.m3u8 http://192.168.61.190:80/dash/pushHD.m3u8 如果你想要手動的轉碼，可以用 res 連結槽 http://192.168.61.190:80/res/custom_stream.m3u8"
  },
  "stream/nginx/setup.html": {
    "href": "stream/nginx/setup.html",
    "title": "架設串流伺服器 | Funique Documentation",
    "keywords": "架設串流伺服器 映像檔案 映像檔使用 Ubuntu 18.04 LTS, 如果你使用 Windows 你可以使用 WSL2 Docker Windows 安裝 啟用 windows WSL Powershell 並且輸入 dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart Docker 環境設定 在第一步驟完成後，你可以開始安裝 Docker 安裝 Docker 完成安裝後 切換版本至 WSL 2 wsl --set-default-version 2 恭喜，你有了 Docker 在 Windows 環境下 安裝串流伺服器服務 指令安裝 docker run -d --name rtmp -p 80:80 -p 1935:1935 -v /var/www/html/html/res://c/Users/myusername/Desktop/Test e87870823/rtmp:v1.5 GUI 安裝 先用指令拉取 Image 再生成 Container docker pull e87870823/rtmp:v1.5 Warning You should enter a exist folder for container path !! Ubuntu 安裝 sudo apt-get update sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg echo \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \"$(. /etc/os-release && echo \"$VERSION_CODENAME\"\" stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"
  },
  "stream/pipeline.html": {
    "href": "stream/pipeline.html",
    "title": "流程指南 | Funique Documentation",
    "keywords": "流程指南 This document is not about a tool or application. It is about how we provide our clients video stream. You will get every single part together. And have deep understand how the streaming service works. [!INFO] 某一天會補齊..."
  },
  "stream/pipeline/client.html": {
    "href": "stream/pipeline/client.html",
    "title": "客戶端 應用程式 | Funique Documentation",
    "keywords": "客戶端 應用程式 通常是指能夠播放串流或是影片網址的播放器 範例 web browser cannot play RTMP video stream, it needs to transcode to HLS before use it on the web. Some video player does not support H265 or Live stream update, Or m3u8 metadata support. Multi-channel audio cannot transcode into HLS format. Above three points are some example we need to consider when we design a pipeline. 常用框架支援格式 Avpro Support Format VLC Support Format HLS.js These are the limitation for the video players, So we usually use PotPlayer 64bit to test if our video stream could be play successfully."
  },
  "stream/pipeline/network.html": {
    "href": "stream/pipeline/network.html",
    "title": "網路 | Funique Documentation",
    "keywords": "網路 網路架構 for 串流伺服器 Warning TODO: Update funique current network implementation"
  },
  "stream/pipeline/source.html": {
    "href": "stream/pipeline/source.html",
    "title": "影像來源 | Funique Documentation",
    "keywords": "影像來源 影片來源通常會來自編碼端, 這可能是指串流伺服器 或是 OBS 串流. The different between both signal above is capability and size. The video stream will follow the video data format, this usually means the layout of the data, in order to make other end successfully decode. For this document, We will use OBS as example."
  },
  "stream/pipeline/transcode.html": {
    "href": "stream/pipeline/transcode.html",
    "title": "Transcode | Funique Documentation",
    "keywords": "Transcode A process of decoding, reformatting and re-encoding video stream We often use FFmpeg for HLS, RTMP, SRT, files transcoding. OBS for SDI, video transcoding. The guide for transcoding command detail, please go here [!NOTICE] This document only provide ffmpeg transcode guide for now"
  },
  "stream/tool.html": {
    "href": "stream/tool.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Client/Cinema/QuickStart.html": {
    "href": "unity/Client/Cinema/QuickStart.html",
    "title": "Cinema Logic Qucik Start | Funique Documentation",
    "keywords": "Cinema Logic Qucik Start Create a class inherit cinema server manager Configuration check cinema data section Media Control -> Targeting the media player ui controller If you follow the component you will see a much more detail UI controller component. We recommand you not touch this component, unless you know what you are doing. Audio Source -> AvPro audio output FLive Compute Shader for decoding (deprecated) VideoBtn -> Menu use element button (deprecated) Default_Media Player -> Assign this index of media player by default Default_Stereo Mode -> Assign this stereo when we have no idea what stereo the source is Options -> AvPro Media Player list Name -> Just for name, no effect for code Meta -> Hmmm, Support_Swap -> Support smooth transition, It must assign second media player Target -> AvPro media player instance Stereo Config -> The UV layout and material manipulate config Mode -> The use mode Writing Your Own Implementation // Writing your own manager public class CinemaClient : CinemaManagerClientUtility { } In the main component, you could modify the class or public class Main : MonoBehaviour { // Explose the config to editor level, provide desginer to tweek the value [SerializeField] CinemaManagerClientData data; // Our manager instance CinemaClient cinema; void Start(){ // Create cinema server manager process cinema = new CinemaClient(); cinema.RegisterConfig(data); } void Update(){ cinema.FrameUpdate(); } } You could override a main public class Main_Second : Main { // Explose the config to editor level, provide desginer to tweek the value [SerializeField] CinemaManagerClientData data; CinemaClient _CinemaClient; public override ICinema CinemaManager => _CustomCinemaManager; // You can override the default init manager behaviour protected override void InitManager(){ _CinemaClient = new CinemaClient(); // Switch default cinema to ours _CinemaClient_.RegisterConfig(CinemaData); _XRManager.RegisterConfig(XRData); _UIManager.RegisterConfig(UIData); _VerifyManager.RegisterConfig(VerifyData); _FileManager.RegisterConfig(FileData); _AndroidManager.RegisterConfig(AndroidData); _VerifyManager.OnLogin.AddListener(() => { _NetworkManager.Initialization(); }); Main.Managers.ToList().ForEach(x => { if (x.GetType() != typeof(NetworkManager)) x.Initialization(); }); (NetworkManager as NetworkManager).Initialization(); } } For API detail, check here API Reference"
  },
  "unity/Client/CinemaGuide.html": {
    "href": "unity/Client/CinemaGuide.html",
    "title": "劇院客戶端指南 | Funique Documentation",
    "keywords": "劇院客戶端指南 媒體播放器, AVPro, Audio 360 功能 [x] FLive [X] Stereo [ ] Cross-Domain [x] AvPro [x] Aduio360 [x] Media Control [x] Subtitles [ ] Custom Mesh"
  },
  "unity/Client/Client/QuickStart.html": {
    "href": "unity/Client/Client/QuickStart.html",
    "title": "Client Logic Qucik Start | Funique Documentation",
    "keywords": "Client Logic Qucik Start The problem of this modules is that it contains multiple manager base XR Manager Utility Android Manager Utility"
  },
  "unity/Client/ClientGuide.html": {
    "href": "unity/Client/ClientGuide.html",
    "title": "遊戲客戶端指南 | Funique Documentation",
    "keywords": "遊戲客戶端指南 Features"
  },
  "unity/Client/Dissonance/QuickStart.html": {
    "href": "unity/Client/Dissonance/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Client/DissonanceGuide.html": {
    "href": "unity/Client/DissonanceGuide.html",
    "title": "Dissonance Client Guide | Funique Documentation",
    "keywords": "Dissonance Client Guide Features"
  },
  "unity/Client/Media/QuickStart.html": {
    "href": "unity/Client/Media/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Client/MediaGuide.html": {
    "href": "unity/Client/MediaGuide.html",
    "title": "Media Client Guide | Funique Documentation",
    "keywords": "Media Client Guide Features"
  },
  "unity/Client/Monitor/QuickStart.html": {
    "href": "unity/Client/Monitor/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Client/MonitorGuide.html": {
    "href": "unity/Client/MonitorGuide.html",
    "title": "Monitor Client Guide | Funique Documentation",
    "keywords": "Monitor Client Guide Features"
  },
  "unity/Client/Network/QuickStart.html": {
    "href": "unity/Client/Network/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Client/NetworkGuide.html": {
    "href": "unity/Client/NetworkGuide.html",
    "title": "Network Client Guide | Funique Documentation",
    "keywords": "Network Client Guide Features [x] OSC Communication [x] LiteNet Communication [ ] Mirror Communication TODO [ ] Moving LiteNet to Mirror"
  },
  "unity/Client/Setting/QuickStart.html": {
    "href": "unity/Client/Setting/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Client/SettingGuide.html": {
    "href": "unity/Client/SettingGuide.html",
    "title": "Setting Client Guide | Funique Documentation",
    "keywords": "Setting Client Guide Features"
  },
  "unity/Client/UI/QuickStart.html": {
    "href": "unity/Client/UI/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Client/UIGuide.html": {
    "href": "unity/Client/UIGuide.html",
    "title": "UI Client Guide | Funique Documentation",
    "keywords": "UI Client Guide Features"
  },
  "unity/Client/Verify/QuickStart.html": {
    "href": "unity/Client/Verify/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Client/VerifyGuide.html": {
    "href": "unity/Client/VerifyGuide.html",
    "title": "Verify Client Guide | Funique Documentation",
    "keywords": "Verify Client Guide Provide CRM DRM solution Features [x] Software CRM account password lock"
  },
  "unity/Client/Video/QuickStart.html": {
    "href": "unity/Client/Video/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Client/VideoGuide.html": {
    "href": "unity/Client/VideoGuide.html",
    "title": "Video Client Guide | Funique Documentation",
    "keywords": "Video Client Guide Features"
  },
  "unity/ClientGuide.html": {
    "href": "unity/ClientGuide.html",
    "title": "Funique 客戶端元件 | Funique Documentation",
    "keywords": "Funique 客戶端元件 Here is a list of modules that contain client use logic This include received information from server, analysis network packages Media player logic or scene or character movement, etc... In this documentation, we will show you how to apply the components and even override its methods in order to make it works. ID Name Docuemnt 1. Cinema Quick Start 2. Client Quick Start 3. Dissonance Quick Start 4. Monitor Quick Start 5. Network Quick Start 6. Setting Quick Start 7. UI Quick Start 8. Verify Quick Start 9. Video Quick Start 10. AD Quick Start Back To Intro Basic Start Open any demo scene and find GameManager object in hierarchy And check main component This is the primary configuration component, You modify any value here it will effect the whole application work mode. Everything should be setup already, Unless you have reason or you know what you're doing, do not touch other gameobject."
  },
  "unity/Core/CoroutineHelper.html": {
    "href": "unity/Core/CoroutineHelper.html",
    "title": "Coroutine Helper | Funique Documentation",
    "keywords": "Coroutine Helper Help thoes class which need access unity monobehaviour coroutine feature. Don't forget add CoroutineHelper to any gameobject in the scene, it will assign to static instance member. class SampleA { void Use(){ Coroutine coroutine = CoroutineHelper.Instance.Run(Go); } IEnumerator Go(){ yield return new WaitForEndOfFrame(); } } For API detail, check here API Reference"
  },
  "unity/Core/Counter.html": {
    "href": "unity/Core/Counter.html",
    "title": "Counter | Funique Documentation",
    "keywords": "Counter Core library provide a simple timer Counter counter = new Counter(5f, true); 5f means that the length of the time we want to set as target true will tell the counter auto reset and start the next cycle Put this line of code in update function, simply activate the timer private void Update(){ counter.Update(Time.deltaTime); } For API detail, check here API Reference"
  },
  "unity/Core/EnumCycle.html": {
    "href": "unity/Core/EnumCycle.html",
    "title": "Enum Cycle | Funique Documentation",
    "keywords": "Enum Cycle It will loop base on the index it got, This does not support unorder enum. Here we define a simple enum enum SomeEnum{ None, First, Second, Thrid } Then we create a cycle by the enum type EnumCycle<SomeEnum> sample = new EnumCycle<SomeEnum>(); int current = 0; After that we can use it for cycle void Start(){ for(int i = 0; i < 10; i++){ current = sample.Next(current); Debug.Log(current); } // output: 0 // output: 1 // output: 2 // output: 3 // output: 0 // output: 1 // output: 2 // output: 3 // output: 0 // output: 1 } For API detail, check here API Reference"
  },
  "unity/Core/Extensions.html": {
    "href": "unity/Core/Extensions.html",
    "title": "Extension | Funique Documentation",
    "keywords": "Extension Extension provide application with more coding flexibility API Reference"
  },
  "unity/Core/Logger.html": {
    "href": "unity/Core/Logger.html",
    "title": "Funique Logger | Funique Documentation",
    "keywords": "Funique Logger Register logger system void Start(){ FuniqueLogger.Init(); FuniqueLogger.Log(\"This will log\", \"Main\"); } You can select the log mode void Start(){ // This will only use build unity log, not output the message to file FuniqueLogger.Init(LoggerApply.Unity); FuniqueLogger.Log(\"This will log\", \"Main\"); } Use logger system for the usage, check detail here API Reference"
  },
  "unity/Core/Manager.html": {
    "href": "unity/Core/Manager.html",
    "title": "Manager Setup Guide | Funique Documentation",
    "keywords": "Manager Setup Guide We're combine all the necessary manager in a scene to a single script to handle the data for it. Usually it's called Main.cs And it will contain the manager require config data fields For example If you want to change the verify part of logic, and could just open the verify config tab and modify the data and save it. No need to change scene structure or modify multiple component in the different place. Not all the configuration are in the main component, actually. This just combine the global manager config setting fields together. For example If you want to change the behaviour of the client-side cinema media player, you still have to go the target scene object, and modify by youself. API Reference"
  },
  "unity/Core/ThirdParty.html": {
    "href": "unity/Core/ThirdParty.html",
    "title": "Third Party Application | Funique Documentation",
    "keywords": "Third Party Application There are times when we want to open the third-party application and access application pointer by C# script, In order to achieve that, we provide a simple base class for this kind of purposes. First, inherit our custom third-party application handler public class Demo : ThirdPartyApplication { // This will effect debug label protected override string => \"WorkerName\"; public Demo() : base() { MainProcess.StartInfo.FileName = \"cmd.exe\"; MainProcess.StartInfo.WorkingDirectory = \"C:/work_directory\"; // For access standard IO MainProcess.StartInfo.RedirectStandardError = true; MainProcess.StartInfo.RedirectStandardInput = true; MainProcess.StartInfo.RedirectStandardOutput = true; MainProcess.StartInfo.CreateNoWindow = true; MainProcess.StartInfo.UseShellExecute = false; } } Then we can just use it as template for the application we want to target public class component : MonoBehaviour{ Demo demo; void Start(){ // Prepare the process start info demo = new Demo(); // Actually start the process demo.Run(); } void OnDestroy(){ // Do not forget the release the resource after we leave // Otherwise this will causing buggy beheviour demo.Dispose(); } } API Reference"
  },
  "unity/CoreGuide.html": {
    "href": "unity/CoreGuide.html",
    "title": "Funique 核心 | Funique Documentation",
    "keywords": "Funique 核心 The core library is most module rely on It contains the common knowledge of enum, structure, class, methods for server-side client-side. Recommand user install this library in your project before install anything else ID Name Docuemnt 1. Naughty Attributes Quick Start 2. Regex Builder Quick Start 2. Faster Gizmo Quick Start Back To Intro"
  },
  "unity/Installation.html": {
    "href": "unity/Installation.html",
    "title": "安裝包 | Funique Documentation",
    "keywords": "安裝包 使用 Git 專案 在 Github 組織 下尋找 project 開頭的 repository Clone 到你的資料夾, 以下為範例 git clone https://github.com/Funique2022/project_funique_player.git --branch v1.0 branch 為現在要選取的版本號 或是使用 Github Desktop 進行拉取動作 在根目錄尋找批次檔案 load 下載所有子模組 remove 刪除所有子模組 update 更新所有子模組"
  },
  "unity/intro.html": {
    "href": "unity/intro.html",
    "title": "Funique 文件指南 For 使用者 | Funique Documentation",
    "keywords": "Funique 文件指南 For 使用者 在這篇中, 你會看到如何架設 Unity 專案 繼承框架邏輯, 編寫自定義元件\\ 如果找到 bugs 可以找到指定的 repo 並且在 issue 回報問題 寫下你的問題, dev 會嘗試改善 架構 Funique 專案有幾個規則套用 在開始以前, 建議先閱讀 這篇 注意 有些模組是通用型的, 可以被套用在伺服器或客戶端. 工具快速開始 Funique Tool 客戶端快速開始 Funique Client 伺服器快速開始 Funique Server"
  },
  "unity/Server/Cinema/QuickStart.html": {
    "href": "unity/Server/Cinema/QuickStart.html",
    "title": "Cinema Server Logic Qucik Start | Funique Documentation",
    "keywords": "Cinema Server Logic Qucik Start Create a class inherit cinema server manager public class CinemaServer : CinemaManagerServerUtility { } public class Main : MonoBehaviour { // Explose the config to editor level, provide desginer to tweek the value [SerializeField] CinemaManagerServerData data; // Our manager instance CinemaServer cinema; void Start(){ // Create cinema server manager process cinema = new CinemaServer(); cinema.RegisterConfig(data); } } For API detail, check here API Reference"
  },
  "unity/Server/CinemaGuide.html": {
    "href": "unity/Server/CinemaGuide.html",
    "title": "Cinema Server Guide | Funique Documentation",
    "keywords": "Cinema Server Guide Manages all cinema and clients, Sort of like grouping manager, but with cienma data and feature attached to it. Features [x] Cinema view management [x] Cinema data management [x] Cinema client remote control To check the detail implementation: Quick Start"
  },
  "unity/Server/Media/QuickStart.html": {
    "href": "unity/Server/Media/QuickStart.html",
    "title": "Media Server Logic Qucik Start | Funique Documentation",
    "keywords": "Media Server Logic Qucik Start"
  },
  "unity/Server/MediaGuide.html": {
    "href": "unity/Server/MediaGuide.html",
    "title": "Media Server Guide | Funique Documentation",
    "keywords": "Media Server Guide Manage client side media player actions Features [x] Control client side play, pause, stop [x] Control client side stereo [x] Control client side subtitle"
  },
  "unity/Server/Network/QuickStart.html": {
    "href": "unity/Server/Network/QuickStart.html",
    "title": "Server Network Module Quick Start | Funique Documentation",
    "keywords": "Server Network Module Quick Start Create a class inherit network server manager public class NetworkServer : NetworkManagerServerUtility { } For API detail, check here API Reference"
  },
  "unity/Server/NetworkGuide.html": {
    "href": "unity/Server/NetworkGuide.html",
    "title": "Network Server Guide | Funique Documentation",
    "keywords": "Network Server Guide Handle network signal, sending and receiving. Features [x] UDP Server manage [x] UDP network sender [x] UDP network receiver [x] OSC network sender [x] OSC Server manage"
  },
  "unity/Server/Player/QuickStart.html": {
    "href": "unity/Server/Player/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Server/PlayerGuide.html": {
    "href": "unity/Server/PlayerGuide.html",
    "title": "Player Server Guide | Funique Documentation",
    "keywords": "Player Server Guide Manage clients IP and scene object instance. Features [x] Dictionary map manage player IP, scene object instance"
  },
  "unity/Server/Setting/QuickStart.html": {
    "href": "unity/Server/Setting/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Server/SettingGuide.html": {
    "href": "unity/Server/SettingGuide.html",
    "title": "Setting Server Guide | Funique Documentation",
    "keywords": "Setting Server Guide Manage setting configuration. Features [x] Configuration generate [x] Playlist info record [x] Cinema info record [x] Clients info record [x] Saving [x] Loading"
  },
  "unity/Server/Streaming/QuickStart.html": {
    "href": "unity/Server/Streaming/QuickStart.html",
    "title": "Server Streaming Module Quick Start | Funique Documentation",
    "keywords": "Server Streaming Module Quick Start Create a class inherit streaming server manager public class StreamingServer : StreamingManagerUtility { } For API detail, check here API Reference"
  },
  "unity/Server/StreamingGuide.html": {
    "href": "unity/Server/StreamingGuide.html",
    "title": "Streaming Server Guide | Funique Documentation",
    "keywords": "Streaming Server Guide Manage streaming casting. Features [x] FFmpeg manage [x] Nginx manage [x] HLS support (DASH, M4S, TS) [x] RTMP support [x] LIVE mode support [x] VOD mode support [ ] Raw ffmpeg command support [ ] Docker nginx server manage"
  },
  "unity/Server/UI/QuickStart.html": {
    "href": "unity/Server/UI/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Server/UIGuide.html": {
    "href": "unity/Server/UIGuide.html",
    "title": "UI Server Guide | Funique Documentation",
    "keywords": "UI Server Guide Manage the user interface mechanism. Features [x] Toolbar manage [x] Panel manage [x] Cinema manage [x] Page manage [x] Right click menu manage [x] Dynamic register right click menu event"
  },
  "unity/Server/Video/QuickStart.html": {
    "href": "unity/Server/Video/QuickStart.html",
    "title": "| Funique Documentation",
    "keywords": ""
  },
  "unity/Server/VideoGuide.html": {
    "href": "unity/Server/VideoGuide.html",
    "title": "Video Server Guide | Funique Documentation",
    "keywords": "Video Server Guide Store video, playlist information Features [x] Video info store [x] Saving video info [x] Loading video info"
  },
  "unity/ServerGuide.html": {
    "href": "unity/ServerGuide.html",
    "title": "Funique 伺服器元件 | Funique Documentation",
    "keywords": "Funique 伺服器元件 Here is a list of modules that contain server use logic This include sending information to clients, analysis clients network packages UI, server logic, cache, etc... In this documentation, we will show you how to apply the components and even override its methods in order to make it works. ID Name Docuemnt 1. Cinema Quick Start 2. Media Quick Start 3. Network Quick Start 4. Player Quick Start 5. Setting Quick Start 6. Streaming Quick Start 7. UI Quick Start 8. Video Quick Start Back To Intro"
  },
  "unity/Setup.html": {
    "href": "unity/Setup.html",
    "title": "架設 | Funique Documentation",
    "keywords": "架設 在這一篇中, 你可以了解專案架構 第三方工具幫助 Git Github Desktop 架構 這是主要的專案架構 統整(Itegration) (主要邏輯) 會保存在 /Assets/Scripts 模組(Modules) (通用邏輯) 會保存在 /Assets/FuniquePlugin/[Module Name] 媒體, 巨大檔案(忽略元件) 會保存在 /Assets/FuniqueAssets 這樣可以確保 模組的載入行為批次檔案都會在根目錄 Warning 當專案的依賴性改變之時, 便要手動更改根目錄批次檔案, 否則下一個人將會下載錯誤的依賴模組. 依賴性 每個模組都會有他的依賴性, 這些東西都會寫在模組的 readme.md 上"
  },
  "unity/Tool/Designer/QuickStart.html": {
    "href": "unity/Tool/Designer/QuickStart.html",
    "title": "Funique Deisgner Quick Start | Funique Documentation",
    "keywords": "Funique Deisgner Quick Start"
  },
  "unity/Tool/DesignerGuide.html": {
    "href": "unity/Tool/DesignerGuide.html",
    "title": "Designer Guide | Funique Documentation",
    "keywords": "Designer Guide Designer plugin is a agnostic unity packages that provides different editor tools helps you quick setup scenes, logic, or improve the pipeline. Components"
  },
  "unity/ToolGuide.html": {
    "href": "unity/ToolGuide.html",
    "title": "Unity 工具 | Funique Documentation",
    "keywords": "Unity 工具 Here is a list of modules that contain neutral use logic This include information analysis, editor tool, hub, etc... UI, server logic, cache, etc... In this documentation, we will show you how to apply the components and use the tool ID Name Docuemnt 1. Designer Quick Start Back To Intro"
  }
}