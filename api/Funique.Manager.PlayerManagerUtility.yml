### YamlMime:ManagedReference
items:
- uid: Funique.Manager.PlayerManagerUtility
  commentId: T:Funique.Manager.PlayerManagerUtility
  id: PlayerManagerUtility
  parent: Funique.Manager
  children:
  - Funique.Manager.PlayerManagerUtility.PlayerView
  - Funique.Manager.PlayerManagerUtility.RefFakePlayer
  - Funique.Manager.PlayerManagerUtility.RefPlayer
  - Funique.Manager.PlayerManagerUtility.SelectedPlayerIPList
  langs:
  - csharp
  - vb
  name: PlayerManagerUtility
  nameWithType: PlayerManagerUtility
  fullName: Funique.Manager.PlayerManagerUtility
  type: Class
  source:
    remote:
      path: PlayerManagerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_player.git
    id: PlayerManagerUtility
    path: ../../../project_unity_development/Assets/FuniquePlugin/Player/PlayerManagerUtility.cs
    startLine: 11
  assemblies:
  - Funique.Player
  namespace: Funique.Manager
  summary: "\nServer player view instance manager <br />\n------------------------------------------------ <br />\n伺服器 玩家介面 實體 管理員\n"
  example: []
  syntax:
    content: 'public class PlayerManagerUtility : ManagerBase<PlayerManagerData>, IDisposable, IPlayerUtility'
    content.vb: >-
      Public Class PlayerManagerUtility

          Inherits ManagerBase(Of PlayerManagerData)

          Implements IDisposable, IPlayerUtility
  inheritance:
  - System.Object
  - Funique.Manager.ManagerBase
  - Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}
  implements:
  - System.IDisposable
  - Funique.Player.IPlayerUtility
  inheritedMembers:
  - Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}.config
  - Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}.RegisterConfig(Funique.Player.PlayerManagerData)
  - Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}.Loaded(Funique.Player.PlayerManagerData)
  - Funique.Manager.ManagerBase.Initialization
  - Funique.Manager.ManagerBase.FrameUpdate
  - Funique.Manager.ManagerBase.Shutdown
  - Funique.Manager.ManagerBase.Dispose
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Funique.Manager.PlayerManagerUtility.SelectedPlayerIPList
  commentId: P:Funique.Manager.PlayerManagerUtility.SelectedPlayerIPList
  id: SelectedPlayerIPList
  parent: Funique.Manager.PlayerManagerUtility
  langs:
  - csharp
  - vb
  name: SelectedPlayerIPList
  nameWithType: PlayerManagerUtility.SelectedPlayerIPList
  fullName: Funique.Manager.PlayerManagerUtility.SelectedPlayerIPList
  type: Property
  source:
    remote:
      path: PlayerManagerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_player.git
    id: SelectedPlayerIPList
    path: ../../../project_unity_development/Assets/FuniquePlugin/Player/PlayerManagerUtility.cs
    startLine: 13
  assemblies:
  - Funique.Player
  namespace: Funique.Manager
  syntax:
    content: public List<string> SelectedPlayerIPList { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public ReadOnly Property SelectedPlayerIPList As List(Of String)
  overload: Funique.Manager.PlayerManagerUtility.SelectedPlayerIPList*
  implements:
  - Funique.Player.IPlayerUtility.SelectedPlayerIPList
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Funique.Manager.PlayerManagerUtility.RefPlayer
  commentId: P:Funique.Manager.PlayerManagerUtility.RefPlayer
  id: RefPlayer
  parent: Funique.Manager.PlayerManagerUtility
  langs:
  - csharp
  - vb
  name: RefPlayer
  nameWithType: PlayerManagerUtility.RefPlayer
  fullName: Funique.Manager.PlayerManagerUtility.RefPlayer
  type: Property
  source:
    remote:
      path: PlayerManagerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_player.git
    id: RefPlayer
    path: ../../../project_unity_development/Assets/FuniquePlugin/Player/PlayerManagerUtility.cs
    startLine: 14
  assemblies:
  - Funique.Player
  namespace: Funique.Manager
  syntax:
    content: public GameObject RefPlayer { get; }
    parameters: []
    return:
      type: UnityEngine.GameObject
    content.vb: Public ReadOnly Property RefPlayer As GameObject
  overload: Funique.Manager.PlayerManagerUtility.RefPlayer*
  implements:
  - Funique.Player.IPlayerUtility.RefPlayer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Funique.Manager.PlayerManagerUtility.RefFakePlayer
  commentId: P:Funique.Manager.PlayerManagerUtility.RefFakePlayer
  id: RefFakePlayer
  parent: Funique.Manager.PlayerManagerUtility
  langs:
  - csharp
  - vb
  name: RefFakePlayer
  nameWithType: PlayerManagerUtility.RefFakePlayer
  fullName: Funique.Manager.PlayerManagerUtility.RefFakePlayer
  type: Property
  source:
    remote:
      path: PlayerManagerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_player.git
    id: RefFakePlayer
    path: ../../../project_unity_development/Assets/FuniquePlugin/Player/PlayerManagerUtility.cs
    startLine: 15
  assemblies:
  - Funique.Player
  namespace: Funique.Manager
  syntax:
    content: public GameObject RefFakePlayer { get; }
    parameters: []
    return:
      type: UnityEngine.GameObject
    content.vb: Public ReadOnly Property RefFakePlayer As GameObject
  overload: Funique.Manager.PlayerManagerUtility.RefFakePlayer*
  implements:
  - Funique.Player.IPlayerUtility.RefFakePlayer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Funique.Manager.PlayerManagerUtility.PlayerView
  commentId: P:Funique.Manager.PlayerManagerUtility.PlayerView
  id: PlayerView
  parent: Funique.Manager.PlayerManagerUtility
  langs:
  - csharp
  - vb
  name: PlayerView
  nameWithType: PlayerManagerUtility.PlayerView
  fullName: Funique.Manager.PlayerManagerUtility.PlayerView
  type: Property
  source:
    remote:
      path: PlayerManagerUtility.cs
      branch: v1.0
      repo: https://github.com/Funique2022/funique_player.git
    id: PlayerView
    path: ../../../project_unity_development/Assets/FuniquePlugin/Player/PlayerManagerUtility.cs
    startLine: 22
  assemblies:
  - Funique.Player
  namespace: Funique.Manager
  summary: "\nThe map for address to client UI view <br />\n------------------------------------------------ <br />\n目錄: 連接位址 -> 用戶 UI 實體\n"
  example: []
  syntax:
    content: public Dictionary<string, PlayerViewBase> PlayerView { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Funique.Player.PlayerViewBase}
    content.vb: Public ReadOnly Property PlayerView As Dictionary(Of String, PlayerViewBase)
  overload: Funique.Manager.PlayerManagerUtility.PlayerView*
  implements:
  - Funique.Player.IPlayerUtility.PlayerView
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Funique.Manager
  commentId: N:Funique.Manager
  name: Funique.Manager
  nameWithType: Funique.Manager
  fullName: Funique.Manager
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Funique.Manager.ManagerBase
  commentId: T:Funique.Manager.ManagerBase
  parent: Funique.Manager
  name: ManagerBase
  nameWithType: ManagerBase
  fullName: Funique.Manager.ManagerBase
- uid: Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}
  commentId: T:Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}
  parent: Funique.Manager
  definition: Funique.Manager.ManagerBase`1
  name: ManagerBase<PlayerManagerData>
  nameWithType: ManagerBase<PlayerManagerData>
  fullName: Funique.Manager.ManagerBase<Funique.Player.PlayerManagerData>
  nameWithType.vb: ManagerBase(Of PlayerManagerData)
  fullName.vb: Funique.Manager.ManagerBase(Of Funique.Player.PlayerManagerData)
  name.vb: ManagerBase(Of PlayerManagerData)
  spec.csharp:
  - uid: Funique.Manager.ManagerBase`1
    name: ManagerBase
    nameWithType: ManagerBase
    fullName: Funique.Manager.ManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: Funique.Player.PlayerManagerData
    name: PlayerManagerData
    nameWithType: PlayerManagerData
    fullName: Funique.Player.PlayerManagerData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Funique.Manager.ManagerBase`1
    name: ManagerBase
    nameWithType: ManagerBase
    fullName: Funique.Manager.ManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Funique.Player.PlayerManagerData
    name: PlayerManagerData
    nameWithType: PlayerManagerData
    fullName: Funique.Player.PlayerManagerData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Funique.Player.IPlayerUtility
  commentId: T:Funique.Player.IPlayerUtility
  parent: Funique.Player
  name: IPlayerUtility
  nameWithType: IPlayerUtility
  fullName: Funique.Player.IPlayerUtility
- uid: Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}.config
  commentId: P:Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}.config
  parent: Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}
  definition: Funique.Manager.ManagerBase`1.config
  name: config
  nameWithType: ManagerBase<PlayerManagerData>.config
  fullName: Funique.Manager.ManagerBase<Funique.Player.PlayerManagerData>.config
  nameWithType.vb: ManagerBase(Of PlayerManagerData).config
  fullName.vb: Funique.Manager.ManagerBase(Of Funique.Player.PlayerManagerData).config
- uid: Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}.RegisterConfig(Funique.Player.PlayerManagerData)
  commentId: M:Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}.RegisterConfig(Funique.Player.PlayerManagerData)
  parent: Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}
  definition: Funique.Manager.ManagerBase`1.RegisterConfig(`0)
  name: RegisterConfig(PlayerManagerData)
  nameWithType: ManagerBase<PlayerManagerData>.RegisterConfig(PlayerManagerData)
  fullName: Funique.Manager.ManagerBase<Funique.Player.PlayerManagerData>.RegisterConfig(Funique.Player.PlayerManagerData)
  nameWithType.vb: ManagerBase(Of PlayerManagerData).RegisterConfig(PlayerManagerData)
  fullName.vb: Funique.Manager.ManagerBase(Of Funique.Player.PlayerManagerData).RegisterConfig(Funique.Player.PlayerManagerData)
  spec.csharp:
  - uid: Funique.Manager.ManagerBase`1.RegisterConfig(`0)
    name: RegisterConfig
    nameWithType: ManagerBase<PlayerManagerData>.RegisterConfig
    fullName: Funique.Manager.ManagerBase<Funique.Player.PlayerManagerData>.RegisterConfig
  - name: (
    nameWithType: (
    fullName: (
  - uid: Funique.Player.PlayerManagerData
    name: PlayerManagerData
    nameWithType: PlayerManagerData
    fullName: Funique.Player.PlayerManagerData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase`1.RegisterConfig(`0)
    name: RegisterConfig
    nameWithType: ManagerBase(Of PlayerManagerData).RegisterConfig
    fullName: Funique.Manager.ManagerBase(Of Funique.Player.PlayerManagerData).RegisterConfig
  - name: (
    nameWithType: (
    fullName: (
  - uid: Funique.Player.PlayerManagerData
    name: PlayerManagerData
    nameWithType: PlayerManagerData
    fullName: Funique.Player.PlayerManagerData
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}.Loaded(Funique.Player.PlayerManagerData)
  commentId: M:Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}.Loaded(Funique.Player.PlayerManagerData)
  parent: Funique.Manager.ManagerBase{Funique.Player.PlayerManagerData}
  definition: Funique.Manager.ManagerBase`1.Loaded(`0)
  name: Loaded(PlayerManagerData)
  nameWithType: ManagerBase<PlayerManagerData>.Loaded(PlayerManagerData)
  fullName: Funique.Manager.ManagerBase<Funique.Player.PlayerManagerData>.Loaded(Funique.Player.PlayerManagerData)
  nameWithType.vb: ManagerBase(Of PlayerManagerData).Loaded(PlayerManagerData)
  fullName.vb: Funique.Manager.ManagerBase(Of Funique.Player.PlayerManagerData).Loaded(Funique.Player.PlayerManagerData)
  spec.csharp:
  - uid: Funique.Manager.ManagerBase`1.Loaded(`0)
    name: Loaded
    nameWithType: ManagerBase<PlayerManagerData>.Loaded
    fullName: Funique.Manager.ManagerBase<Funique.Player.PlayerManagerData>.Loaded
  - name: (
    nameWithType: (
    fullName: (
  - uid: Funique.Player.PlayerManagerData
    name: PlayerManagerData
    nameWithType: PlayerManagerData
    fullName: Funique.Player.PlayerManagerData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase`1.Loaded(`0)
    name: Loaded
    nameWithType: ManagerBase(Of PlayerManagerData).Loaded
    fullName: Funique.Manager.ManagerBase(Of Funique.Player.PlayerManagerData).Loaded
  - name: (
    nameWithType: (
    fullName: (
  - uid: Funique.Player.PlayerManagerData
    name: PlayerManagerData
    nameWithType: PlayerManagerData
    fullName: Funique.Player.PlayerManagerData
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.ManagerBase.Initialization
  commentId: M:Funique.Manager.ManagerBase.Initialization
  parent: Funique.Manager.ManagerBase
  name: Initialization()
  nameWithType: ManagerBase.Initialization()
  fullName: Funique.Manager.ManagerBase.Initialization()
  spec.csharp:
  - uid: Funique.Manager.ManagerBase.Initialization
    name: Initialization
    nameWithType: ManagerBase.Initialization
    fullName: Funique.Manager.ManagerBase.Initialization
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase.Initialization
    name: Initialization
    nameWithType: ManagerBase.Initialization
    fullName: Funique.Manager.ManagerBase.Initialization
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.ManagerBase.FrameUpdate
  commentId: M:Funique.Manager.ManagerBase.FrameUpdate
  parent: Funique.Manager.ManagerBase
  name: FrameUpdate()
  nameWithType: ManagerBase.FrameUpdate()
  fullName: Funique.Manager.ManagerBase.FrameUpdate()
  spec.csharp:
  - uid: Funique.Manager.ManagerBase.FrameUpdate
    name: FrameUpdate
    nameWithType: ManagerBase.FrameUpdate
    fullName: Funique.Manager.ManagerBase.FrameUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase.FrameUpdate
    name: FrameUpdate
    nameWithType: ManagerBase.FrameUpdate
    fullName: Funique.Manager.ManagerBase.FrameUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.ManagerBase.Shutdown
  commentId: M:Funique.Manager.ManagerBase.Shutdown
  parent: Funique.Manager.ManagerBase
  name: Shutdown()
  nameWithType: ManagerBase.Shutdown()
  fullName: Funique.Manager.ManagerBase.Shutdown()
  spec.csharp:
  - uid: Funique.Manager.ManagerBase.Shutdown
    name: Shutdown
    nameWithType: ManagerBase.Shutdown
    fullName: Funique.Manager.ManagerBase.Shutdown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase.Shutdown
    name: Shutdown
    nameWithType: ManagerBase.Shutdown
    fullName: Funique.Manager.ManagerBase.Shutdown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.ManagerBase.Dispose
  commentId: M:Funique.Manager.ManagerBase.Dispose
  parent: Funique.Manager.ManagerBase
  name: Dispose()
  nameWithType: ManagerBase.Dispose()
  fullName: Funique.Manager.ManagerBase.Dispose()
  spec.csharp:
  - uid: Funique.Manager.ManagerBase.Dispose
    name: Dispose
    nameWithType: ManagerBase.Dispose
    fullName: Funique.Manager.ManagerBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase.Dispose
    name: Dispose
    nameWithType: ManagerBase.Dispose
    fullName: Funique.Manager.ManagerBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Funique.Manager.ManagerBase`1
  commentId: T:Funique.Manager.ManagerBase`1
  name: ManagerBase<T>
  nameWithType: ManagerBase<T>
  fullName: Funique.Manager.ManagerBase<T>
  nameWithType.vb: ManagerBase(Of T)
  fullName.vb: Funique.Manager.ManagerBase(Of T)
  name.vb: ManagerBase(Of T)
  spec.csharp:
  - uid: Funique.Manager.ManagerBase`1
    name: ManagerBase
    nameWithType: ManagerBase
    fullName: Funique.Manager.ManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Funique.Manager.ManagerBase`1
    name: ManagerBase
    nameWithType: ManagerBase
    fullName: Funique.Manager.ManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Player
  commentId: N:Funique.Player
  name: Funique.Player
  nameWithType: Funique.Player
  fullName: Funique.Player
- uid: Funique.Manager.ManagerBase`1.config
  commentId: P:Funique.Manager.ManagerBase`1.config
  name: config
  nameWithType: ManagerBase<T>.config
  fullName: Funique.Manager.ManagerBase<T>.config
  nameWithType.vb: ManagerBase(Of T).config
  fullName.vb: Funique.Manager.ManagerBase(Of T).config
- uid: Funique.Manager.ManagerBase`1.RegisterConfig(`0)
  commentId: M:Funique.Manager.ManagerBase`1.RegisterConfig(`0)
  name: RegisterConfig(T)
  nameWithType: ManagerBase<T>.RegisterConfig(T)
  fullName: Funique.Manager.ManagerBase<T>.RegisterConfig(T)
  nameWithType.vb: ManagerBase(Of T).RegisterConfig(T)
  fullName.vb: Funique.Manager.ManagerBase(Of T).RegisterConfig(T)
  spec.csharp:
  - uid: Funique.Manager.ManagerBase`1.RegisterConfig(`0)
    name: RegisterConfig
    nameWithType: ManagerBase<T>.RegisterConfig
    fullName: Funique.Manager.ManagerBase<T>.RegisterConfig
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase`1.RegisterConfig(`0)
    name: RegisterConfig
    nameWithType: ManagerBase(Of T).RegisterConfig
    fullName: Funique.Manager.ManagerBase(Of T).RegisterConfig
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.ManagerBase`1.Loaded(`0)
  commentId: M:Funique.Manager.ManagerBase`1.Loaded(`0)
  name: Loaded(T)
  nameWithType: ManagerBase<T>.Loaded(T)
  fullName: Funique.Manager.ManagerBase<T>.Loaded(T)
  nameWithType.vb: ManagerBase(Of T).Loaded(T)
  fullName.vb: Funique.Manager.ManagerBase(Of T).Loaded(T)
  spec.csharp:
  - uid: Funique.Manager.ManagerBase`1.Loaded(`0)
    name: Loaded
    nameWithType: ManagerBase<T>.Loaded
    fullName: Funique.Manager.ManagerBase<T>.Loaded
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Funique.Manager.ManagerBase`1.Loaded(`0)
    name: Loaded
    nameWithType: ManagerBase(Of T).Loaded
    fullName: Funique.Manager.ManagerBase(Of T).Loaded
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Funique.Manager.PlayerManagerUtility.SelectedPlayerIPList*
  commentId: Overload:Funique.Manager.PlayerManagerUtility.SelectedPlayerIPList
  name: SelectedPlayerIPList
  nameWithType: PlayerManagerUtility.SelectedPlayerIPList
  fullName: Funique.Manager.PlayerManagerUtility.SelectedPlayerIPList
- uid: Funique.Player.IPlayerUtility.SelectedPlayerIPList
  commentId: P:Funique.Player.IPlayerUtility.SelectedPlayerIPList
  parent: Funique.Player.IPlayerUtility
  name: SelectedPlayerIPList
  nameWithType: IPlayerUtility.SelectedPlayerIPList
  fullName: Funique.Player.IPlayerUtility.SelectedPlayerIPList
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Funique.Manager.PlayerManagerUtility.RefPlayer*
  commentId: Overload:Funique.Manager.PlayerManagerUtility.RefPlayer
  name: RefPlayer
  nameWithType: PlayerManagerUtility.RefPlayer
  fullName: Funique.Manager.PlayerManagerUtility.RefPlayer
- uid: Funique.Player.IPlayerUtility.RefPlayer
  commentId: P:Funique.Player.IPlayerUtility.RefPlayer
  parent: Funique.Player.IPlayerUtility
  name: RefPlayer
  nameWithType: IPlayerUtility.RefPlayer
  fullName: Funique.Player.IPlayerUtility.RefPlayer
- uid: UnityEngine.GameObject
  commentId: T:UnityEngine.GameObject
  parent: UnityEngine
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: UnityEngine.GameObject
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Funique.Manager.PlayerManagerUtility.RefFakePlayer*
  commentId: Overload:Funique.Manager.PlayerManagerUtility.RefFakePlayer
  name: RefFakePlayer
  nameWithType: PlayerManagerUtility.RefFakePlayer
  fullName: Funique.Manager.PlayerManagerUtility.RefFakePlayer
- uid: Funique.Player.IPlayerUtility.RefFakePlayer
  commentId: P:Funique.Player.IPlayerUtility.RefFakePlayer
  parent: Funique.Player.IPlayerUtility
  name: RefFakePlayer
  nameWithType: IPlayerUtility.RefFakePlayer
  fullName: Funique.Player.IPlayerUtility.RefFakePlayer
- uid: Funique.Manager.PlayerManagerUtility.PlayerView*
  commentId: Overload:Funique.Manager.PlayerManagerUtility.PlayerView
  name: PlayerView
  nameWithType: PlayerManagerUtility.PlayerView
  fullName: Funique.Manager.PlayerManagerUtility.PlayerView
- uid: Funique.Player.IPlayerUtility.PlayerView
  commentId: P:Funique.Player.IPlayerUtility.PlayerView
  parent: Funique.Player.IPlayerUtility
  name: PlayerView
  nameWithType: IPlayerUtility.PlayerView
  fullName: Funique.Player.IPlayerUtility.PlayerView
- uid: System.Collections.Generic.Dictionary{System.String,Funique.Player.PlayerViewBase}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Funique.Player.PlayerViewBase}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, PlayerViewBase>
  nameWithType: Dictionary<String, PlayerViewBase>
  fullName: System.Collections.Generic.Dictionary<System.String, Funique.Player.PlayerViewBase>
  nameWithType.vb: Dictionary(Of String, PlayerViewBase)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Funique.Player.PlayerViewBase)
  name.vb: Dictionary(Of String, PlayerViewBase)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Funique.Player.PlayerViewBase
    name: PlayerViewBase
    nameWithType: PlayerViewBase
    fullName: Funique.Player.PlayerViewBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Funique.Player.PlayerViewBase
    name: PlayerViewBase
    nameWithType: PlayerViewBase
    fullName: Funique.Player.PlayerViewBase
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
